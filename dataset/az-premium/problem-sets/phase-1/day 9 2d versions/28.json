{
    "code": 200,
    "data": {
        "body": "<p>Given a 2d-array of dimension <i>N*M</i> and <i>Q</i> queries. In each query five integers <i>x1, y1, x2, y2, C</i> is given, you have to increase the value of each cell in the submatrix with <i>(x1,y1)</i> be the leftmost corner and <i>(x2,y2)</i> be the rightmost corner by <i>C</i>. Initially the value of all the cell of the 2d-array is 0.</p><p>After all the query is performed, print the maximum value present in the 2d-array and the number of the cell with the maximum value.</p>",
        "complete_approach": "",
        "constraints": "",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e3 + 10;\nlong long p[N][N];\nlong long a[N][N];\nvoid solve() {\n  int n, m, q;\n  cin >> n >> m >> q;\n  while (q--) {\n    int x1, y1, x2, y2, c;\n    cin >> x1 >> y1 >> x2 >> y2 >> c;\n    a[x1][y1] += c;\n    a[x1][y2 + 1] -= c;\n    a[x2 + 1][y1] -= c;\n    a[x2 + 1][y2 + 1] += c;\n  }\n\n  long long max = a[1][1];\n  long long count = 0;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      p[i][j] = a[i][j] + p[i - 1][j] + p[i][j - 1] - p[i - 1][j - 1];\n      if (p[i][j] == max) {\n        count++;\n      } else if (p[i][j] > max) {\n        max = p[i][j];\n        count = 1;\n      }\n    }\n  }\n\n  cout << max << \" \" << count << '\\n';\n}\n\nsigned main() { solve(); }\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:44:59.319317+00:00"
        },
        "hints": {
            "hint1": "Use Partial Sums in 2D matrix. If new to this concept,\nCheck the video solution - 2D Partial Sums Concept.",
            "hint2": "We need to add a value C to a rectangular region with (x1,y1) as the top left corner and (x2,y2) as the bottom right corner. Lets say we use our idea of partial sums, and just add $+C$ to the top left corner at (x1,y1). What will be its effect on the matrix? We can see that due to this addition all the elements in the rectangle (x1,y1) as the left corner and (n,m) as the right bottom corner would have the effect of $+C$. But we surely don't want this because our aim is only to add C in the smaller rectangle with (x1,y1) and (x2,y2) as corners. How to counter this problem? Well we do a $-C$ at the top right and bottom left corners which are (x1,y2) and (x2,y1). Is that all? Does it take care of everything. What about the region which is to the right and bottom of (x2,y2). Isn't it getting the effect of all the above additions and subtractions? So it will have one $+C$ and two $-C$ contributions. Well we can easily solve this issue by just adjusting this with a $+C$ at the index (x2,y2).",
            "solution_approach": "We solve this problem using the concept of partial sums.\n\nFirst, create a 2d-array of size N*M to store the initial values of all cells as 0.\n\nNext, for each query (x1, y1, x2, y2, C), we need to add C to each cell in the submatrix with (x1,y1) be the leftmost corner and (x2,y2) be the rightmost corner.\n\nTo do this efficiently using partial sums, we need to first precompute a 2d-array called partial sums, where each cell (i,j) stores the sum of all the values in the submatrix with (1,1) as the top-left corner and (i,j) as the bottom-right corner. We can compute this array using the following formula:\n\npartialsums[i][j] = partialsums[i-1][j] + partialsums[i][j-1] - partialsums[i-1][j-1] + values[i][j]\n\nHere, values[i][j] is the value of the cell at (i,j) in the original 2d-array.\n\nOnce we have computed the partial sums array, we can update the values in the submatrix with (x1,y1) as the top-left corner and (x2,y2) as the bottom-right corner by adding C to each cell using the following formula:\n\npartialsums[x2][y2] += C\npartialsums[x1-1][y2] -= C\npartialsums[x2][y1-1] -= C\npartialsums[x1-1][y1-1] += C\n\nAfter all the queries have been processed, we can compute the final values in the original 2d-array by subtracting the partial sums for the overlapping submatrices using the following formula:\n\nvalues[i][j] = partialsums[i][j] - partialsums[i-1][j] - partialsums[i][j-1] + partialsums[i-1][j-1]\n\nThis will give us the final values in the original 2d-array after all the queries have been processed.\nAfter this just iterate over the entire matrix to find the maximum element. \nThe time complexity for this algorithm is $O(Q+N\\times M)$. For each query it almost takes constant time. Finally we iterate over the entire 2D matrix to find the prefix sum of the partial sum matrix and keep updating the maximum value and its position."
        },
        "id": 28,
        "input_format": "<p>The first line contains three space-separated integers <i>N</i>, <i>M</i>, <i>Q</i> where 1&lt;=<i>N</i>, <i>M</i>&lt;=10^3, 1&lt;=<i>Q</i>&lt;=10^6.</p><p>The next <i>Q</i> lines contains five space separated integers <i>x1, y1, x2, y2, C</i> where 1&lt;=<i>x1</i>&lt;=<i>x2</i>&lt;=<i>N</i>, 1&lt;=<i>y1</i>&lt;=<i>y2</i>&lt;=<i>M</i>, -10^9&lt;=<i>C</i>&lt;=10^9.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 512000,
        "note": "",
        "output_format": "<p>After all the query is performed, print 2 space-separated integers representing the maximum value present in the 2d-array and the number of the cell with the maximum value.</p>",
        "samples": [
            {
                "input": "5 5 5\n1 1 2 2 -8\n1 2 3 4 9\n2 3 3 3 -2\n4 4 4 4 -4\n2 3 2 4 0",
                "output": "9 5"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Prefix And Partial Sums"
        ],
        "template_code": [],
        "time_limit_sec": 4.0,
        "title": "Max Value in the Rectangle",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}