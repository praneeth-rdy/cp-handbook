{
    "code": 200,
    "data": {
        "body": "If the vertices of the given figure are A,B, C, and D then the condition for it to be a square is:\n\n1. The sides AB, BC, CD and DA should be equal and be non-zero.\n2. The diagonals AC and BD should be equal.\nTo check this you can arrange the 4 vertices in all 4! = 24 ways and check for each arrangement. You can improve this by noticing that several of these arrangements will be the same. For example, ABCD, BCDA, CDAB, DABC, ADCB, DCBA, CBAD, and BADC are equal. So you can just check for the 3 distinct arrangements.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 x,y \u2264 10<sup>6</sup></p>",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n/*Returns square distance between two points p1 and p2*/\nlong long getDist(vector<long long> &p1, vector<long long> &p2) {\n    return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);\n}\n\n/*Returns true if p1-p2-p3 forms right angle*/\nbool isRight(vector<long long> &p1, vector<long long> &p2, vector<long long> &p3) {\n    return !((p2[0] - p1[0]) * (p3[0] - p2[0]) + (p2[1] - p1[1]) * (p3[1] - p2[1]));\n}\n\nbool check(vector<long long>& p1, vector<long long>& p2, vector<long long>& p3, vector<long long>& p4) {\n    if(getDist(p1, p2) == getDist(p1, p4) && getDist(p2, p3) == getDist(p1, p4) && getDist(p3, p4) == getDist(p1, p4) && isRight(p4, p1, p2) && isRight(p2, p3, p4))\n        return true;\n    return false;\n}\n\nbool isValidSquare(vector<vector<long long> > &v) {\n    vector<long long> p1 = v[0];\n    vector<long long> p2 = v[1];\n    vector<long long> p3 = v[2];\n    vector<long long> p4 = v[3];\n\n    if(p1 == p2 || p1 == p3 || p1 == p4 || p2 == p3 || p2 == p4 || p3 == p4)\n        return false;\n    \n    if(check(p1, p2, p3, p4) || check(p1, p2, p4, p3) || check(p1, p3, p2, p4))\n        return true;\n    return false;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    vector<vector<long long>> v(4, vector<long long>(2));\n    for (int i = 0; i < 4; i++)\n        cin >> v[i][0] >> v[i][1];\n    cout << isValidSquare(v) << '\\n';\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:19:20.358771+00:00"
        },
        "hints": {
            "hint1": "<p><span style=\"background-color:transparent;color:#000000;\">Check for all 4! possible ways if a square can be formed.</span></p>",
            "hint2": "<p><span style=\"background-color:transparent;color:#000000;\">What's the condition for 4 points to form a square?</span></p>",
            "solution_approach": "If the vertices of the given figure are A,B, C, and D then the condition for it to be a square is:\n\n1. The sides AB, BC, CD and DA should be equal and be non-zero.\n2. The diagonals AC and BD should be equal.\nTo check this you can arrange the 4 vertices in all 4! = 24 ways and check for each arrangement. You can improve this by noticing that several of these arrangements will be the same. For example, ABCD, BCDA, CDAB, DABC, ADCB, DCBA, CBAD, and BADC are equal. So you can just check for the 3 distinct arrangements."
        },
        "id": 629,
        "input_format": "<p>There are 4 lines in the input each containing 2 integers <i>x</i> and <i>y </i>- the coordinates of the points.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>The given points form a valid square of unit area.</p>",
        "output_format": "<p>Print 1 if it is a valid square, else print 0.</p>",
        "samples": [
            {
                "input": "0 0\n1 0\n0 1\n1 1",
                "output": "1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Implementation"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nbool isValidSquare(vector<vector<long long>> &v)\n{\n    //add code here\n}\n\n<fix>\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    vector<vector<long long>> v(4, vector<long long>(2));\n    for (int i = 0; i < 4; i++)\n        cin >> v[i][0] >> v[i][1];\n    cout << isValidSquare(v) << '\\n';\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "SQUARE",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}