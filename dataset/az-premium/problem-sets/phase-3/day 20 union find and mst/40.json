{
    "code": 200,
    "data": {
        "body": "<p>Write a program that manipulates a disjoint set <i>S = S<sub>1</sub>, S<sub>2</sub>, ..., S<sub>k</sub></i>.</p><p>First of all, the program should read an integer <i>n</i>, then make a disjoint set where each element consists of <i>0, 1, ..., n-1</i> respectively.</p><p>Next, the program should read an integer <i>q</i> and manipulate the set of <i>q</i> queries. There are two kinds of queries for different operations:</p><ol><li><i><strong>unite(x, y)</strong>:</i> unite sets that contain <i>x</i> and <i>y</i>, say <i>S<sub>x</sub></i> and <i>S<sub>y</sub></i>, into a new set.</li><li><i><strong>same(x, y)</strong>:</i> determine whether <i>x</i> and <i>y</i> are in the same set.</li></ol>",
        "complete_approach": "",
        "constraints": "",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nclass wunionfind {\n  public:\n    int *id, *sz;\n    wunionfind(int n = N) {\n        id = new int[n + 1];\n        sz = new int[n + 1];\n        for(int i = 0; i <= n; i++) {\n            id[i] = i;\n            sz[i] = 1;\n        }\n    }\n    int root(int idx) {\n        int x = idx;\n        while(x != id[x]) {\n            id[x] = id[id[x]];\n            x = id[x];\n        }\n        return x;\n    }\n    bool uni(int a, int b) {\n        int x = root(a), y = root(b);\n        if(sz[x] < sz[y]) {\n            swap(x, y);\n        }\n        if (x != y) {\n            id[y] = x;\n            sz[x] += sz[y];\n            sz[y] = 0;\n            return false;\n        }\n        return true;\n    }\n    bool check(int a, int b) {\n        return (root(a) == root(b));\n    }\n};\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int n, q; cin >> n >> q;\n    wunionfind W(n);\n\n    for(int i = 0; i < q; i++) {\n        int com, x, y;\n        cin >> com >> x >> y;\n        if(!com) W.uni(x, y);\n        else cout << W.check(x, y) << \"\\n\";\n    }\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:47:52.629447+00:00"
        },
        "hints": {
            "hint1": "<p><i>N/A</i></p>",
            "hint2": "<p><i>Use disjoint set union.</i></p>",
            "solution_approach": "<p><i>Check out the video.</i></p>"
        },
        "id": 40,
        "input_format": "<p>The first line contains two space-separated integers <i>n</i> and <i>q</i>, (1 \u2264 <i>n</i> \u2264 10<sup>4</sup>, 1 \u2264 <i>q</i> \u2264 10<sup>5</sup>).<br>Then, <i>q</i> queries are given in the form <i><strong>com x y</strong></i>, where <i>com</i> represents the type of queries. <i>'0'</i> denotes <i><strong>unite</strong></i> and <i>'1'</i> denotes <i><strong>same</strong></i> operation (<i>x != y</i>).</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>For each same operation, print 1 if <i>x</i> and <i>y</i> are in the same set, otherwise 0, in a line.</p>",
        "samples": [
            {
                "input": "5 12\n0 1 4\n0 2 3\n1 1 2\n1 3 4\n1 1 4\n1 3 2\n0 1 3\n1 2 4\n1 3 0\n0 0 4\n1 0 2\n1 3 0",
                "output": "0\n0\n1\n1\n1\n0\n1\n1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Graphs",
            "Union Find",
            "company-Gameskraft"
        ],
        "template_code": [],
        "time_limit_sec": 0.2,
        "title": "Disjoint Union",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}