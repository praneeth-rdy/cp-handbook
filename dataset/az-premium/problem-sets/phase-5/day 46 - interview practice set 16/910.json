{
    "code": 200,
    "data": {
        "body": "Given two strings. The task is to find the length of the longest common substring.",
        "complete_approach": "",
        "constraints": "$ 1 \\leq T \\leq 100$\n$ 1 \\leq |s1| \\leq 1000$\n$ 1 \\leq |s2| \\leq 1000$\n$s1$ and $s2$ contains small letters only.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nstring s1, s2;\nint n, m;\nint dp[1001][1001];\nint rec(int i, int j) {\n    if (i == n || j == m)return 0;\n    auto &ans = dp[i][j];\n    if (ans != -1)return ans;\n    ans = 0;\n    if (s1[i] == s2[j])ans = max(ans, 1 + rec(i + 1, j + 1));\n    rec(i + 1, j), rec(i, j + 1);\n    return ans;\n}\nvoid solve() {\n    cin >> s1 >> s2;\n    n = s1.size(), m = s2.size();\n    memset(dp, -1, sizeof(dp));\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++)ans = max(ans, rec(i, j));\n    }\n    cout << ans << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:23:25.898517+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "The longest common suffix has the following optimal substructure property. \n- If last characters match, then we reduce both lengths by $1$ \n$LCSuff(X, Y, m, n) = LCSuff(X, Y, m-1, n-1) + 1$, if $X[m-1] = Y[n-1]$ \n- If last characters do not match, then result is $0$, i.e., $LCSuff(X, Y, m, n) = 0$ , if $(X[m-1] != Y[n-1])$\n\nNow we consider suffixes of different substrings ending at different indexes. \nThe maximum length Longest Common Suffix is the longest common substring. \n$LCSubStr(X, Y, m, n) = Max(LCSuff(X, Y, i, j))$ where $1 <= i <= m$ and $1 <= j <= n$ \n\n**Time Complexity** : $O(|s1|*|s2|)$"
        },
        "id": 910,
        "input_format": "First-line contains $T$ - the number of test cases.\nEach test case contains two strings $s1$ and $s2$ in a single line.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output the length of the longest common substring of the two strings, in a new line.",
        "samples": [
            {
                "input": "3\nabc abc\nalgozenith algo\nalgo zenith\n",
                "output": "3\n4\n0\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Morgan Stanley"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Longest Common Substring",
        "video_editorial_id": 10655
    },
    "details": "Problem Details"
}