{
    "code": 200,
    "data": {
        "body": "<p>You are given a map of a building, and your task is to count the number of its rooms. The size of the map is <i>n</i> \u00d7 <i>m</i> squares, and each square is either floor or wall. You can walk left, right, up, and down through the floor squares.</p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>n, m</i> \u2264 1000</p>",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n, m;\nvector<string> arr;\nusing ii = pair<int, int>;\nint dx[] = {1, 0, -1, 0};\nint dy[] = {0, 1, 0, -1};\nbool visited[1000][1000];\n\nbool check(int x, int y)\n{\n    if (x < 0 || x >= n || y < 0 || y >= m)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n}\n\nvoid dfs(ii k)\n{\n    int x = k.first, y = k.second;\n    visited[x][y] = true;\n    for (int i = 0; i < 4; i++)\n    {\n        if (check(x + dx[i], y + dy[i]) && arr[x + dx[i]][y + dy[i]] == '.')\n        {\n            if (!visited[x + dx[i]][y + dy[i]])\n            {\n                dfs({x + dx[i], y + dy[i]});\n            }\n        }\n    }\n}\n\nsigned main()\n{\n    ios_base::sync_with_stdio();\n    cin.tie(0);\n    cout.tie(0);\n    cin >> n >> m;\n    arr.resize(n + 1);\n\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            visited[i][j] = false;\n        }\n    }\n\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            if (!visited[i][j] && arr[i][j] == '.')\n            {\n                dfs({i, j});\n                ans++;\n            }\n        }\n    }\n    cout << ans << endl;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:13:45.390327+00:00"
        },
        "hints": {
            "hint1": "Apply DFS/BFS",
            "hint2": "Look for components. Once all connected floor squares have been visited for a given DFS, return to the starting point and look for another unvisited floor square to start a new DFS.",
            "solution_approach": "1. Create a two-dimensional boolean array to keep track of the visited squares in the building.\n2. For each floor square that has not been visited yet, do a depth-first search (DFS) to visit all connected floor squares.\n3. Each time you start a new DFS, increment the counter variable by 1.\n4. During each DFS, mark all visited floor squares as \"visited\" in the boolean array.\n5. Once all connected floor squares have been visited for a given DFS, return to the starting point and look for another unvisited floor square to start a new DFS.\n6. Continue until all floor squares have been visited.  \n\nOverall time complexity : $O(n*m)$"
        },
        "id": 191,
        "input_format": "<p>The first input line has two integers <i>n</i> and <i>m</i>: the height and width of the map.<br>Then there are <i>n</i> lines of <i>m</i> characters describing the map. Each character is either \u2018.\u2019 (floor) or '#' (wall).</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 512000,
        "note": "",
        "output_format": "Print one integer: the number of rooms.",
        "samples": [
            {
                "input": "5 8\n########\n#..#...#\n####.#.#\n#..#...#\n########",
                "output": "3"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Graphs",
            "Dfs",
            "company-Morgan Stanley"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Find the Number of Rooms",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}