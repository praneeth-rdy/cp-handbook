{
    "code": 200,
    "data": {
        "body": "Given an $n \\times m$ $board$ of characters and a list of strings $words$, output all words in the list $words$ that are present on the board in lexicographical order.\n\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10$\n$1 \\leq n,m \\leq 12$\n$1 \\leq words.size() \\leq 10^4$\n$1 \\leq words[i].size() \\leq 10$\n$board[i][j]$ is a lowercase English letter.\n$words[i]$ consists of lowercase English letters.\nAll the strings of words are unique.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nstruct trie {\n    struct node {\n        node* child[26];\n        bool wend, taken;\n        string word;\n        node() {\n            wend = false;\n            taken = false;\n            for (int i = 0; i < 26; i++)child[i] = nullptr;\n        }\n    };\n    node *root ;\n    trie() {\n        root = new node();\n    }\n    void insert(string s) {\n        node *cur = root;\n        for (auto c : s) {\n            int x = c - 'a';\n            if (cur->child[x] == nullptr)cur->child[x] = new node();\n            cur = cur->child[x];\n        }\n        cur->wend = true;\n        cur->word = s;\n    }\n    vector<string> ans; // can also use set to prevent duplicates.\n    int dx[4] = {0, 0, -1, +1};\n    int dy[4] = { -1, +1, 0, 0};\n    int n, m;\n    void dfs(vector<vector<char>> &grid, int i, int j, node* cur) {\n        if (cur == nullptr)return;\n        if (cur->wend && !cur->taken)ans.push_back(cur->word), cur->taken = true;\n        char v = grid[i][j];\n        grid[i][j] = 'X';\n        for (int k = 0; k < 4; k++) {\n            int x = i + dx[k], y = dy[k] + j;\n            if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] != 'X') {\n                char t = grid[x][y];\n                dfs(grid, x, y, cur->child[t - 'a']);\n            }\n        }\n        grid[i][j] = v; // backtracking visited.\n    }\n};\nvector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n    trie tr;\n    for (auto word : words)tr.insert(word);\n    tr.n = board.size(), tr.m = board[0].size();\n    for (int i = 0; i < tr.n; i++) {\n        for (int j = 0; j < tr.m; j++) {\n            tr.dfs(board, i, j, tr.root->child[board[i][j] - 'a']);\n        }\n    }\n    return tr.ans;\n}\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector < vector<char >> g(n, vector<char>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cin >> g[i][j];\n        }\n    }\n    int l;\n    cin >> l;\n    vector<string> v;\n    while (l--) {\n        string s;\n        cin >> s;\n        v.push_back(s);\n    }\n    auto x = findWords(g, v);\n    sort(x.begin(), x.end());\n    for (auto y : x)cout << y << endl;\n\n    cout << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:25:17.040691+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "**Idea:** The brute-force solution is to DFS all cells for every word in the dictionary. The time complexity will be $O(m * n * wl * l)$ where $m$ is $board.length$, $n$ is $board[0].length$, $l$ is $words.length$ and $wl$ is the average of length of words in $words'$.\n\nInstead, we use a Trie to check multiple words at the same time when DFS from a certain cell.\n\n**Complexity -** \n**Time:** $O(m * n * wl * l) = max(O(wl * l), O(m * n * l * wl))$ where\n$O(wl * l)$ - Build the trie\n$O(m * n * wl * l)$ - In the worst case where all words start with different characters, and there is a word starting with a character\nIn the cell $board[m - 1][n - 1]$, we have $O(m * n * wl * l)$. However, if there are words starting with the same characters and paths sharing\ncells, Trie can check multiple words when DFS from a certain cell, rather than check ONLY ONE word when DFS from a certain cell, like the brute-force solution.\n\n**Space:** $O(wl * l) = max(O(wl), O(wl * l))$ where\n$O(wl)$ - The recursive stack can grow at most to wl layers. \n$O(wl * l)$ - In the worst case when all words start with different characters, the trie has $wl*l$ nodes. Also, since each word is stored in a leaf node, all the leaf nodes require $wl * l$ memory."
        },
        "id": 992,
        "input_format": "First-line contains $T$ - the number of test cases.\nThe first line of each test case contains two integers $n$ and $m$.\nThe next $n$ lines of each test case contain $n \\times m$ board of characters.\nNext line contains $l$ - size of the list of strings $words$.\nThe next $l$ lines contain strings of the list $words$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output all words in the list $words$ that are present on the board in lexicographical order on a new line, and output a newline after every test case.",
        "samples": [
            {
                "input": "2\n5 5\na b c d e \nf g h i j\nk l m n o \np q r s t\nu v w x y\n6\nabcdej\nxyz\nkpu\ngmns\naaab\njoty\n4 4\no  a  a  n \ne  t  a  e \ni  h  k  r \ni  f  l  v \n4\noath\npea\neat  \nrain  \n",
                "output": "abcdej\njoty\nkpu\n\neat\noath\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-ShareChat"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Word Boggle",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}