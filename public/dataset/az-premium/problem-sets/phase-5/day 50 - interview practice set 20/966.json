{
    "code": 200,
    "data": {
        "body": "A city\u2019s skyline is made up from the outer contour of the city\u2019s silhouette. This silhouette can be seen when a city is viewed from a distance. \n\n<p>&nbsp;</p><figure class=\"image image_resized\" style=\"width:53%;\"><img src=\"https://algozenith.s3.ap-south-1.amazonaws.com/content/25-04-22/99_7b7290d5-9e2b-4752-a37f-fc78168ad6ca.png\"></figure>\n\nGiven the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n\nThe geometric information of each building is given in the array buildings where $buildings[i] = [l_i, r_i, h_i]$:\n-   $l_i$ is the x coordinate of the left edge of the $i^{th}$ building.\n-   $r_i$ is the x coordinate of the right edge of the $i^{th}$ building.\n-   $h_i$ is the height of the $i^{th}$ building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height $0$.\n\n\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form $[[x_1,y_1],[x_2,y_2],...]$. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate $0$ and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\n#### Note: \nThere must be no consecutive horizontal lines of equal height in the output skyline. For instance, [..., [2 3] , [4 5] , [7 5] , [11 5] , [12 7] ,... ] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [..., [2 3] , [4 5] , [12 7] , ...].",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10$\n$1 \\leq n \\leq 10^{4}$\n$0 \\leq l_i < r_i \\leq 10^{9}$\n$1 \\leq h_i \\leq 10^{6}$\n\n- Buildings in the input are sorted by $l_i$ in non-decreasing order for each test case.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nvector<vector<int>> Skyline(vector<vector<int>>& b) {\n    multiset<vector<int>> buff;\n    vector<vector<int>> ans;\n    int curmx = b[0][2], r = b[0][1], idx = 0;\n    ans.push_back({b[0][0], curmx});\n    vector<array<int, 3>> v;\n    for (int i = 0; i < b.size(); i++) {\n        v.push_back({b[i][0], -1, i});\n        v.push_back({b[i][1], 1, i});\n    }\n    sort(v.begin(), v.end());\n    for (auto x : v) {\n        if (x[1] == -1) {\n            int i = x[2];\n            buff.insert({b[i][2], i});\n            if (curmx == b[i][2]) {\n                if (b[i][1] > r)r = b[i][1], idx = i;\n            }\n            else if (curmx < b[i][2]) {\n                curmx = b[i][2];\n                r = b[i][1];\n                idx = i;\n                if (ans.back()[0] == b[i][0])ans.pop_back();\n                ans.push_back({b[i][0], curmx});\n            }\n        }\n        else {\n            int i = x[2];\n            buff.erase(buff.find({b[i][2], i}));\n            if (idx == i) {\n                if (buff.size()) {\n                    auto p = *buff.rbegin();\n                    if (p[0] != curmx) {\n                        if (ans.back()[0] == b[i][1])ans.pop_back();\n                        ans.push_back({b[i][1], p[0]});\n                    }\n                    curmx = p[0];\n                    idx = p[1];\n                    r = b[idx][1];\n                }\n                else {\n                    curmx = 0;\n                    if (ans.back()[0] == b[i][1])ans.pop_back();\n                    ans.push_back({b[i][1], curmx});\n                }\n            }\n        }\n    }\n    return ans;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<vector<int>> v(n, vector<int>(3));\n    for (int i = 0; i < n; i++) {\n        cin >> v[i][0] >> v[i][1] >> v[i][2];\n    }\n    auto ans = Skyline(v);\n\n    for (auto x : ans)cout << x[0] << \" \" << x[1] << endl;\n    cout << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:24:30.471052+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "The idea is to do a \"**line sweep**\" and just process the buildings only at the start and endpoints.\n\nThe key is to use a priority queue to save all the buildings that are still \"alive\". The queue is sorted by its height and end time (the larger height first and if equal height, the one with a bigger end time first). \n For each iteration, we first find the current process time, which is either the next new building start time or the end time of the top entry of the live queue. \n\nIf the new building's start time is larger than the top one end time, then process the one in the queue first (pop them until it is empty or find the first one that ends after the new building); Otherwise, if the new building starts before the top one ends, then process the new building (just put them in the queue). After processing, output it to the resulting vector if the height changes. \n\nComplexity is the worst-case $O(NlogN)$."
        },
        "id": 966,
        "input_format": "The first line contains $T$- the number of test cases.\nFirst line of each test case contains $n$ - the number of buildings.\nNext $n$ lines of each test case will contains $l_i$, $r_i$, $h_i$ of the $building_i$",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output the $[x_i , y_i ]$ coordinates of the skyline formed by these buildings collectively with increasing $x_i$ coordinate in a newline.\nAfter each test case, output a newline.",
        "samples": [
            {
                "input": "3\n5\n2 9 10\n3 7 15\n6 12 12\n13 16 10\n15 17 5\n2\n0 2 3\n2 5 3\n5\n4 9 10\n4 9 15\n4 9 12\n10 12 10\n10 12 8\n",
                "output": "2 10\n3 15\n7 12\n12 0\n13 10\n16 5\n17 0\n\n0 3\n5 0\n\n4 15\n9 0\n10 10\n12 0\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-AlgoZenith"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Skyline",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}