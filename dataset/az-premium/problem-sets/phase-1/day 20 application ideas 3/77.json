{
    "code": 200,
    "data": {
        "body": "You are given an array *A* of size *N* and a positive integer *K* ($\\leq N$). The elements of the array are $A_1, A_2, \\dots, A_N$.\n\nLet $B_i = \\max(A_i, A_{i+1}, \\dots, A_{i+K-1})$, for $1 \\leq i \\leq N - K + 1$.  \n\nFind $B_i$ values for all $i$ such that $1 \\leq i \\leq N - K + 1$.",
        "complete_approach": "",
        "constraints": "- $1 \\leq T \\leq 100,000$\n- $1 \\leq K \\leq N \\leq 100,000$\n- $-10^9 \\leq A_i \\leq 10^9$\n- Sum of $N$ over all test cases $\\leq 5 \\times 10^5$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nsigned main() {\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    int T;\n    cin >> T;\n    while (T--) {\n        int n, k;\n        cin >> n >> k;\n        int A[n];\n\n        for (int i = 0; i < n; i++)\n            cin >> A[i];\n\n        multiset<int> M;\n\n        for (int i = 0; i < k; i++)\n            M.insert(A[i]);\n\n        for (int i = 0; i <= n - k; i++) {\n            cout << *(M.rbegin()) << \" \";\n            M.erase(M.find(A[i]));\n            if(i + k < n) M.insert(A[i + k]);\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}",
                "language": "C++14"
            },
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nvoid add(deque<int> &d, int x) {\n    while(!d.empty() && d.back() < x)\n        d.pop_back();\n    d.push_back(x);\n    return;\n}\n\nvoid rem(deque<int> &d, int x) {\n    assert(!d.empty());\n    if(d.front() == x) d.pop_front();\n    return;\n}\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int T; cin >> T;\n    while(T--) {\n        int n, k; cin >> n >> k;\n        int A[n];\n\n        for(int i = 0; i < n; i++)\n            cin >> A[i];\n\n        deque<int> d;\n\n        for(int i = 0; i < k; i++)\n            add(d, A[i]);\n\n        for(int i = 0; i <= n - k; i++) {\n            cout << d.front() << \" \";\n            rem(d, A[i]);\n            if(i + k < n) add(d, A[i + k]);\n        }\n\n        cout << \"\\n\";\n    }\n    return 0;\n}",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:37:35.840411+00:00"
        },
        "hints": {
            "hint1": "<p>Solving with brute force in <i>O(N * K)</i> is easy, but it's not enough to pass within a time limit.<br>Observe that <i>B<sub>i</sub></i> and <i>B<sub>i+1</sub></i> differs by only two elements. <i>A<sub>i</sub></i> is present in <i>B<sub>i</sub></i> while <i>A<sub>i</sub></i> is absent in <i>B<sub>i+1</sub></i>.<br>Similarly for <i>A<sub>i+K</sub></i> is present in <i>B<sub>i+1</sub></i> and absent in <i>B<sub>i</sub></i>.</p>",
            "hint2": "<p>Maintain one multiset with a sliding window. <i>That's it!</i> <i>Can you do it in O(N)</i>? How about using a Double-ended queue?</p>",
            "solution_approach": "<p><strong>Solution 1:</strong><br><i>B<sub>i</sub> = max (A<sub>i</sub>, ..., A<sub>i+K-1</sub>)</i><br><i>B<sub>i+1</sub> = max (A<sub>i+1</sub>, ..., A<sub>i+K</sub>)</i><br>If we maintain a multiset <i>M</i> initialize with {<i>A<sub>i</sub>, ..., A<sub>K</sub></i>}.<br>For <i>B<sub>1</sub></i>, the answer is the max number present in the current multiset <i>M</i>.<br>For <i>B<sub>2</sub></i>, as mentioned in hints add remove <i>A<sub>1</sub></i> and add <i>A<sub>K+1</sub></i> in the multiset <i>M</i>, and now find the max number in the current multiset <i>M</i>.<br>Keep on doing this for all <i>B<sub>i</sub></i>s.<br><strong>Time complexity:</strong> <i>O(N*logK)</i><br><strong>Space complexity:</strong> <i>O(K) extra space</i></p><p><strong>Solution 2:</strong><br>Create a Deque, <i>Q</i> of capacity <i>K</i>, that stores only useful elements of the current window of <i>k</i> elements.<br>An element is useful if it is in the current window and is greater than all other elements on the left side of it in the current window.<br>Process all array elements one by one and maintain <i>Q</i> to contain useful elements of the current window and these useful elements are maintained in sorted order.<br>The element at front of the <i>Q</i> is the largest and element at the rear of <i>Q</i> is the smallest of the current window.<br><i><u>Algorithm:</u></i></p><ol><li>Create a deque to store <i>K</i> elements.</li><li>Run a loop and insert the first K elements in the deque. While inserting the element if the element at the back of the queue is smaller than the current element removes all those elements and then insert the element.</li><li>Now, run a loop from <i>K</i> to end of the array.</li><li>Print the front element of the array</li><li>Remove the element from the front of the queue if they are out of the current window.</li><li>Insert the next element in the deque. While inserting the element if the element at the back of the queue is smaller than the current element removes all those elements and then insert the element.</li><li>Print the maximum element of the last window.</li></ol><p><strong>Time complexity:</strong> <i>O(N)</i><br><strong>Space complexity:</strong> <i>O(K) extra space.</i></p>"
        },
        "id": 77,
        "input_format": "<p>The first line contains <i>T</i>, the number of test cases.&nbsp;<br>The first line of each test case contains <i>N</i>, the number of integers in an array <i>A</i> and <i>K</i>.<br>The second line of each test case contains <i>N</i> space-separated integers <i>A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub></i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p><i><strong>Explanation 1:</strong></i><br><i>B<sub>1</sub></i> = max(1, 2, 3) = 3<br><i>B<sub>2</sub></i> = max(2, 3, 1) = 3<br><i>B<sub>3</sub></i> = max(3, 1, 4) = 4<br><i>B<sub>4</sub></i> = max(1, 4, 5) = 5<br><i>B<sub>5</sub></i> = max(4, 5, 2) = 5<br><i>B<sub>6</sub></i> = max(5, 2, 3) = 5<br><i>B<sub>7</sub></i> = max(2, 3, 6) = 6</p><p><i><strong>Explanation 2:</strong></i><br><i>B<sub>1</sub></i> = max(1, -4, 3, -3, -9) = 3</p>",
        "output_format": "<p>For each test case, print array <i>B</i> as <i>B<sub>1</sub> B<sub>2</sub> ... B<sub>N-K+1</sub></i> in a new line.</p>",
        "samples": [
            {
                "input": "4\n9 3\n1 2 3 1 4 5 2 3 6\n5 5\n1 -4 3 -3 -9\n4 1\n-3 1 -8 3\n5 2\n-1 -1 -1 -1 -1",
                "output": "3 3 4 5 5 5 6\n3\n-3 1 -8 3\n-1 -1 -1 -1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Maximum in Window",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}