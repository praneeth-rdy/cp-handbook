{
    "code": 200,
    "data": {
        "body": "<p>You are given N strings. You are allowed to reverse the i-th string with a cost c[i]. You have to find the minimum cost needed to sort the strings in lexicographical order.</p><p>String <i>A</i> is lexicographically smaller than string <i>B</i> if it is shorter than <i>B</i> (|<i>A</i>|\u2009&lt;\u2009|<i>B</i>|) and is its prefix, or if none of them is a prefix of the other and at the first position where they differ character in <i>A</i> is smaller than the character in <i>B</i>.</p>",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 100$  \n\n$1 \\leq N \\leq 10^5$  \n\n$0 \\leq C_i \\leq 10^9$  \n\n$1 \\leq |S| \\leq 10^5$  \n\nIt is guaranteed that the total length of these strings doesn't exceed $10^6$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define int long long\n\nsigned main() {\n   IOS\n   int t;\n   cin >> t;\n   while(t--) {\n       int n;\n       cin >> n;\n       int c[n];\n       for (int i = 0; i < n; ++i) {\n           cin >> c[i];\n       }\n       string s[n];\n       string rev[n];\n       for (int i = 0; i < n; ++i) {\n           cin >> s[i];\n           rev[i] = s[i];\n           reverse(rev[i].begin(), rev[i].end());\n       }\n       int dp[n][2];\n       dp[0][0] = 0;\n       dp[0][1] = c[0];\n       for (int i = 1; i < n; ++i) {\n           dp[i][0] = dp[i][1] = 1e18;\n           if(s[i-1] <= s[i]){\n               dp[i][0] = min(dp[i][0], dp[i-1][0]);\n           }\n           if(rev[i-1] <= s[i]){\n               dp[i][0] = min(dp[i][0], dp[i-1][1]);\n           }\n           if(s[i-1] <= rev[i]){\n               dp[i][1] = min(dp[i][1], dp[i-1][0]+c[i]);\n           }\n           if(rev[i-1] <= rev[i]){\n               dp[i][1] = min(dp[i][1], dp[i-1][1]+c[i]);\n           }\n       }\n       int t = min(dp[n-1][0], dp[n-1][1]);\n       if (t == (int)1e18)\n           t = -1;\n       cout << t << \"\\n\";\n   }\n   return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:46:01.410280+00:00"
        },
        "hints": {
            "hint1": "We make a DP array, where $DP[i][j]$ is the minimum cost that should be spent to make first $i$ strings sorted in lexicographical order. The $i^{th}$ string will be reversed if $j = 1$.\n\n$\\therefore dp[i][0]$ means that the $i^{th}$ string is not reversed.  \n$\\therefore dp[i][1]$ means that the $i^{th}$ string is  reversed",
            "hint2": "We check if the previous string and the current string should be reversed to make the strings sorted, you can make all the 4 cases.",
            "solution_approach": "The 4 cases would be as follows : \n\nCase 1 : prev string <= current string\n$dp[i][0] = min(dp[i][0], dp[i - 1][0])$\n\nCase 2 : prev string reversed <= current string\n$dp[i][0] = min(dp[i][0], dp[i - 1][1])$\n\nCase 3 : prev string <= current string reversed\n$dp[i][1] = min(dp[i][1], dp[i - 1][0] + c[i])$\n\nCase 4 : prev string reversed <= current string reversed\n$dp[i][1] = min(dp[i][1], dp[i - 1][1] + c[i])$\n\nTime Complexity per test case: O(N)"
        },
        "id": 168,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\n\nThe first line of each test case contains one integer N.\n\nThe second line of each test case contains N space-separated integers - the cost.\n\nEach of the next N lines contains a string.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 512000,
        "note": "For the first test case, reverse the second string to get: [aca, daa, fba]\n\nFor the second test case, reverse the first and second strings to get: [cbp, ebc, qbf]\n\nFor the third test case, there is no way to make the strings in lexicographical order.",
        "output_format": "For each test case, print the minimum cost needed to sort the strings in lexicographical order. If it is impossible to sort the strings print -1.",
        "samples": [
            {
                "input": "3\n3\n2 6 7\naca\naad\nfba\n3\n5 1 1\npbc\ncbe\nqbf\n2\n4 5\nbaa\naaa",
                "output": "6\n6\n-1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Sort the strings",
        "video_editorial_id": 8158
    },
    "details": "Problem Details"
}