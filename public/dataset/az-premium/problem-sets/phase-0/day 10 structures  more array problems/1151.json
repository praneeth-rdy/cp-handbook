{
    "code": 200,
    "data": {
        "body": "Given a number $N$ and an array $A$ of $N$ numbers. Determine if the array is **lucky** or **not**.\n\n**Note:** The array is **lucky** if the **frequency** (number of occurrences) of the minimum element is odd.",
        "complete_approach": "",
        "constraints": "- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 3 \\times 10^5$\n- $-10^5 \\leq A_i \\leq 10^5$",
        "difficulty": 1,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n\n    while (t--)\n    {\n        int n;\n        cin >> n;\n\n        int arr[n];\n        for (int i = 0; i < n; i++)\n        {\n            cin >> arr[i];\n        }\n\n        int min_element = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++)\n        {\n            if (min_element >= arr[i])\n            {\n                if (min_element > arr[i]) freq = 0;\n                min_element = arr[i];\n                freq++;\n            }\n        }\n\n        if (freq % 2)\n        {\n            cout << \"Lucky\" << \"\\n\";\n        }\n        else\n        {\n            cout << \"Unlucky\" << \"\\n\";\n        }\n    }\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        int t = Integer.parseInt(br.readLine());\n\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            String[] arrStr = br.readLine().split(\" \");\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = Integer.parseInt(arrStr[i]);\n            }\n\n            int minElement = arr[0];\n            int freq = 1;\n            for (int i = 1; i < n; i++) {\n                if (minElement >= arr[i]) {\n                    if (minElement > arr[i]) freq = 0;\n                    minElement = arr[i];\n                    freq++;\n                }\n            }\n\n            if (freq % 2 == 1) {\n                out.println(\"Lucky\");\n            } else {\n                out.println(\"Unlucky\");\n            }\n        }\n\n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    idx = 0\n    t = int(data[idx])\n    idx += 1\n    for _ in range(t):\n        n = int(data[idx])\n        idx += 1\n        arr = [int(data[idx + i]) for i in range(n)]\n        idx += n\n\n        min_element = arr[0]\n        freq = 1\n        for i in range(1, n):\n            if min_element >= arr[i]:\n                if min_element > arr[i]:\n                    freq = 0\n                min_element = arr[i]\n                freq += 1\n\n        if freq % 2 == 1:\n            print(\"Lucky\")\n        else:\n            print(\"Unlucky\")\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:42:07.690507+00:00"
        },
        "hints": {
            "hint1": "Try finding the minimum element in the array. Find frequency of this element by counting its occurrences in the array.",
            "hint2": "Use a variable to store the minimum element by comparing its value with every element in the array. Take another variable to count the occurrences of this element. Loop through the array and increment this counter if element value matches the minimum element.",
            "solution_approach": "To solve this problem efficiently, we need to find the minimum element in the array and count its frequency.\n\n**Steps:**\n\n1. Initialize `min_element` with the first element of the array and set `frequency` to 1.\n\n2. Iterate through the array from the second element to the end:\n   - If the current element is less than `min_element`:\n     - Update `min_element` with the current element.\n     - Reset `frequency` to 1.\n   - Else if the current element is equal to `min_element`:\n     - Increment `frequency` by 1.\n\n3. After processing all elements, check if `frequency` is odd:\n   - If it is odd, print **\"Lucky\"**.\n   - Otherwise, print **\"Unlucky\"**.\n\n**Time Complexity per test case:** $O(N)$\n\n**Space Complexity per test case:** $O(1)$"
        },
        "id": 1151,
        "input_format": "- The first line contains an integer $T$, the number of test cases.\nFor each test case:\n- The first line contains an integer $N$, the number of elements in the array.\n- The second line contains $N$ space-separated integers denoting the elements of the array.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "### Sample Input 1:\n- The minimum element is $5$, and its frequency is $1$, which is odd. Therefore, the array is **Lucky**.\n### Sample Input 2:\n**First test case:**\n- The minimum element is $5$, and its frequency is $1$, which is odd. Therefore, the array is **Lucky**.\n**Second test case:**\n- The minimum element is $3$, and its frequency is $4$, which is even. Therefore, the array is **Unlucky**.",
        "output_format": "Print **\"Lucky\"** (without quotes) if the frequency of the **minimum element** is **odd**, otherwise print **\"Unlucky\"** (without quotes).",
        "samples": [
            {
                "input": "1\n5\n8 8 9 5 9",
                "output": "Lucky"
            },
            {
                "input": "2\n5\n8 8 9 5 9\n5\n3 3 3 5 3",
                "output": "Lucky\nUnlucky"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Implementation",
            "Arrays"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Lucky Array",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}