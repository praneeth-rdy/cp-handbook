{
    "code": 200,
    "data": {
        "body": "You are given **N** integers, the price of a given stock on each day. You can buy and sell any number of stocks. You cannot buy a stock before you sell the previous stock and you cannot sell a stock before you buy one. You have to find the maximum profit you can make by buying and selling stocks.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 T \u2264 100<br>1 \u2264 N \u2264 10<sup>5</sup><br>0 \u2264 Ai \u2264 10<sup>5</sup></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\nlong long BuyAndSellStock(vector<int> &a) \n{\n    int n = (int)a.size();\n    long long ans = 0;\n    for (int i = 1; i < n; ++i) {\n        ans += max(0, a[i] - a[i-1]);\n    }\n    return ans;\n}\n\nint main(){\n   IOS\n   \n   int t;\n   cin>>t;\n   \n   while(t--){\n       int n;\n       cin>>n;\n       \n       vector<int> a(n);\n\n       for (int i = 0; i < n; ++i) {\n           cin>>a[i];\n       }\n       \n       cout << BuyAndSellStock(a) << \"\\n\";\n   }\n\n   return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:14:54.912145+00:00"
        },
        "hints": {
            "hint1": "For each day, if the price of the stock one day before is smaller than the current price, we buy a stock one day before and sell it on the current day.",
            "hint2": "Suppose, the given stock prices are: 1 4 5. If you buy on day 1 and sell on day 3 or if you buy on day 1, sell on day 2 and again buy on day 2 and sell on day3, both will result in the same amount of profit. This is because: (day3) - (day1) = (day3) - (day2) + (day2) - (day1).",
            "solution_approach": "While traversing through the array, update the minimum price. If the current price is greater than the price a day before, update the profit. While calculating the profit in this way, we made sure that there was no better price to buy from the past\n\nFor stock prices that are strictly decreasing, you don\u2019t do any transaction.\n\nTime Complexity per test case: O(N)"
        },
        "id": 277,
        "input_format": "The first line of the input contains one integer **T** - the number of test cases. Then **T** test cases follow.\nThe first line of each test case contains one integer **N** - the length of the array. \nThe second line of each test case contains **N** space-separated integers.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For the first test case, you can buy stock on day 1 and sell on day 2 and again buy on day 3 and sell on day 4. Profit = (5-1) + (6-2) = 4+4 = 8\n\nFor the second test case, you can buy stock on day 1 and sell on day 4. Profit = 4-1 = 3\n\nFor the third test case, you don\u2019t buy and sell any stock. Profit = 0",
        "output_format": "For each test case, print the maximum profit you can make by buying and selling stocks.",
        "samples": [
            {
                "input": "3\n5\n1 5 2 6 3\n4\n1 2 3 4\n4\n5 3 2 1",
                "output": "8\n3\n0"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-AlgoZenith"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n</fix>\n\nlong long BuyAndSellStock(vector<int> &a) \n{\n    //Complete the function\n}\n\n<fix>\nint main(){\n   IOS\n   \n   int t;\n   cin>>t;\n   \n   while(t--){\n       int n;\n       cin>>n;\n       \n       vector<int> a(n);\n\n       for (int i = 0; i < n; ++i) {\n           cin>>a[i];\n       }\n       \n       cout << BuyAndSellStock(a) << \"\\n\";\n   }\n\n   return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 3.0,
        "title": "Buy and Sell Stock - 2",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}