{
    "code": 200,
    "data": {
        "body": "Given two numbers $N$ and $M$, a 2D array $A$ of size $N \\times M$ which contains `'x'` or `'.'` only and two numbers $X$, $Y$ which denote a cell position in $A$ such that $X$ is the row number and $Y$ is the column number.\n\nDetermine whether all neighbors of the given cell are `'x'` or not.\n\n**Note:** The neighbor cell is any cell that shares an **edge** or a **corner** and it should be **inside** the 2D array.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10$\n$1 \\leq N, M \\leq 100$\n$A[i] \\in \\{ x, . \\}$\n$1 \\leq X \\leq N$\n$1 \\leq Y \\leq M$",
        "difficulty": 1,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint valid(int x, int y, int n, int m)\n{\n    return x >= 0 && x < n && y >= 0 && y < m;\n}\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n\n    while (t--)\n    {\n        int n, m;\n        cin >> n >> m;\n\n        char arr[n][m];\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                cin >> arr[i][j];\n            }\n        }\n        bool sur = true;\n        int x, y;\n        cin >> x >> y;\n        x--;\n        y--;\n        int dx[8] = {1, -1, 0, 0, 1, 1, -1, -1};\n        int dy[8] = {0, 0, 1, -1, 1, -1, 1, -1};\n        for (int i = 0; i < 8; i++)\n        {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if (valid(nx, ny, n, m) && arr[nx][ny] == '.')\n            {\n                sur = false;\n                break;\n            }\n        }\n        if (sur)\n            cout << \"yes\" << endl;\n        else\n            cout << \"no\" << endl;\n    }\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static boolean valid(int x, int y, int n, int m) {\n        return x >= 0 && x < n && y >= 0 && y < m;\n    }\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        int t = Integer.parseInt(br.readLine());\n        for (int test = 0; test < t; test++) {\n            String[] nm = br.readLine().split(\" \");\n            int n = Integer.parseInt(nm[0]);\n            int m = Integer.parseInt(nm[1]);\n\n            char[][] arr = new char[n][m];\n            for (int i = 0; i < n; i++) {\n                String line = br.readLine();\n                for (int j = 0; j < m; j++) {\n                    arr[i][j] = line.charAt(j);\n                }\n            }\n\n            String[] xy = br.readLine().split(\" \");\n            int x = Integer.parseInt(xy[0]) - 1;\n            int y = Integer.parseInt(xy[1]) - 1;\n\n            boolean sur = true;\n            int[] dx = {1, -1, 0, 0, 1, 1, -1, -1};\n            int[] dy = {0, 0, 1, -1, 1, -1, 1, -1};\n            for (int i = 0; i < 8; i++) {\n                int nx = x + dx[i];\n                int ny = y + dy[i];\n                if (valid(nx, ny, n, m) && arr[nx][ny] == '.') {\n                    sur = false;\n                    break;\n                }\n            }\n            if (sur)\n                out.println(\"yes\");\n            else\n                out.println(\"no\");\n        }\n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\nfrom sys import stdin, stdout\n\ndef main():\n    data = stdin.read().split()\n    idx = 0\n    t = int(data[idx])\n    idx += 1\n    for _ in range(t):\n        n = int(data[idx])\n        idx += 1\n        m = int(data[idx])\n        idx += 1\n        arr = []\n        for _ in range(n):\n            line = data[idx]\n            idx += 1\n            arr.append(list(line))\n        x = int(data[idx]) - 1\n        idx += 1\n        y = int(data[idx]) - 1\n        idx += 1\n        sur = True\n        dx = [1, -1, 0, 0, 1, 1, -1, -1]\n        dy = [0, 0, 1, -1, 1, -1, 1, -1]\n        for i in range(8):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if 0 <= nx < n and 0 <= ny < m and arr[nx][ny] == '.':\n                sur = False\n                break\n        if sur:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:31:27.399011+00:00"
        },
        "hints": {
            "hint1": "Consider checking all neighboring cells around the given cell.",
            "hint2": "Iterate through all 8 possible directions (up, down, left, right, and the four diagonals) to check the state of each neighbor.",
            "solution_approach": "To determine whether all the neighbors of a given cell are `'x'`, we need to check each of its adjacent cells in all eight possible directions:\n\n- Up, Down, Left, Right, and the four Diagonals.\n\nFor each direction, calculate the new position $(nx, ny)$ by adding the direction offsets to the current cell's position $(x, y)$.\n\nBefore accessing a neighboring cell, ensure that it is within the bounds of the matrix to avoid index errors.\n\nIf any neighboring cell contains a `'.'`, we can conclude that not all neighbors are `'x'`, and we can output **\"no\"**.\n\nIf all valid neighboring cells contain `'x'`, we can conclude that all neighbors are `'x'`, and we output **\"yes\"**.\n\n**Time Complexity per test case:** Since there are only 8 possible neighbors to check and all operations are constant time, the time complexity per test case is $O(1)$.\n\n**Space Complexity per test case:** The space used is mainly for storing the matrix of size $N \\times M$, so the space complexity is $O(N \\times M)$."
        },
        "id": 1141,
        "input_format": "The first line contains $T$, the number of test cases.\nFor each test case:\nThe first line contains two space-separated integers $N$ and $M$.\n$N$ denotes number of rows, $M$ denotes number of columns.\nNext $N$ lines contain $M$ symbols.\nLast line contains two space-separated integers $X$ and $Y$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "In the first test case, the cell at position $(2, 2)$ (1-based indexing) is surrounded by `'x'` in all its adjacent cells.\nIn the second test case:\n- First test case: The cell at position $(2, 2)$ is surrounded by `'x'` in all its adjacent cells, so the output is \"yes\".\n- Second test case: The cell at position $(2, 2)$ has at least one neighbor which is `'.'`, so the output is \"no\".",
        "output_format": "Print **\"yes\"** if all neighbors of the given cell are `'x'` otherwise, print **\"no\"** without quotations.",
        "samples": [
            {
                "input": "1\n3 3\nxxx\nx.x\nxxx\n2 2",
                "output": "yes"
            },
            {
                "input": "2\n3 3\nxxx\nx.x\nxxx\n2 2\n3 3\nxxx\nxxx\nxx.\n2 2",
                "output": "yes\nno"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Implementation",
            "Arrays"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "8 Neighbors",
        "video_editorial_id": 10648
    },
    "details": "Problem Details"
}