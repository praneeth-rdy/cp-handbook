{
    "code": 200,
    "data": {
        "body": "Given an array $A$ of size $N$, you have to find the subset with the maximum sum such that the subset does not contain any adjacent elements.",
        "complete_approach": "",
        "constraints": "$1 \\leq N \\leq 10^5$\n$1 \\leq A[i] \\leq 10^9$",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```c++\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int n;\n    cin >> n;\n    ll a[n];\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    ll dp[n][2];\n    dp[0][0] = a[0], dp[0][1] = 0;\n    for (int i = 1; i < n; i++)\n    {\n        dp[i][0] = a[i] + dp[i - 1][1];\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]);\n    }\n    cout << max(dp[n - 1][0], dp[n - 1][1]) << '\\n';\n}\n```\n```",
                "language": "C++14"
            },
            {
                "code": "```java\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        int n = Integer.parseInt(br.readLine());\n        long[] a = new long[n];\n        String[] input = br.readLine().split(\" \");\n        for (int i = 0; i < n; i++)\n            a[i] = Long.parseLong(input[i]);\n        \n        long[][] dp = new long[n][2];\n        dp[0][0] = a[0];\n        dp[0][1] = 0;\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = a[i] + dp[i - 1][1];\n            dp[i][1] = Math.max(dp[i - 1][0], dp[i - 1][1]);\n        }\n        out.println(Math.max(dp[n - 1][0], dp[n - 1][1]));\n        \n        out.flush();\n        out.close();\n    }\n}\n```\n```",
                "language": "Java"
            },
            {
                "code": "```python\n```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    idx = 0\n    n = int(data[idx])\n    idx +=1\n    a = [int(data[idx + i]) for i in range(n)]\n    idx += n\n    dp = [[0,0] for _ in range(n)]\n    dp[0][0] = a[0]\n    dp[0][1] = 0\n    for i in range(1, n):\n        dp[i][0] = a[i] + dp[i - 1][1]\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    print(max(dp[n - 1][0], dp[n - 1][1]))\n    \n\nif __name__ == \"__main__\":\n    main()\n```\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:18:59.359354+00:00"
        },
        "hints": {
            "hint1": "Use dynamic programming. What will be the state?",
            "hint2": "For each index maintain two different sums - one for including the current element and one for excluding it. $dp(i, 0)$ \u2192 Maximum sum obtained from 0 to $i$ which includes $A[i]$. $dp(i, 1)$ \u2192 Maximum sum obtained from 0 to $i$ which doesn't include $A[i]$. Think of transition.",
            "solution_approach": "We maintain a `dp` array where we store the maximum sums including and excluding the current value.\n\nThe `dp` states are:\n\ndp[i][0] - is the maximum sum till the i-th index including A[i]\ndp[i][1] - is the maximum sum till the i-th index excluding A[i]\n\nFor a current index $i$, if we want to include $A[i]$, we have to exclude $A[i-1]$. If we exclude $A[i]$, we may or may not include $A[i-1]$.\n\nThe `dp` transitions can be:\n\ndp[i][0] = dp[i - 1][1] + A[i]\ndp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n\nTime Complexity per test case: $O(N)$\n\nSpace Complexity per test case: $O(N)$"
        },
        "id": 601,
        "input_format": "The first line contains a single integer $N$ - the size of the array $A$.\nThe second line contains $N$ integers - the elements of the array $A$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "In the first test case, you can choose the numbers [1, 3], so the maximum sum is $1 + 3 = 4$.\nIn the second test case, you can choose the numbers [100, 100], so the maximum sum is $100 + 100 = 200$.",
        "output_format": "Print the maximum sum possible.",
        "samples": [
            {
                "input": "3\n1 2 3",
                "output": "4"
            },
            {
                "input": "5\n100 50 60 100 20",
                "output": "200"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Dynamic Programming",
            "Arrays"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Non Consecutive Sum",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}