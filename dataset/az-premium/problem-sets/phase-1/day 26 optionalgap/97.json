{
    "code": 200,
    "data": {
        "body": "<p>You have given an array <i>A</i>. The diversity of the array <i>A</i> is defined as the number of pairs <i>i, j</i>, <i>i &lt; j</i> such that <i>A<sub>i</sub> \u2260 A<sub>j</sub></i>.<br>You want to maximize the diversity of the array. For that, you are allowed to make at most <i>K</i> operations on it, in any of which, you can select a particular element and change its value to any integer in the range 1 to 10<sup>9</sup>, both inclusive.<br>Find out the maximum diversity of the array that you can obtain.</p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>T</i> \u2264 20<br>0 \u2264 <i>K</i> \u2264 10<sup>9</sup><br>2 \u2264 <i>N</i> \u2264 10<sup>5</sup><br>1 \u2264 <i>A<sub>i</sub></i> \u2264 10<sup>9</sup></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int T; cin >> T;\n    while(T--) {\n        int n, k; cin >> n >> k;\n\n        map<int,int> M;\n\n        for(int i = 0; i < n; i++) {\n            int x; cin >> x;\n            M[x]++;\n        }\n\n        priority_queue<pair<int,int>> q;\n\n        ll ans = 1LL * n * (n - 1) / 2;\n\n        for(auto it : M) {\n            if(it.second > 1) {\n                q.push({it.second, it.first});\n                ans -= 1LL * it.second * (it.second - 1) / 2;\n            }\n        }\n\n        for(int i = 0; i < k; i++) {\n            if(q.empty()) break;\n            auto it = q.top();\n            q.pop();\n            ans += it.first - 1;\n            it.first--;\n            if(it.first > 1) q.push(it);\n        }\n\n        cout << ans << \"\\n\";\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:17:52.093351+00:00"
        },
        "hints": {
            "hint1": "<p>Try to think in a greedy way. Note that we can change any number to any number in between 1 to 10<sup>9</sup>. And the max size of the array is 10<sup>5</sup>.<br>That means in the best case, it's always possible to make all elements distinct (obviously when <i>K</i> is sufficiently large).</p>",
            "hint2": "<p>Let <i>cnt<sub>i</sub></i> denotes the number of occurrence of <i>i</i> in the array. In the current step, it's always better to change such <i>i</i> which has maximum <i>cnt<sub>i</sub></i> value.<br>Because it will add <i>cnt<sub>i</sub></i>-1 <strong>extra</strong> value in the current diversity.</p>",
            "solution_approach": "<p>Note that we can change any number to any number in between 1 to 10<sup>9</sup>. And the max size of the array is 10<sup>5</sup>.<br>That means in the best case, it's always possible to make all elements distinct (obviously when <i>K</i> is sufficiently large).<br><br>Let <i>cnt<sub>i</sub></i> denotes the number of occurrence of <i>i</i> in the array. In the current step, it's always better to change such <i>i</i> which has maximum <i>cnt<sub>i</sub></i> value.<br>Because it will add <i>cnt<sub>i</sub></i>-1 <strong>extra</strong> value in the current diversity.<br><br>Based on these observations we can design our algorithm using a <strong>priority queue</strong>.</p><ol><li>Enumerate <i>cnt<sub>i</sub></i> structure, where <i>cnt<sub>i</sub></i> denotes the count of occurrence of <i>i</i> in the array.</li><li>In the current step, change the value of number <i>i</i> such that <i>cnt<sub>i</sub></i> is maximum. Update <i>cnt<sub>i</sub></i>, i.e., <i>cnt<sub>i</sub>--</i>. Note that we have sufficiently large non-occurred numbers available because the max size of the array is 10<sup>5</sup>, and allowed-change varies from 1 to 10<sup>9</sup>.</li><li>Do step 2, for <i>K</i> times. To find max <i>cnt<sub>i</sub></i> value, maintain a <strong>priority queue</strong> structure with pairs {<i><strong>cnt<sub>i</sub>, i</strong></i>}. And arranged the priority queue structure with <i>cnt<sub>i</sub></i> values.</li><li><i>cnt<sub>i</sub></i> values can be maintained using <strong>Map</strong> in <i>STL C++.</i><br>&nbsp;</li></ol><p>See the solution code.<br><br><strong>Time complexity:</strong> <i>O(NlogN)</i><br><strong>Space complexity:</strong> <i>O(N) extra space</i></p>"
        },
        "id": 97,
        "input_format": "<p>The first line will contain <i>T</i>, number of test cases. Then the test cases follow.<br>The first line of each test case contains two integers <i>N</i>, <i>K</i>. where <i>N</i> denotes the length of array <i>A</i>.<br>The next line of each test case contains <i>N</i> space-separated integers, the <i>i</i>-th of which denotes <i>A<sub>i</sub></i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p><i><strong>Explanation 1:</strong></i><br>Every element in the array is different. The diversity is 6, which is the maximum possible.<br><br><i><strong>Explanation 2:</strong></i><br>Change the array to <i>A</i> = [1, 3, 2, 5]. Here we only need to change elements at 2nd and 4th positions. Now all elements are different.<br>The maximum diversity is 6.<br><br><i><strong>Explanation 3:</strong></i><br>Change the array to <i>A</i> = [5, 6, 2, 3, 4, 4]. Here we change the elements at positions 1 and 2. The maximum diversity is 14.</p>",
        "output_format": "<p>For each test case, output in a single line, the answer corresponding to the test case, which should be an integer denoting the maximum possible diversity.</p>",
        "samples": [
            {
                "input": "3\n3 10\n1 2 3\n4 2\n1 1 2 2\n6 2\n2 3 3 2 4 4",
                "output": "3\n6\n14"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Diversify the Array",
        "video_editorial_id": 8149
    },
    "details": "Problem Details"
}