{
    "code": 200,
    "data": {
        "body": "Android mobile unlock pattern is a grid of $(3 \\times 3)$ cells, where drawing a specific pattern connecting a specific sequence of cells in order will unlock the android mobile.\n\nGiven a number \\(n\\), your task is to find the number of android unlock patterns connecting exactly \\(n\\) cells.\n\n##### Rules of a valid pattern:\n1. Each pattern must connect exactly \\(n\\) cells.\n2. All the cells must be distinct.\n3. If the line connecting two consecutive cells in the pattern passes through any other cells, the other cells must have previously been selected in the pattern. No jumps through the non-selected cell are allowed.\n4. The order of cells used matters.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>n</i> \u2264 9</p>",
        "difficulty": 5,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nbool visited[10];\nint skip[10][10];\n\nint brute_force(int cur, int remLen) {\n    // base case : if remaining length done, then return 1 as 1 sequence found.\n    if(!remLen) return 1;\n    // Mark this cell visited.\n    visited[cur] = true;\n    int ans = 0;\n    // Try to take next cell as i\n    for(int i = 1; i <= 9; i++) {\n    \t// If i is not already taken && either their is no cell to skip or the cell to skip is already selected.\n        if(!visited[i] && (!skip[cur][i] || visited[skip[cur][i]])) {\n            // try that option.\n            ans += brute_force(i, remLen - 1);\n        }\n    }\n    // revert the changes done.\n    visited[cur] = false;\n    return ans;\n}\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    memset(visited, false, sizeof(visited));\n    memset(skip, 0, sizeof(skip));\n    \n    // We are numbering\n    // 1 2 3\n    // 4 5 6\n    // 7 8 9\n\n    // These save the connection that skips a point.\n    skip[1][3] = skip[3][1] = 2;\n    // to join 1 and 3, 2 needs to be pre-selected, or its invalid move.\n    skip[1][7] = skip[7][1] = 4;\n    skip[3][9] = skip[9][3] = 6;\n    skip[7][9] = skip[9][7] = 8;\n    skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5;\n    // This you will have to create manually.\n\n    int n;\n    cin >> n;\n\n    int ans = 0;\n    ans += brute_force(1, n - 1) * 4;   \n    //Symmetry as starting from 1 3 7 9 all will be similar\n    ans += brute_force(2, n - 1) * 4;   \n    //Symmetry as starting from 2 4 6 8 all will be similar\n    ans += brute_force(5, n - 1);\n\n    cout << ans << \"\\n\";\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:41:59.144276+00:00"
        },
        "hints": {
            "hint1": "<p>Numbered the cells as</p><figure class=\"table\"><table><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table></figure>",
            "hint2": "<p>Lets try out some examples.</p><ol><li>6 - 5 - 4 - 1 - 9 - 2: It's a valid move.</li><li>4 - 1 - 9 - 2 : It's a invalid move, because line 1 - 9 passes through key 5 which had not been selected in the pattern.&nbsp;</li><li>4 - 1 - 3 - 6 : It's a invalid move, because line 1 - 3 passes through key 2 which had not been selected in the pattern.</li></ol><p>Can you observe some pattern?</p>",
            "solution_approach": "<p>We use DFS to count the number of valid paths from the current number (1\u20139)to the remaining numbers. To optimize, calling DFS less than 9 times, we can use the symmetry of the 3 by 3 matrix. If we start from 1 or 3 or 7 or 9, the valid paths number should be the same. If we start from 2 or 4 or 6 or 8, the valid paths number are also the same. Start from 5 is the third case.</p><p>One of the invalid cases can be if you want to move your finger from 1 to 3, without selecting 2, that's not possible. Can you try it on your own Android phone?</p><p>We need to create a matrix to keep a record of unselected numbers on the path between two keys.</p><p>Now in DFS, we keep trying to find the next valid cell. What is a valid candidate? We need to make sure if the next cell hasn\u2019t been visited, and either it\u2019s adjacent to the current cell, or it\u2019s the cell in between (recorded as the unselected number on the path)but has been visited.</p>"
        },
        "id": 486,
        "input_format": "<p>The only line of input contains a single integer <i>n</i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>Print answer on a new line.</p>",
        "samples": [
            {
                "input": "1",
                "output": "9"
            },
            {
                "input": "2",
                "output": "56"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Recursion"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Android Unlock Pattern",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}