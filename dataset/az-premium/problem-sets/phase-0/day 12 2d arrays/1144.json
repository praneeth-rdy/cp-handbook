{
    "code": 200,
    "data": {
        "body": "Given a number $N$ and a $2D$ array $A$ of size $N \\times N$. Print the **absolute difference** between the **summation** of its two diagonals (**primary diagonal and secondary diagonal**).",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 100$\n$-100 \\leq A[i] \\leq 100$",
        "difficulty": 1,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n\n    while (t--)\n    {\n        int n;\n        cin >> n;\n\n        int arr[n][n];\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                cin >> arr[i][j];\n            }\n        }\n\n        int s1 = 0, s2 = 0;\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                if (i == j)\n                {\n                    s1 += arr[i][j];\n                }\n                if (i == n - j - 1)\n                {\n                    s2 += arr[i][j];\n                }\n            }\n        }\n\n        cout << abs(s1 - s2) << \"\\n\";\n    }\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int t = Integer.parseInt(br.readLine());\n\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n\n            int[][] arr = new int[n][n];\n            for (int i = 0; i < n; i++) {\n                String[] tokens = br.readLine().split(\"\\\\s+\");\n                for (int j = 0; j < n; j++) {\n                    arr[i][j] = Integer.parseInt(tokens[j]);\n                }\n            }\n\n            int s1 = 0, s2 = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (i == j) {\n                        s1 += arr[i][j];\n                    }\n                    if (i == n - j - 1) {\n                        s2 += arr[i][j];\n                    }\n                }\n            }\n\n            out.println(Math.abs(s1 - s2));\n        }\n\n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\nfrom sys import stdin, stdout\n\ndef main():\n    data = stdin.read().split()\n    idx = 0\n    t = int(data[idx])\n    idx += 1\n    for _ in range(t):\n        n = int(data[idx])\n        idx += 1\n        arr = []\n        for i in range(n):\n            row = []\n            for j in range(n):\n                row.append(int(data[idx]))\n                idx += 1\n            arr.append(row)\n        s1 = 0\n        s2 = 0\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    s1 += arr[i][j]\n                if i == n - j - 1:\n                    s2 += arr[i][j]\n        stdout.write(str(abs(s1 - s2)) + '\\n')\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:31:35.300376+00:00"
        },
        "hints": {
            "hint1": "How will you obtain the diagonal elements of the matrix?",
            "hint2": "For the primary diagonal, row index is equal to column index.\n\nFor the secondary diagonal, row index is equal to $N - 1 -$ column index.",
            "solution_approach": "To solve this problem, we need to compute the sums of the primary and secondary diagonals of the matrix and then find their absolute difference.\n\n**Primary Diagonal**:\n\n- The elements are at positions where the row index $i$ equals the column index $j$.\n\n**Secondary Diagonal**:\n\n- The elements are at positions where the row index $i$ equals $N - 1 - j$.\n\n**Steps**:\n\n1. Iterate over the matrix:\n\n   - For each position $(i, j)$:\n\n     - If $i == j$, add $A[i][j]$ to the primary diagonal sum.\n\n     - If $i == N - 1 - j$, add $A[i][j]$ to the secondary diagonal sum.\n\n2. Compute the absolute difference between the two sums.\n\n**Time Complexity per test case**: $O(N^2)$\n\n**Space Complexity per test case**: $O(N^2)$"
        },
        "id": 1144,
        "input_format": "The first line contains $T$, the number of test cases.\nFor each test case:\n- The first line contains an integer $N$.\n- Next $N$ lines contain $N$ space-separated integers each, denoting the elements of the array $A$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "First, compute the sum of the primary diagonal elements:\n- Positions $(1,1), (2,2), (3,3), (4,4)$\n- Sum: $1 + (-4) + 5 + (-6) = -4$\nThen, compute the sum of the secondary diagonal elements:\n- Positions $(1,4), (2,3), (3,2), (4,1)$\n- Sum: $1 + 6 + 8 + 3 = 18$\nFinally, compute the absolute difference:\n- $| -4 - 18 | = | -22 | = 22$",
        "output_format": "For each test case, print the **absolute difference** between the **summation** of the matrix's main diagonals.",
        "samples": [
            {
                "input": "1\n4\n1 5 12 1\n2 -4 6 7\n3 8 5 9\n3 5 23 -6",
                "output": "22"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Implementation",
            "Arrays"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Matrix",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}