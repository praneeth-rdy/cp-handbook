{
    "code": 200,
    "data": {
        "body": "<p>You have given an array of length <i>N</i>, and a number <i>X</i>. Find the number of subsets with the sum of elements less than equal to <i>X</i>.</p><p><i>Note:</i></p><ol><li>The sum of elements in an empty subset is 0.</li><li>The set may contain duplicates elements.</li></ol>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>T</i> \u2264 5<br>1 \u2264 <i>N</i> \u2264 35<br>0 \u2264 <i>A<sub>i</sub></i> \u2264 10<sup>4</sup><br>0 \u2264 <i>X</i> \u2264 10<sup>6</sup></p>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n\nsigned main() \n{\n    ios::sync_with_stdio(0); \n    cin.tie(0); cout.tie(0);   \n    \n    int T; cin >> T;\n    while(T--) {\n        int n, x; \n        cin >> n >> x;\n        \n        vector<int> aL, aR;\n        for(int i = 0; i < n / 2; i++) {\n            int x; cin >> x;\n            aL.push_back(x);\n        }\n        for(int i = n / 2; i < n; i++) {\n            int x; cin >> x;\n            aR.push_back(x);\n        }\n\n        vector<int> left, right;\n\n        int m = (int)aL.size();\n        for(int i = 0; i < (1 << m); i++) {\n            int sum = 0;\n            for(int j = 0; j < m; j++) {\n                if((i >> j) & 1) {\n                    sum += aL[j];\n                }\n            }\n            left.push_back(sum);\n        }\n        \n        m = (int)aR.size();\n        for(int i = 0; i < (1 << m); i++) {\n            int sum = 0;\n            for(int j = 0; j < m; j++) {\n                if((i >> j) & 1) {\n                    sum += aR[j];\n                }\n            }\n            right.push_back(sum);\n        }\n\n        sort(left.begin(), left.end());\n        sort(right.begin(), right.end());\n\n        ll ans = 0;\n\n        int ptr = (int)right.size() - 1;\n        for(int u : left) {\n            if(u > x) break;\n            while(ptr >= 0 && right[ptr] + u > x) {\n                ptr--;\n            }\n            ans += ptr + 1;\n        }\n\n        cout << ans << \"\\n\";\n    }\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:34:56.290960+00:00"
        },
        "hints": {
            "hint1": "<p>You can generate all subsets with the time complexity of 2<i><sup>N</sup></i>. But it's not enough to pass the limits.</p>",
            "hint2": "<p>Divide the array into two parts, one is of size <i>N / 2</i> and the other is of size <i>N - N / 2</i>.</p>",
            "solution_approach": "<p>Brute force won't pass the limits. So we have to apply to optimize brute force techniques.</p><p>Divide the array into two parts of size <i>N / 2</i> each. Generate all subset sums for each part with complexity <i>O(2<sup>N/2</sup>)</i>. Observe that generating <i>2<sup>N/2</sup></i> subsets are within the limits (2<sup>35/2</sup> ~ 10<sup>5</sup>).</p><p>Sort all subset sums for each part. Now iterate over the first half, for each subset-sum <i>S<sub>i</sub></i> in the first half we have to find the number of subsets in the second half with sum \u2264<i> X - S<sub>i</sub></i>. You can find it using different techniques like binary search, or two pointers.</p><p>This trick is called <strong>meet-in-the-middle</strong>. This trick will be discussed in more detail in the session.</p><p><strong>Time Complexity:</strong> <i>O(N 2<sup>N/2</sup>)</i><br><strong>Space Complexity:</strong> <i>O(2<sup>N/2</sup>)</i></p>"
        },
        "id": 141,
        "input_format": "<p>The first line of input contains <i>T</i> - the number of test cases.<br>The first line of each test case contains two space-separated numbers <i>N</i> and <i>X</i>.<br>The second line of each test case contains <i>N</i> space-separated integers <i>A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub></i>. &nbsp;</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p><i><strong>Explanation 1:</strong></i><br>The subsets are {}, {1}, {2}, {1, 2}. The number of subsets with sum \u2264 1 is 2.</p><p><i><strong>Explanation 2:</strong></i><br>The subsets are {}, {2}, {2}, {6}, {2, 2}, {2, 6}, {2, 6}, {2, 2, 6} The number of subsets with sum \u2264 8 is 7.</p>",
        "output_format": "<p>Print the number of subsets with a sum less than equal to <i>X</i> in a new line for each test case.</p>",
        "samples": [
            {
                "input": "2\n2 1\n1 2\n3 8\n2 2 6",
                "output": "2\n7"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Recursion",
            "Binary Search",
            "Meet In The Middle"
        ],
        "template_code": [],
        "time_limit_sec": 3.0,
        "title": "Target Subsets",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}