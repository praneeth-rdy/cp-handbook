{
    "code": 200,
    "data": {
        "body": "Find the Inorder Successor in BBST.\n\n*BBST - Balanced Binary Search Tree (height of BST is around $O(logN))$, where $N$ is the number of nodes in the tree.*\n\nIn Binary Tree, the Inorder successor of a node is the next node in the Inorder traversal of the Binary Tree. Inorder Successor is *NULL* for the last node in Inorder traversal. \n\nIn Binary Search Tree, the Inorder Successor of an input node can also be defined as the node with the smallest key greater than the key of the input node. So, finding the next node in sorted order is sometimes important.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10^5$\nSum of $N$ across all test cases $\\leq 10^7$.",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node\n{\n    int val;\n    Node *left, *right;\n    Node(int x) : val(x), left(NULL), right(NULL) {}\n};\n\n\nint successor(Node* curr, int k)\n{\n    if(curr==NULL)\n        return INT_MAX;\n    if(curr->val<=k)\n    {\n        return successor(curr->right,k);\n    }\n    return min(successor(curr->left,k),curr->val);\n}\n\nint getInorderSuccessor(Node* node, int k)\n{\n    int val = successor(node,k);\n    if(val==INT_MAX)\n        return -1;\n    return val;\n}\n\n\nNode *getBinaryTree(vector<int> &num, int *ind)\n{\n    if (num[*ind] == -1)\n        return NULL;\n    Node *node = new Node(num[*ind]);\n    (*ind)++;\n    node->left = getBinaryTree(num, ind);\n    (*ind)++;\n    node->right = getBinaryTree(num, ind);\n    return node;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while (t--)\n    {\n        int n, q;\n        cin >> n >> q;\n        assert(n <= 1000000);\n        vector<int> arr(n);\n        for (int i = 0; i < n; i++)\n        {\n            cin >> arr[i];\n        }\n        int ind = 0;\n        Node *tree = getBinaryTree(arr, &ind);\n        for (int i = 0; i < q; i++)\n        {\n            int k;\n            cin >> k;\n            cout << getInorderSuccessor(tree, k) << \" \";\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Solution Approach is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:36:11.549917+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": ""
        },
        "id": 673,
        "input_format": "The first line contains an integer $T$, the number of test cases.\nThe first line of each test case contains an integer $N$, $Q$ - the length of the array representing the serialized representation of a tree, and the number of queries.\nThe next line contains $N$-space-separated distinct integers. \nThe next line contains $Q$-space-separated integers. \n\nThe input is given as a serialized representation of a tree.\n\nThe following function parses the input:\n**Node* getBinaryTree(vector<int> &num, int*ind)**",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each query, print the inorder successor. If inorder successor does not exist, return $-1$.",
        "samples": [
            {
                "input": "1\n15 7\n333 218 71 -1 -1 323 -1 -1 657 545 -1 -1 715 -1 -1 \n813 58 148 224 851 594 880\n",
                "output": "-1 71 218 323 -1 657 -1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Binary Tree",
            "Binary Search Tree",
            "company-Samsung"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node\n{\n    int val;\n    Node *left, *right;\n    Node(int x) : val(x), left(NULL), right(NULL) {}\n};\n</fix>\n\n\nint getInorderSuccessor(Node *node, int k)\n{\n    // Complete the function\n}\n\n<fix>\nNode *getBinaryTree(vector<int> &num, int *ind)\n{\n    if (num[*ind] == -1)\n        return NULL;\n    Node *node = new Node(num[*ind]);\n    (*ind)++;\n    node->left = getBinaryTree(num, ind);\n    (*ind)++;\n    node->right = getBinaryTree(num, ind);\n    return node;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while (t--)\n    {\n        int n, q;\n        cin >> n >> q;\n        assert(n <= 1000000);\n        vector<int> arr(n);\n        for (int i = 0; i < n; i++)\n        {\n            cin >> arr[i];\n        }\n        int ind = 0;\n        Node *tree = getBinaryTree(arr, &ind);\n        for (int i = 0; i < q; i++)\n        {\n            int k;\n            cin >> k;\n            cout << getInorderSuccessor(tree, k) << \" \";\n        }\n        cout << \"\\n\";\n    }\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Inorder Successor in BST",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}