{
    "code": 200,
    "data": {
        "body": "Given a permutation $A$ of $n$ integers $1, 2, ... n$, you want to get a permutation $B$.\n\nYou are given some $m$ good pairs given in a form of 2D matrix $C$ of size $m \\times 2$  where $(C[i][0], C[i][1])$ denotes that two indexes of the permutation $A$.\n\nIn one operation he can swap $A_x$ and $A_y$ only if $(x, y)$ is a good pair.\n\nYou have to tell whether you can obtain permutation $B$ by performing the above operation any number of times on permutation $A$.\n\nIf the permutation $B$ can be obtained, output *\"Yes\"* else output *\"No\"*.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10^4$\n$2 \\leq n \\leq  10^5$\n$1 \\leq m \\leq n*(n-1)/2 \\leq  10^5$\n$1 \\leq A[i], B[i] \\leq n$\n$A[i]$ and $B[i]$ are all distinct.\n$1 \\leq C[i][0] , C[i][1] \\leq n$\nSum of $n$ over all test cases is $\\leq 10^5$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nint n, cc;\nvector<vector<int>> adj;\nvector<int> vis, comp;\nvoid dfs(int v) {\n\tvis[v] = true;\n\tcomp[v] = cc;\n\tfor (auto x : adj[v]) {\n\t\tif (!vis[x])dfs(x);\n\t}\n}\nint permutation(vector<int> &A, vector<int> &B, vector<vector<int> > &C) {\n\tn = A.size();\n\tvis.assign(n + 1, false);\n\tcomp.assign(n + 1, -1);\n\tadj.assign(n + 1, vector<int>());\n\tfor (auto x : C) {\n\t\tadj[x[0] - 1].push_back(x[1] - 1);\n\t\tadj[x[1] - 1].push_back(x[0] - 1);\n\t}\n\tcc = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (!vis[i]) {\n\t\t\tcc++;\n\t\t\tdfs(i);\n\t\t}\n\t}\n\tmap<int, int> m;\n\tfor (int i = 0; i < n; i++)m[A[i]] = i;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (comp[i] != comp[m[B[i]]])return 0;\n\t}\n\treturn 1;\n}\nvoid solve() {\n\tint m;\n\tcin >> n >> m;\n\tvector<vector<int>> c(m, vector<int>(2));\n\tfor (int i = 0; i < m; i++) {\n\t\tcin >> c[i][0] >> c[i][1];\n\t}\n\tvector<int> a(n), b(n);\n\tfor (int i = 0; i < n; i++)cin >> a[i];\n\tfor (int i = 0; i < n; i++)cin >> b[i];\n\tint ans = permutation(a, b, c);\n\tif (ans)cout << \"Yes\" << endl;\n\telse cout << \"No\" << endl;\n}\nint main() {\n\tios_base :: sync_with_stdio(0);\n\tcin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n\tfreopen(\"input.txt\", \"r\", stdin); \\\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint t = 1;\n\t// int i = 1;\n\tcin >> t;\n\twhile (t--) {\n\t\t// cout << \"Case #\" << i << \": \";\n\t\tsolve();\n\t\t// i++;\n\t}\n\treturn 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:46:51.377048+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Let's consider indices as vertices of some graph and allowed pairs as 2-ways edges. Then our graph can be divided into connected components.\n\nThe key observation: we can get any permutation of elements in one connected component. And obviously, there is no way to swap elements that belong to different components. Thus we get a simple solution:\n\nFind connected components in our graph.\nFor each component compare elements in permutations A and B. If these elements differ for at least one component then the answer is \"No\" otherwise answer is \"Yes\".\n\nTime Complexity : $O(n+m)$ per test case."
        },
        "id": 995,
        "input_format": "First line contains $T$ - the number of test cases.\nFirst line of each test case contains $n$ and $m$.\nNext $m$ lines contains $C[i][0]$ and $C[i][1]$.\nNext line contains $n$ elements of permutation $A$.\nNext line contains $n$ elements of permutation $B$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "If the permutation $B$ can be obtained, output *\"Yes\"* else output *\"No\"*.",
        "samples": [
            {
                "input": "3\n4 1\n2 4\n1 3 2 4\n1 4 2 3\n4 1\n3 4\n1 3 2 4\n1 4 2 3\n2 1\n1 2\n1 2\n1 2\n",
                "output": "Yes\nNo\nYes\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-AlgoZenith"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Swaps and Permutation",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}