{
    "code": 200,
    "data": {
        "body": "Given two integers $a$ and $b$, return the sum of the two integers without using the operators $+$ and $-$.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 2 \\times 10^{6} $\n$-1000 \\leq a,b \\leq 1000 $",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nint Sum(int a, int b) {\n    while (b) {\n        unsigned int c = (a & b); // carry.\n        a ^= b;\n        b = (c << 1);\n    }\n    return a;\n}\n\nvoid solve() {\n    int a, b;\n    cin >> a >> b;\n    cout << Sum(a, b) << endl;\n    assert(a + b == Sum(a, b));\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:23:34.942677+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Eg: Let's try this with our hand 3 + 2 = 5 , the carry will be with in the brackets i.e \"()\"\n\n3 => 011 \n2=>  010\n     ____\n     1(1)01\nHere we will forward the carry at the second bit to get the result.\nSo which bitwise operator can do this ? A simple observation says that XOR can do that,but it just falls short in dealing with the carry properly, but correctly adds when there is no need to deal with carry.\nFor Eg:\n\n1   =>  001 \n2   =>  010 \n1^2 =>  011 (2+1 = 3) \nSo now when we have carry, to deal with, we can see the result as :\n\n3  => 011 \n2  => 010 \n3^2=> 001  \n\nHere we can see XOR just fell short with the carry generated at the second bit.\nSo how can we find the carry ? The carry is generated when both the bits are set, i.e (1,1) will generate carry but (0,1 or 1,0 or 0,0) won't generate a carry, so which bitwise operator can do that ? AND gate ofcourse.\n\nTo find the carry we can do\n\n3    =>  011 \n2    =>  010 \n3&2  =>  010\nnow we need to add it to the previous value we generated i.e ( 3 ^ 2), but the carry should be added to the left bit of the one which generated it.\nso we left shift it by one so that it gets added at the right spot.\n\nHence (3&2)<<1 => 100\nso we can now do\n\n3 ^2        =>  001 \n(3&2)<<1    =>  100 \n\nNow xor them, which will give 101(5) , we can continue this until the carry becomes zero.\n\nRefer to the editorial code for the implementation."
        },
        "id": 926,
        "input_format": "First-line contains $T$ - the number of test cases.\nThe first line of each test case contains two integers $a$ and $b$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case in a newline, output the sum of $a$ and $b$.",
        "samples": [
            {
                "input": "2\n2 1\n-1 1\n",
                "output": "3\n0\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 3.0,
        "title": "Tricky Sum",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}