{
    "code": 200,
    "data": {
        "body": "Given an $n \\times m$ $matrix$, Output a new matrix $answer$ where $answer[i][j]$ is the *rank* of $matrix[i][j]$.\n\nThe *rank* is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:\n\n1. The *rank* is a positive integer.\n2. If two elements $p$ and $q$ are in the same row or column, then: \n2.1 If $p < q$ then $rank(p) < rank(q)$.\n2.2 If $p == q$ then $rank(p) == rank(q)$.\n2.3 If $p > q$ then $rank(p) > rank(q)$.\n3. The *rank* should be as small as possible.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 100$\n$1 \\leq n, m \\leq 200$\n$-10^9 \\leq matrix[i][j] \\leq 10^9$\nThe Sum of $n \\times m$ over all test cases is $\\leq 10^6$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nvector<int> value;\nstruct DSU {\n\tunordered_map<int, int> parent;\n\tint Find(int u) {\n\t\tif (parent.count(u) == 0)parent[u] = -1; // using this make DSU at every step faster.\n\t\tif (parent[u] < 0)return u;\n\t\tparent[u] = Find(parent[u]);\n\t\treturn parent[u];\n\t}\n\tvoid Union(int u, int v) {\n\t\tu = Find(u);\n\t\tv = Find(v);\n\t\tif (u != v) {\n\t\t\tif (-parent[u] < -parent[v]) swap(u, v);\n\t\t\tparent[u] += parent[v];\n\t\t\tparent[v] = u;\n\t\t\tvalue[u] = max(value[u], value[v]);\n\t\t}\n\t}\n};\nvector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {\n\tmap<int, vector<vector<int>>> m;\n\tint r = matrix.size(), c = matrix[0].size();\n\tfor (int i = 0; i < r; i++) {\n\t\tfor (int j = 0; j < c; j++)m[matrix[i][j]].push_back({i, j});\n\t}\n\tvalue.assign(r + c, 0);\n\tvector<vector<int>> ans(r, vector<int>(c));\n\tfor (auto x : m) {\n\t\tDSU u;\n\t\tfor (auto y : x.second)u.Union(y[0], y[1] + r);\n\t\tfor (auto y : x.second) {\n\t\t\tans[y[0]][y[1]] = value[u.Find(y[0])] + 1;\n\t\t}\n\t\tfor (auto y : x.second) {\n\t\t\tvalue[y[0]] = max(value[y[0]], ans[y[0]][y[1]]);\n\t\t\tvalue[y[1] + r] = max(value[y[1] + r], ans[y[0]][y[1]]);\n\t\t}\n\t}\n\treturn ans;\n}\nvoid solve() {\n\tint n, m;\n\tcin >> n >> m;\n\tvector<vector<int>> mat(n, vector<int>(m));\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < m; j++)cin >> mat[i][j];\n\t}\n\tauto ans = matrixRankTransform(mat);\n\tfor (auto x : ans) {\n\t\tfor (auto y : x)cout << y << \" \";\n\t\tcout << endl;\n\t}\n\tcout << endl;\n}\nint main() {\n\tios_base :: sync_with_stdio(0);\n\tcin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n\tfreopen(\"input.txt\", \"r\", stdin); \\\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint t = 1;\n\t// int i = 1;\n\tcin >> t;\n\twhile (t--) {\n\t\t// cout << \"Case #\" << i << \": \";\n\t\tsolve();\n\t\t// i++;\n\t}\n\treturn 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:36:30.109098+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Let's build the rank based on values of elements in the matrix, starting from the smallest value.\nSo let group elements by their values, then sort in increasing order by their values.\n\n**Observation 1:** For cells with the same value, if there is a common in rows or columns then they must have the same rank, we need to group them together. We can use the UnionFind structure to group them together.\n\n**Observation 2:** The rank of elements in each group must be the maximum rank (plus one) of all included rows and columns.\nThus, we will find the maximum rank of all included rows and columns, then plus one.\n- Plus one because the rank is increasing, update all elements in the same group to a new rank.\n\n**Complexity**\n\nTime: $O(m*n*log(m*n))$, where $n \\leq 200$ is number of rows, $m \\leq 200$ is number of columns in the $matrix$.\n\nSpace: $O(m*n)$."
        },
        "id": 998,
        "input_format": "First line contains $T$ - the number of test cases.\nFirst line of each test case contains $n$ and $m$.\nNext $n$ lines of each test case contains $n \\times m$ $matrix$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, Output a new matrix $answer$ where $answer[i][j]$ is the *rank* of $matrix[i][j]$.\nAlso, Output a new line after every test case.",
        "samples": [
            {
                "input": "4\n\n4 4\n4 4 4 4 \n4 4 4 4\n4 4 4 4\n4 4 4 4\n\n2 2\n1 2\n3 4\n\n4 5\n-1 1  9 2 3\n 0 1 -1 5 6\n-1 5  9 0 3\n 5 6 -1 5 6\n\n 1 1\n 10\n",
                "output": "1 1 1 1 \n1 1 1 1 \n1 1 1 1 \n1 1 1 1 \n\n1 2 \n2 3 \n\n1 3 7 4 5 \n2 3 1 5 7 \n1 6 7 2 5 \n5 7 1 5 7 \n\n1 \n\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Graviton"
        ],
        "template_code": [],
        "time_limit_sec": 5.0,
        "title": "Matrix Rank Transform",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}