{
    "code": 200,
    "data": {
        "body": "Given a string $s$ and a dictionary of strings $words$, output *\"Yes\"* if $s$ can be segmented into a space-separated sequence of one or more dictionary $words$, else output *\"No\"*.\n\n*Note that the same word in the dictionary may be reused multiple times in the segmentation.*",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 1000$\n$1 \\leq n \\leq 1000$\n$1 \\leq |s| \\leq 300$\n$1 \\leq words[i].length() \\leq 20$\nSum of $|s|$ over all test cases is $\\leq$ $3 \\times 10^4$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nbool wordBreak(string s, vector<string>& words) {\n    int n = s.size();\n    unordered_map<string, bool> m;\n    for (auto x : words)m[x] = 1;\n    vector<bool> dp(n + 1, false);\n    dp[0] = true;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= 20 && j <= i; j++) {\n            if (m.find(s.substr(i - j, j)) != m.end())dp[i] = (dp[i] | dp[i - j]);\n        }\n    }\n    return dp[n];\n}\nvoid solve() {\n    string s;\n    int n;\n    cin >> n;\n    cin >> s;\n    vector<string> words(n);\n    for (int i = 0; i < n; i++)cin >> words[i];\n    cout << ((wordBreak(s, words)) ? \"Yes\" : \"No\") << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:25:14.920957+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "We use a boolean vector $dp[]$. \n$dp[i]$ is set to true if a valid word (word sequence) ends there. The optimization is to look from current position $i$ back and only substring and do dictionary look up in case the preceding position $j$ with $dp[j] == true$ is found.\n\n**Time Complexity:** $O(|s|^2)$"
        },
        "id": 991,
        "input_format": "First-line contains $T$ - the number of test cases.\nThe first line of each test case contains $n$ - the size of the dictionary $words$.\nThe second line of each test case contains string $s$.\nThe next $n$ lines of each test case contain $n$ words of the dictionary $words$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "for test 1, ilikealgozenith -> i + like + algozenith .",
        "output_format": "For each test case, output *\"Yes\"* if $s$ can be segmented into a space-separated sequence of one or more dictionary $words$, else output *\"No\"*.",
        "samples": [
            {
                "input": "3\n6\nilikealgozenith\nalgozenith\nlove\nlike\ni\nyou\nalgo\n2\napplepenapple\napple\npen\n3\nmississippi\nmiss\nippi\nsis\n",
                "output": "Yes\nYes\nNo\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Word Break",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}