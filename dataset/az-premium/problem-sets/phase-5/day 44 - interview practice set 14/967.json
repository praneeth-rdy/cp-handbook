{
    "code": 200,
    "data": {
        "body": "You are given an integer array $nums$ of size $n$ and an integer $k$.\n\nFor each index $i$ where $0 \\leq i < n$, change $nums[i]$ to be either $nums[i] + k$ or $nums[i] - k$.\n\nThe **Entropy** of $nums$ is the difference between the maximum and minimum elements in $nums$.\n\nReturn the minimum Entropy of nums after changing the values at each index.",
        "complete_approach": "",
        "constraints": "$ 1 \\leq T \\leq 10^{4}$.\n$ 1 \\leq n \\leq 10^{5}$.\n$ 0 \\leq k \\leq 10^{4}$.\n$ 0 \\leq nums[i] \\leq 10^{4}$.\n\nSum of $n$ over all test cases is $\\leq$ $10^{6}$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nint Entropy(vector<int>& nums, int k) {\n    sort(nums.begin(), nums.end());\n    int n = nums.size();\n    int ans = nums[n - 1] - nums[0];\n    for (int i = 1; i < n; i++) {\n        int mx = max(nums[n - 1] - k, nums[i - 1] + k); // because nums[n-1] may still remain max.\n        int mn = min(nums[0] + k, nums[i] - k); // because nums[0] may still remain min.\n        ans = min(ans, mx - mn);\n    }\n    return ans;\n}\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++)cin >> v[i];\n    cout << Entropy(v, k) << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:47:03.933680+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Assume A is sorted.\n\nIn an optimal solution, some index i will have the maximum item and some index j will have the smallest item. We will iterate from i = 1 to i = len(A) - 2 and consider each index as the maximum item.\n\nImportant Observations:\n\n1. if A[i] is the maximum item, then we must add k to it. (We must either add or subtract; We must add to make the maximum item.)\n2. We must add K to A[0] and subtract K from A[len(A) - 1]\n3. For all indices after i, we must subtract k, in order to maintain A[i] as a maximum. (If after subtracting K from all indices after i, A[i] is not a maximum then we will just pick A[len(A) - 1] to be the maximum as it is not possible for A[i] to be the maximum)\n4. For all indices from 0 ... i - 1 we must add K, because that will allow us to minimize the difference between A[i] and the minimum item if it exists in indices 0 ... i - 1. Remeber we added K to A[i], so adding K to indices 0 ... i -1 maintains the invariant that A[i] is the maximum.\n\n**Time Complexity :** $O(NlogN)$ for sorting."
        },
        "id": 967,
        "input_format": "First-line contains $T$ - the number of test cases.\nFirst line of each test case contains $n$ - the size of the $nums$ and $k$.\nSecond line of each test case contains $n$ elements of $nums$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output the minimum Entropy of nums after changing the values at each index.",
        "samples": [
            {
                "input": "3\n3 3\n1 3 6\n1 0\n1\n3 1\n2 2 7\n",
                "output": "3\n0\n3\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Walmart"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Entropy",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}