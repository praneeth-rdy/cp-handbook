{
    "code": 200,
    "data": {
        "body": "<p>Find the K-th smallest element in an unordered list.</p><p>Complete the function</p><p><i>int quickSelect(vector&lt;int&gt; num, int K)</i></p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>K</i> \u2264 <i>N</i> \u2264 10<sup>6</sup><br>0 \u2264 <i>A<sub>i</sub></i> \u2264 10<sup>9</sup></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint quickselect(vector<int> A, int k) \n{\n    sort(A.begin(), A.end());\n    return A[k - 1];\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n, k;\n    cin >> n >> k;\n\n    vector<int> A;\n    \n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        A.push_back(x);\n    }\n\n    cout << quickselect(A, k) << \"\\n\";\n\n    return 0;\n}\n```\n",
                "language": "C++14"
            },
            {
                "code": "```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint partition(vector<int> &A, int l, int r)\n{\n    int x = A[r], i = l;\n    for (int j = l; j <= r - 1; j++) {\n        if (A[j] <= x) {\n            swap(A[i], A[j]);\n            i++;\n        }\n    }\n    swap(A[i], A[r]);\n    return i;\n}\n \nint kthSmallest(vector<int> &A, int l, int r, int k)\n{\n    if (k > 0 && k <= r - l + 1) {\n        int index = partition(A, l, r);\n\n        if (index - l == k - 1)\n            return A[index];\n \n        if (index - l > k - 1)\n            return kthSmallest(A, l, index - 1, k);\n \n        return kthSmallest(A, index + 1, r, k - index + l - 1);\n    }\n \n    return -1;\n}\n\nint quickselect(vector<int> A, int k) \n{\n    return kthSmallest(A, 0, (int)A.size() - 1, k);\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n, k;\n    cin >> n >> k;\n\n    vector<int> A;\n    \n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        A.push_back(x);\n    }\n\n    cout << quickselect(A, k) << \"\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:15:10.169202+00:00"
        },
        "hints": {
            "hint1": "<p>Sort the elements.</p>",
            "hint2": "<p>Can we do it in O(N)? We can use the approach used in QuickSort. The same algorithm, but implemented in a different way, can give us the average runtime of O(N).</p>",
            "solution_approach": "\n**Solution 1 (Sorting)**\n\nSort the array in O(NlogN), and print the Kth smallest element.\n\n**Solution 2 (Quickselect)**\n\nQuickselect algorithm is similar to quicksort. The difference is, instead of recurring for both sides (after finding pivot), it recurs only for the part that contains the Kth smallest element. \n\nPartition in quick select picks a pivot (either randomly or first/last element). Then it rearranges the list in a way that all elements less than the pivot are on the left side of the pivot and others on right. It then returns the index of the pivot element.\n\nNow here we are finding Kth smallest element. After partition cases are:\n\nK == pivot. Then you have already found Kth smallest. This is because of the way the partition is working. There are exactly K - 1 elements that are smaller than the Kth element.\nK < pivot. Then Kth smallest is on the left side of the pivot.\nK > pivot. Then Kth smallest is on the right side of the pivot. And to find it you actually have to find K - pivot smallest number on right.\nThis reduces the expected complexity from O(NlogN) to O(N), with a worst-case of O(N2).\n\nTo get understanding the average complexity of quickselect, please go through this link: **https://stackoverflow.com/questions/5945193/average-runtime-of-quickselect/25796762**"
        },
        "id": 541,
        "input_format": "<p>The first line of input contains <i>N </i>and<i> K.</i><br>The second line contains <i>N</i> space-separated integers - <i>A<sub>0</sub>, A<sub>1</sub>, \u2026, A<sub>N</sub></i></p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>Print the <i>K</i>th smallest element.</p>",
        "samples": [
            {
                "input": "1 1\n5",
                "output": "5"
            },
            {
                "input": "5 3\n1 8 7 6 9",
                "output": "7"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n</fix>\n\nint quickselect(vector<int> A, int k) \n{\n    // Complete the function\n}\n\n<fix>\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n, k;\n    cin >> n >> k;\n\n    vector<int> A;\n    \n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        A.push_back(x);\n    }\n\n    cout << quickselect(A, k) << \"\\n\";\n\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Quickselect",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}