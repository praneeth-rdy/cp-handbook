{
    "code": 200,
    "data": {
        "body": "Given an unsigned 32-bit integer N, reverse its bits and print the reversed number.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 T \u2264 10<sup>4</sup></p><p>1 \u2264 N &lt; 2<sup>32</sup></p>",
        "difficulty": 2,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nunsigned int reverseBits(unsigned int n)\n{\n    n = (n >> 16) | (n << 16);\n    n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8);\n    n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4);\n    n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2);\n    n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1);\n    return n;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while (t--)\n    {\n        unsigned int n;\n        cin >> n;\n        cout << reverseBits(n) << '\\n';\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:37:01.882527+00:00"
        },
        "hints": {
            "hint1": "Iterate through the bits in the reverse order using a for loop.",
            "hint2": "Try using bit manipulation to solve this without a single loop.",
            "solution_approach": "This problem can be solved without the use of loops in 2 ways. In the first method we divide the number into bytes and then reverse the individual bytes using memoization, which caches the previously calculated values hence avoiding recalculation. This method does not have any loops but uses some extra space for caching. To do this without any extra space we use masking and shifting. The idea can be considered as a strategy of divide and conquer, where we divide the original 32-bits into blocks with fewer bits via bit masking, then we reverse each block via bit shifting, and at the end we merge the result of each block to obtain the final result.\n\nWe can implement the algorithm in the following steps:\n1). First, we break the original 32-bit into 2 blocks of 16 bits, and switch them.\n2). We then break the 16-bits block into 2 blocks of 8 bits. Similarly, we switch the position of the 8-bits blocks.\n3). We then continue to break the blocks into smaller blocks, until we reach the level with the block of 1 bit.\n4). At each of the above steps, we merge the intermediate results into a single integer which serves as the input for the next step."
        },
        "id": 632,
        "input_format": "The first line contains a single integer T - the number of test cases.\nT lines follow each containing a single integer N.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "1 (<strong>00000000000000000000000000000001</strong>) =&gt; 2147483648 (<strong>10000000000000000000000000000000</strong>)</span></p><p>2 (<strong>00000000000000000000000000000010</strong>) =&gt; 1073741824 (<strong>01000000000000000000000000000000</strong>)",
        "output_format": "For each test case print the reversed number in a new line.",
        "samples": [
            {
                "input": "4\n1\n2\n10\n15",
                "output": "2147483648\n1073741824\n1342177280\n4026531840"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Bit Manipulation",
            "Brute Force"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nunsigned int reverseBits(unsigned int n)\n{\n    //add code here\n}\n\n<fix>\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while (t--)\n    {\n        unsigned int n;\n        cin >> n;\n        cout << reverseBits(n) << '\\n';\n    }\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "REVBIT",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}