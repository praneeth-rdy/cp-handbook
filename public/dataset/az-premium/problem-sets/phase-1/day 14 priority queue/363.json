{
    "code": 200,
    "data": {
        "body": "You are given Q queries and have to perform the following operations:\n\n1. add x y - add student name X (string) for marks y (integer). If it already exists, add a new entry.\n2. erase x - erase the first current entry of student with name x\n3. eraseall x - erase all entries of student with name x\n4. print x - print the first entry of marks of student with name x, if entry is not there for x, print 0.",
        "complete_approach": "",
        "constraints": "- $1 \\leq T \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n- $1 \\leq X \\leq 10^6$\n\nIt is guaranteed that the sum of $Q$ over all test cases does not exceed $10^5$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS                \\\n  ios::sync_with_stdio(0); \\\n  cin.tie(0);              \\\n  cout.tie(0);\n\nint main() {\n  IOS;\n  int t;\n  cin >> t;\n  while (t--) {\n    int q;\n    cin >> q;\n    multimap<string, int> m;\n    while (q--) {\n      string s;\n      cin >> s;\n      if (s == \"add\") {\n        string x;\n        int y;\n        cin >> x >> y;\n        m.insert({x, y});\n      } else if (s == \"erase\") {\n        string x;\n        cin >> x;\n        auto it = m.find(x);\n        if(it != m.end()) {\n          m.erase(it);\n        }\n      } else if (s == \"eraseall\") {\n        string x;\n        cin >> x;\n        if (m.find(x) != m.end()) {\n          m.erase(x);\n        }\n      } else {\n        string x;\n        cin >> x;\n        auto it = m.find(x);\n        if (it != m.end()) {\n          cout << it->second << \"\\n\";\n        } else {\n          cout << \"0\\n\";\n        }\n      }\n    }\n  }\n  return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:15:57.397566+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Add entry `x`, `y` using `insert({x,y})`.\nUse `erase(x)` for deleting all entry of student with name `x`\nFirst find iterator to first entry of `x` using `find(x)`, then erase this using `erase(it)`\nUse `count(x)` for checking if entry with name `x` exists\nPrint by iterating through the map and check if key is equal to `x`\nTime Complexity per test case: $O(Q \\log N)$ where `N` is the size of the set"
        },
        "id": 363,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\n\nThe first line of each test case contains one integer Q - the number of queries.\n\nEach of the next Q lines contains queries.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "1. Map becomes: [alice: 24]\n2. Map becomes: [alice: 24, bob: 21]\n3. Map becomes: [alice: 24, bob: 21, alice: 23]\n4. Map becomes: [alice: 24, bob: 21, alice: 23, alice: 22]\n5. alice: 24\n6. Map becomes: [bob: 21, alice: 23, alice: 22] (since first entry of alice is removed)\n7. alice: 23\n8. Map becomes: [bob: 21]\n9. key alice doesn't exist, hence alice: 0",
        "output_format": "For each test case, print the required queries.",
        "samples": [
            {
                "input": "1\n9\nadd alice 24\nadd bob 21\nadd alice 23\nadd alice 22\nprint alice\nerase alice\nprint alice\neraseall alice\nprint alice\n",
                "output": "24\n23\n0\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Multimap AZ101",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}