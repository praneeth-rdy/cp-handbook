{
    "code": 200,
    "data": {
        "body": "<p>Given the heads of K singly-linked lists, return their common intersection node. If the linked lists don\u2019t intersect, return null. It is guaranteed that this structure does not have any cycles.</p><p>Complete the function</p><p><strong>ListNode* getKIntersectionNode(vector&lt;ListNode*&gt; head)</strong></p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>K</i> \u2264 100<br>0 \u2264 <i>N<sub>i</sub></i> \u2264 1000</p>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nListNode *getTwoIntersectionNode(ListNode *headA, ListNode *headB) {\n    ListNode* l1 = headA, *l2 = headB;\n    while(l1 != l2) {\n        l1 = (l1 == NULL) ? headB : l1->next;\n        l2 = (l2 == NULL) ? headA : l2->next;\n    }\n    return l1;\n}\n\nListNode* mergeLists(vector<ListNode*>& lists, int l, int r) {\n    if (l == r) {\n        return lists[l];\n    }\n    \n    int mid = (l + r) / 2;\n    \n    ListNode* head1 = mergeLists(lists, l, mid);\n    ListNode* head2 = mergeLists(lists, mid + 1, r);\n    \n    return getTwoIntersectionNode(head1, head2);\n}\n\nListNode* getKIntersectionNode(vector<ListNode*>& lists) {\n    if(lists.empty()) {\n        return NULL;\n    }\n    \n    return mergeLists(lists, 0, (int)lists.size() - 1);\n}\n\nvector<ListNode*> GetList(vector<vector<int>> &num, int K) {\n    vector<ListNode*> head(K), cur(K);\n\n    for(int i = 0; i < K; i++) {\n        head[i] = NULL;\n        cur[i] = NULL;\n    }\n\n    map <int,ListNode*> M;\n\n    for(int i = 0; i < K; i++) {\n        for(int u : num[i]) {\n            if(M.find(u) != M.end()) {\n                if(!head[i]) {\n                    head[i] = M[u];\n                    cur[i] = head[i];\n                }\n                else {\n                    cur[i]->next = M[u]; \n                    cur[i] = cur[i]->next;\n                }\n                break;\n            }\n            else {\n                ListNode* temp = new ListNode(u);\n                if(!head[i]) {\n                    head[i] = temp;\n                    cur[i] = head[i];\n                }\n                else {\n                    cur[i]->next = temp;\n                    cur[i] = cur[i]->next;\n                }\n                M[u] = temp;\n            }\n        }\n    }\n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int K;\n    cin >> K;\n\n    vector<vector<int>> num(K);\n\n    for(int i = 0; i < K; i++) {\n        int n;\n        cin >> n;\n        for(int j = 0; j < n; j++) {\n            int x;\n            cin >> x;\n\n            num[i].push_back(x);\n        }\n    }\n\n    vector<ListNode*> head = GetList(num, K);\n\n    ListNode* ans = getKIntersectionNode(head);\n\n    if(ans) cout << ans->val << \"\\n\";\n    else cout << \"-1\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:42:11.622117+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "\n**Solution 1(Brute Force)**\nFind the intersection of the K lists by taking two linked lists at a time. This has to be done (k-1) times since there would be (k-1) pairs of linked lists.\n\nTime Complexity: The time complexity is O(k*n) where n is the number of nodes in the linked list and k is the number of lists.\nSpace Complexity: Since constant extra memory is used, the space complexity is O(1).\n\n \n\n**Solution 2(Optimal)**\nThe approach here is a modification of Solution 1. Use divide and conquer. Recursively split the k lists into halves until the count becomes 1. Find the intersection of two lists each time.\n\nTime Complexity: The time complexity is O(n log(k)) where n is the number of nodes in the linked list and k is the number of lists.\nSpace Complexity: Since constant extra memory is used, the space complexity is O(1)."
        },
        "id": 539,
        "input_format": "<p>The first line of input contains <i>K </i>- the number of linked lists.<br>The 2<i>i</i>th line contains <i>N<sub>i</sub></i> - the number of nodes in <i>i</i>th linked list.<br>The (2<i>i</i> + 1)th line contains <i>N<sub>i </sub></i>space-separated integers denoting the nodes in the <i>i</i>th linked list.<br>Each unique node has a unique value, and vice-versa. No two different nodes have the same value.</p><p>The following function parses the input</p><p><strong>vector&lt;ListNode*&gt; GetList(vector&lt;vector&lt;int&gt;&gt; num, int K)</strong></p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>Node 6 is a common intersection of all linked lists.</p><figure class=\"image\"><img src=\"https://lh3.googleusercontent.com/0-ccIE7IK6a5pVrFT7rfjA0D8AePHC1D1-EnxKbJPUIYihtMqrcklgwmyy6kovm4dnjsG2WJMAbb588bYqSji8rW2hw-LxNT67Et0945rAEI2CwaaEuzD5Ubr-Aml1NnBmGD0_q2\"></figure>",
        "output_format": "",
        "samples": [
            {
                "input": "3\n7\n1 2 3 5 6 8 9\n6\n4 3 5 6 8 9\n4\n7 6 8 9",
                "output": "6"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Linked List"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n</fix>\n\nListNode* getKIntersectionNode(vector<ListNode*>& lists) {\n    //Complete the function\n}\n\n<fix>\nvector<ListNode*> GetList(vector<vector<int>> &num, int K) {\n    vector<ListNode*> head(K), cur(K);\n\n    for(int i = 0; i < K; i++) {\n        head[i] = NULL;\n        cur[i] = NULL;\n    }\n\n    map <int,ListNode*> M;\n\n    for(int i = 0; i < K; i++) {\n        for(int u : num[i]) {\n            if(M.find(u) != M.end()) {\n                if(!head[i]) {\n                    head[i] = M[u];\n                    cur[i] = head[i];\n                }\n                else {\n                    cur[i]->next = M[u]; \n                    cur[i] = cur[i]->next;\n                }\n                break;\n            }\n            else {\n                ListNode* temp = new ListNode(u);\n                if(!head[i]) {\n                    head[i] = temp;\n                    cur[i] = head[i];\n                }\n                else {\n                    cur[i]->next = temp;\n                    cur[i] = cur[i]->next;\n                }\n                M[u] = temp;\n            }\n        }\n    }\n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int K;\n    cin >> K;\n\n    vector<vector<int>> num(K);\n\n    for(int i = 0; i < K; i++) {\n        int n;\n        cin >> n;\n        for(int j = 0; j < n; j++) {\n            int x;\n            cin >> x;\n\n            num[i].push_back(x);\n        }\n    }\n\n    vector<ListNode*> head = GetList(num, K);\n\n    ListNode* ans = getKIntersectionNode(head);\n\n    if(ans) cout << ans->val << \"\\n\";\n    else cout << \"-1\\n\";\n\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Intersection of K Lists",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}