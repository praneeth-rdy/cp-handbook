{
    "code": 200,
    "data": {
        "body": "You are given Q queries and have to perform the following operations:\n\n1. add x - add element x in the set\n2. erase x - delete one element with value x, if it exists\n3. eraseall x - delete all elements with value x, if it exists\n4. find x - if x is present print \u201cYES\u201d, else print \u201cNO\u201d\n5. count x - print the number of times x occurs in the set\n6. print - print the values in set\n7. empty - empty the set",
        "complete_approach": "",
        "constraints": "1\u2264 T \u2264 10<sup>5</sup>\n\n1\u2264 Q \u2264 10<sup>5</sup>\n\n1\u2264 X \u2264 10<sup>6</sup>\n\nIt is guaranteed that the sum of Q over all test cases does not exceed 10<sup>5</sup>.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS                \\\n  ios::sync_with_stdio(0); \\\n  cin.tie(0);              \\\n  cout.tie(0);\n\nint main() {\n  IOS int t;\n  cin >> t;\n  while (t--) {\n    int q;\n    cin >> q;\n    multiset<int> st;\n    while (q--) {\n      string s;\n      cin >> s;\n      if (s == \"add\") {\n        int x;\n        cin >> x;\n        st.insert(x);\n      } else if (s == \"erase\") {\n        int x;\n        cin >> x;\n        if (st.find(x) != st.end()) {\n          st.erase(st.find(x));\n        }\n      } else if (s == \"eraseall\") {\n        int x;\n        cin >> x;\n        if (st.find(x) != st.end()) {\n          st.erase(x);\n        }\n      } else if (s == \"find\") {\n        int x;\n        cin >> x;\n        if (st.find(x) != st.end()) {\n          cout << \"YES\\n\";\n        } else {\n          cout << \"NO\\n\";\n        }\n      } else if (s == \"count\") {\n        int x;\n        cin >> x;\n        cout << st.count(x) << \"\\n\";\n      } else if (s == \"print\") {\n        for (int i : st) {\n          cout << i << \" \";\n        }\n        cout << \"\\n\";\n      } else {  // empty\n        st.clear();\n      }\n    }\n  }\n  return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:44:45.990990+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "Use `insert(x)` for adding element to multiset\nUse `find(x)` for finding the iterator to the element\nUse `erase(x)` for deleting all elements with value x\nUse `erase(ms.find(x))` for deleting one occurence of element with value x, first find iterator then erase using erase(it)\nUse `count(x)` for finding the number of time x occurs in the multiset\nUse `clear()` for emptying the set\nTime Complexity per test case: $O(Q \\log N)$ where $N$ is the size of the set"
        },
        "id": 361,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\n\nThe first line of each test case contains one integer Q - the number of queries.\n\nEach of the next Q lines contains queries.\n\nThe combination of print and n does not exceed 10^8.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "1. Multiset becomes: [3]\n2. Multiset becomes: [1, 3]\n3. Multiset becomes: [1, 3, 5]\n4. Multiset becomes: [1, 3, 3, 5]\n5. Multiset becomes: [1, 3, 3, 3, 5]\n6. 3 occurs 3 times in the multiset\n7. Multiset becomes: [1, 3, 3, 5]\n8. Multiset is: 1, 3, 3, 5\n9. Multiset becomes: [1, 5]\n10. Multiset is: 1, 5\n11. 5 exists in the multiset\n12. Multiset becomes empty\n13. 5 does not exist in the multiset",
        "output_format": "For each test case, print the required queries.",
        "samples": [
            {
                "input": "1\n13\nadd 3\nadd 1\nadd 5\nadd 3\nadd 3\ncount 3\nerase 3\nprint\neraseall 3\nprint\nfind 5\nempty\nfind 5\n",
                "output": "3\n1 3 3 5 \n1 5 \nYES\nNO\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Multiset AZ101",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}