{
    "code": 200,
    "data": {
        "body": "Given an integer array $arr$, output the number of longest increasing subsequences.\n\nNotice that the sequence has to be strictly increasing.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 100$\n$1 \\leq n \\leq 1000$\n$-10^{6} \\leq arr[i] \\leq 10^{6}$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nll MOD = 1000000007;\n\nvoid solve() { // not possible to solve this using O(nlogn) approach, had to use O(n^2) approach.\n    ll n, lis = 1;\n    cin >> n;\n    vector<ll> nums(n), dp(n + 1, 0), cnt(n + 1, 0);\n    for (int i = 0; i < n; i++)cin >> nums[i];\n    for (int i = 0; i < n; i++) {\n        cnt[i] = 1;\n        auto &ans = dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (nums[j] < nums[i]) {\n                if (ans < dp[j] + 1)ans = (dp[j] + 1) % MOD, cnt[i] = cnt[j];\n                else if (ans == dp[j] + 1) cnt[i] = (cnt[i] + cnt[j]) % MOD;\n            }\n        }\n        lis = max(lis, dp[i]);\n    }\n    ll ans = 0;\n    for (int i = 0; i < n; i++)if (lis == dp[i]) ans = (ans + cnt[i]) % MOD;\n    if (ans < 0) ans += MOD;\n    cout << ans << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Editorial code is not passing the Sample cases.",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:25:51.046448+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "\nFor a sequence of numbers,\nLet $cnt[k]$ is total number of longest subsequence ending with $nums[k]$;\nLet $len[k]$ is the length of longest subsequence ending with $nums[k]$;\nThen we have following equations\n\n$len[k+1] = max(len[k+1], len[i]+1)$ for all $i <= k$ and $nums[i] < nums[k+1]$;\n$cnt[k+1] = sum(cnt[i])$ for all $i <= k$ and $nums[i] < nums[k+1]$ and $len[i] = len[k+1]-1$;\nStarting case and default case: $cnt[0] = len[0] = 1$;\n\n**Time Complexity**: $O(N^{2})$\n"
        },
        "id": 919,
        "input_format": "First line contains $T$ - the number of test cases.\nFirst line of each test case contains $n$ - the length of the array $arr$.\nSecond line of each test case contains array $arr$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output the number of longest increasing subsequences in a newline modulo $1000000007$.",
        "samples": [
            {
                "input": "4\n5\n1 2 2 3 6\n5\n1 3 5 4 7\n6\n1 1 1 1 1 1\n4\n3 1 1 2",
                "output": "2\n2\n6\n2\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Count LIS",
        "video_editorial_id": 10681
    },
    "details": "Problem Details"
}