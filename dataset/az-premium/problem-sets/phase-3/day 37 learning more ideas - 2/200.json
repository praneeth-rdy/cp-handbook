{
    "code": 200,
    "data": {
        "body": "You have a convex $n$-sided convex polygon where each vertex has an integer value $v_i$. You are given an integer array values where $v[i]$ is the value of the $i^{th}$ vertex (i.e., clockwise order).\n\nYou will triangulate the convex polygon into $n - 2$ triangles. For each triangle, the value of that triangle is the *product of the values of its vertices*, and the total score of the triangulation is the sum of these values over all $n - 2$ triangles in the triangulation.\n\nOutput the smallest possible total score that you can achieve with some triangulation of the polygon.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10^3$\n$3 \\leq n \\leq 100$\n$1 \\leq v[i] \\leq 10^4$\nSum of $n$ over all test cases is $\\leq 5000$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nint n;\nvector<vector<ll>> dp;\nvector<ll> a;\nll rec(int i, int j) {\n    if (abs(j - i) == 1)return 0;\n    auto &ans = dp[i][j];\n    if (ans != -1)return ans;\n    ans = 1e18;\n    for (int k = i + 1; k <= j - 1; k++)ans = min(ans, a[i] * a[k] * a[j] + rec(i, k) + rec(k, j));\n    return ans;\n}\nll minTriangulation(vector<ll>& v) {\n    n = v.size();\n    a = v;\n    dp.assign(n + 1, vector<ll>(n + 1, -1));\n    return rec(0, n - 1);\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<ll> v(n);\n    for (int i = 0; i < n; i++)cin >> v[i];\n    auto ans=minTriangulation(v);\n    cout << ans << endl;\n    assert(ans>0);\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:34:52.660686+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "We can solve it with Dynamic programming.\n$DP(pos1,pos2) =$ min cost of triangulation of vertices from $pos1$ to $pos2$.\nif $(pos2-pos1<2)$ return 0; //its not possible to get any triangle\nelse $DP(pos1,pos2)= min(DP(pos1,k)+ DP(k,pos2) + Cost(pos1,pos2,k)) )$\nWhere $Cost(pos1,pos2,k)$ is the cost of choose triangle with vertices $(pos1,pos2,k)$ and $k$ go from $pos1+1$ to $pos2-1$.\n\n**Time Complexity:** $O(n ^3)$ per test case\n**Space Complexity:** $O(n^ 2)$ per test case."
        },
        "id": 200,
        "input_format": "First Line contains $T$ - the number of test cases.\nThe First Line of each test case contains $n$ - the number of vertices of the convex polygon.\nThe second line of each test case contains $n$ space-separated values $v[i]$ of the vertices in clockwise order.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For 1st test case, The minimum score triangulation has score $1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13$.",
        "output_format": "For each test case, Output the smallest possible total score that you can achieve with some triangulation of the polygon.",
        "samples": [
            {
                "input": "3\n6\n1 3 1 4 1 5\n3 \n1 2 3\n4\n1 1 1 1\n",
                "output": "13\n6\n2\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Convex Polygon Triangulation",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}