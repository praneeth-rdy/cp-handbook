{
    "code": 200,
    "data": {
        "body": "Given two numbers $N$ and $M$, a 2D array $A$ of size $N \\times M$ and a number $X$. Determine whether $X$ exists in the 2D array $A$ or not.",
        "complete_approach": "",
        "constraints": "$2 \\leq N, M \\leq 100$\n$1 \\leq A[i][j] \\leq 10^5$\n$0 \\leq X \\leq 10^5$",
        "difficulty": 1,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n\n    while (t--)\n    {\n        int n, m;\n        cin >> n >> m;\n\n        int arr[n * m];\n        for (int i = 0; i < n * m; i++)\n        {\n            cin >> arr[i];\n        }\n\n        int x;\n        cin >> x;\n\n        bool flag = false;\n        for (int i = 0; i < n * m; i++)\n        {\n            if (arr[i] == x)\n            {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n        {\n            cout << \"will take number\" << endl;\n        }\n        else\n        {\n            cout << \"will not take number\" << endl;\n        }\n    }\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        int t = Integer.parseInt(br.readLine());\n        \n        while (t-- > 0) {\n            String[] nm = br.readLine().trim().split(\" \");\n            int n = Integer.parseInt(nm[0]);\n            int m = Integer.parseInt(nm[1]);\n            \n            int size = n * m;\n            int[] arr = new int[size];\n            int idx = 0;\n            while (idx < size) {\n                String line = br.readLine();\n                if (line == null || line.isEmpty()) continue;\n                String[] tokens = line.trim().split(\"\\\\s+\");\n                for (String token : tokens) {\n                    if (token.isEmpty()) continue;\n                    arr[idx++] = Integer.parseInt(token);\n                    if (idx == size) break;\n                }\n            }\n            \n            int x = Integer.parseInt(br.readLine());\n            \n            boolean flag = false;\n            for (int i = 0; i < size; i++) {\n                if (arr[i] == x) {\n                    flag = true;\n                    break;\n                }\n            }\n            if (!flag) {\n                out.println(\"will take number\");\n            } else {\n                out.println(\"will not take number\");\n            }\n        }\n        \n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    idx = 0\n    t = int(data[idx])\n    idx += 1\n    \n    for _ in range(t):\n        n = int(data[idx])\n        idx += 1\n        m = int(data[idx])\n        idx +=1\n        size = n * m\n        arr = []\n        for _ in range(size):\n            arr.append(int(data[idx]))\n            idx +=1\n        x = int(data[idx])\n        idx +=1\n        \n        if x in arr:\n            print(\"will not take number\")\n        else:\n            print(\"will take number\")\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:40:38.087902+00:00"
        },
        "hints": {
            "hint1": "Use nested loop to iterate over rows and columns of the matrix.",
            "hint2": "Check for $X$ with each element of the matrix.",
            "solution_approach": "We can traverse the entire matrix and compare each element with $X$. We loop through each element of the matrix using a nested loop or by flattening the matrix into a single array. If we find an element equal to $X$, we conclude that $X$ exists in the matrix. Otherwise, after checking all elements, if we do not find $X$, we conclude that $X$ does not exist in the matrix.\n\n**Time Complexity per test case:** $O(N \\times M)$\n\nSince we need to check each element once.\n\n**Space Complexity per test case:** $O(1)$\n\nOnly constant extra space is used."
        },
        "id": 1145,
        "input_format": "First line contains an integer $T$, the number of test cases.\nFirst line of each test case contains two integers $N$ and $M$ separated by a space.\nNext $N$ lines contain $M$ space-separated integers.\nNext line contains an integer $X$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "**Sample Input 1:**\nWe have a $2 \\times 2$ matrix:\n1 2\n3 4\nThe number to search is $X = 3$, which exists in the matrix. Hence, we print \"will not take number\".\n**Sample Input 2:**\nFirst test case:\nMatrix:\n1 2\n3 4\n$X = 3$, which exists in the matrix. So, we print \"will not take number\".\nSecond test case:\nMatrix:\n1 2\n3 4\n$X = 10$, which does not exist in the matrix. So, we print \"will take number\".",
        "output_format": "Print **will take number** if the number doesn't exist in the 2D array otherwise, print **will not take number**.",
        "samples": [
            {
                "input": "1\n2 2\n1 2\n3 4\n3",
                "output": "will not take number"
            },
            {
                "input": "2\n2 2\n1 2\n3 4\n3\n2 2\n1 2\n3 4\n10",
                "output": "will not take number\nwill take number"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Brute Force",
            "Implementation",
            "Arrays"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Search in Matrix",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}