{
    "code": 200,
    "data": {
        "body": "<p>Given a string <i>S</i> consisting of the lowercase character of length N. Score of a string is the number of unique characters present in the string( characters which are only present once in the string). Like score of \"character\" is 3 {h,t,e}.</p><p>Find the sum of the score of all substring of S.</p>",
        "complete_approach": "",
        "constraints": "",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nsigned main(){\n   ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);;\n   ll testcases;\n   cin>>testcases;\n   while(testcases--){\n       ll n;\n       cin>>n;\n       string s;\n       cin>>s;\n       vector < ll >  occurence[26];\n       for(ll i=0;i<26;i++)\n           occurence[i].push_back(-1);\n       for(ll i=0;i<n;i++)\n           occurence[s[i]-'a'].push_back(i);\n       for(ll i=0;i<26;i++)\n           occurence[i].push_back(n);\n       ll ans = 0;\n       for(ll i=0;i<26;i++){\n           for(ll j=1;j<(int)occurence[i].size()-1;j++){\n               ans+=(occurence[i][j]-occurence[i][j-1])*(occurence[i][j+1]-occurence[i][j]);\n           }\n       }\n       cout<<ans<<\"\\n\";\n   }\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Solution Approach is missing"
            ],
            "last_updated": "2024-06-22T02:28:39.373127+00:00"
        },
        "hints": {
            "hint1": "Since the strings are made of only lowercase alphabets, we can calculate the contribution of each letter from \u2018a\u2019 to \u2018z\u2019 to the final answer.\n\n",
            "hint2": "<p>We need to calculate the contribution of each letter from \u2018a\u2019 to \u2018z\u2019 to the final answer. For the answer, we will consider the case for \u2018a\u2019, you need to do the same for each letter from \u2018a\u2019 to \u2018z\u2019. For a particular \u2018a\u2019 to contribute to the final answer, it should exist only once in the subarray (that is how it will become unique). So to calculate the number of subarrays having that \u2018a\u2019 only once, we can find its closest left \u2018a\u2019 and its closest right \u2018a\u2019. The left point of the subarray should be between the closest left \u2018a\u2019 and the current \u2018a\u2019 and similarly, the right point of the subarray should be between the current \u2018a\u2019 and the closest right \u2018a\u2019. To find the number of subarrays including current \u2018a\u2019, we can multiply the possible values of the left and right points. Do this for each character \u2018a\u2019 present in the string and then the same for each character from \u2018a\u2019 to \u2018z\u2019.</p><p>Time Complexity per test case: O(N)</p>",
            "solution_approach": ""
        },
        "id": 63,
        "input_format": "<p>The first line contains <i>T</i>, the number of test cases <i>(1&lt;=T&lt;=10)</i>.</p><p>The first line of each test case contains an integers <i>N, </i>size of the string, <i>1&lt;=N&lt;=10^5.</i></p><p>The second line of each test case contains a string <i>S</i> of length <i>N</i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 512000,
        "note": "<p><strong>For the 1st test case:</strong><br>Substring and score = (\"a\",1), (\"c\",1) (\"ac\",2).<br>Total score = 4</p><p><strong>For the 2nd test case:</strong><br>Substring and score = (\"a\",1), (\"aa\",0), (\"aac\",1), (\"a\",1), (\"ac\",2), (\"c\",1).<br>Total score = 6</p>",
        "output_format": "<p>For each test case print the sum of the score of all substring of <i>S</i> in a newline.</p>",
        "samples": [
            {
                "input": "5\n2\nac\n3\naac\n5\nabode\n5\naaaaa\n10\njdnbfjdhzw",
                "output": "4\n6\n35\n5\n194"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Contribution Technique"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Count Unique Char in Substrings",
        "video_editorial_id": 8138
    },
    "details": "Problem Details"
}