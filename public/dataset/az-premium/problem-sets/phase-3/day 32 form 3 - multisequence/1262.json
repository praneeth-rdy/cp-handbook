{
    "code": 200,
    "data": {
        "body": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n\nYou have the following three operations permitted on a word:\n\n1. Insert a character\n2. Delete a character\n3. Replace a character",
        "complete_approach": "",
        "constraints": "$ 1 \\leq word1.length, word2.length \\leq 500 $",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solution()\n{\n    string word1, word2;\n    cin >> word1 >> word2;\n    int n = word1.size(), m = word2.size();\n    int dp[n + 1][m + 1];\n    for (int i = 0; i <= n; i++)\n    {\n        dp[i][0] = i; // remove this many characters to convert word1 to word2\n    }\n    for (int j = 0; j <= m; j++)\n    {\n        dp[0][j] = j; // insert this many characters to convert word1 to word2\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n            if (word1[i - 1] == word2[j - 1])\n            {\n                dp[i][j] = dp[i - 1][j - 1];\n            }\n            else\n            {\n                dp[i][j] = 1 + min({dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]});\n                // insert     // remove     // replace\n            }\n        }\n    }\n    cout << dp[n][m] << endl;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    solution();\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:40:34.551180+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "To apply DP, we define the state $dp[i][j]$ to be the minimum number of operations to convert $word1[0..i)$ to $word2[0..j)$.\n\nFor the base case, that is, to convert a string to an empty string, the minimum number of operations (deletions) is just the length of the string. So we have $dp[i][0] = i$ and $dp[0][j] = j$.\n\nFor the general case to convert $word1[0..i)$ to $word2[0..j)$, we break this problem down into sub-problems. Suppose we have already known how to convert $word1[0..i - 1)$ to $word2[0..j - 1)$ $(dp[i - 1][j - 1])$, if $word1[i - 1] == word2[j - 1]$, then no more operation is needed and $dp[i][j] = dp[i - 1][j - 1]$.\n\nIf $word1[i - 1] != word2[j - 1]$, we need to consider three cases.\n\nReplace $word1[i - 1]$ by $word2[j - 1] (dp[i][j] = dp[i - 1][j - 1] + 1);$\nIf $word1[0..i - 1) = word2[0..j)$ then delete $word1[i - 1] (dp[i][j] = dp[i - 1][j] + 1);$\n$If $word1[0..i) + word2[j - 1] = word2[0..j)$ then insert $word2[j - 1]$ to $word1[0..i) (dp[i][j] = dp[i][j - 1] + 1)$.\n\nSo when $word1[i - 1] != word2[j - 1]$, $dp[i][j]$ will just be the minimum of the above three."
        },
        "id": 1262,
        "input_format": "Input contains 2 strings word1 and word2.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "Output the minimum number of operations required to convert $word1$ to $word2$.",
        "samples": [
            {
                "input": "horse\nros\n",
                "output": "3\n"
            },
            {
                "input": "intention\nexecution\n",
                "output": "5\n"
            },
            {
                "input": "catsanddogs \nad\n",
                "output": "9\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Edit Distance",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}