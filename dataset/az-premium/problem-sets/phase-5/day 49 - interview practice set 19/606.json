{
    "code": 200,
    "data": {
        "body": "Given a directed graph, you have to find its transitive closure, i.e, the reachability of any vertex from any other vertex.",
        "complete_approach": "",
        "constraints": "<p><i>1 \u2264 N \u2264 100</i></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<vector<int>> TransitiveClosureGraph(vector<vector<int>> adj)\n{\n\tint n = (int)adj.size();\n\n\tvector<vector<int>> T(n, vector<int>(n));\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tT[i][j] = adj[i][j];\n\t\t}\n\t}\n\n\tfor (int i = 0; i < n; i++)\n\t\tT[i][i] = 1;\n\n\tfor (int k = 0; k < n; k++)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tT[i][j] |= (T[i][k] & T[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn T;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\n\tint n;\n\tcin >> n;\n\n\tvector<vector<int>> adj(n, vector<int>(n));\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tcin >> adj[i][j];\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\tadj[i][j] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tvector<vector<int>> T = TransitiveClosureGraph(adj);\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tcout << T[i][j] << ' ';\n\t\t}\n\t\tcout << '\\n';\n\t}\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:46:49.524840+00:00"
        },
        "hints": {
            "hint1": "Can we make use of Floyd Warshall Algorithm?",
            "hint2": "<p>In Floyd Warshall algorithm, if change + (Addition) to &amp; (AND). That means, d[i][j] = d[i][v] | (d[i][k] &amp; d[k][j]), we can reach i to j, if there's path from i to k and k to j.</p>",
            "solution_approach": "We can use the Floyd Warshall Algorithm to solve the problem. If the cost of the shortest path between any two vertices is infinity then there does not exist a path between them. However we need not find the shortest path so the solution can be simplified. Instead of storing the cost of the shortest path between two vertices <i>i</i> and <i>j</i> just store a boolean indicating the reachability from <i>i</i> to <i>j</i> and for every <i>k</i> intermediate vertex between <i>i</i> and <i>j,</i> <i>adj[i][j]</i> can be written as <i>adj[i][k] OR adj[k][j]</i>.<br>Keep in mind that a vertex <i>i</i> is reachable from <i>i</i> itself even if it does not have a self loop.</span><br>Time Complexity - <i>O(N<sup>3</sup>)</i>"
        },
        "id": 606,
        "input_format": "The first line of each test case contains $N$ - the number of vertices in the graph.  \n$N$ lines follow containing $N$ integers, where the $j^{\\text{th}}$ integer of the $i^{\\text{th}}$ line is $1$ if there is a directed edge from vertex $i$ to vertex $j$, otherwise it is $0$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "The graph for test case 1:<figure class=\"image image_resized\" style=\"width:40.04%;\"><img src=\"https://lh4.googleusercontent.com/56-CacHhdc2xjpnmKFlqLS2ZDDmDQo6XSf4hq88CwtF8wO6TYcGJbmzJ5zQJEMS0e3GNzYSwD46UAn01dw-wiB4FnvCUfHD8rCl4FRRkIIuQVbbE80Rk-qkPBQVMR0R8wzoZO3Ff\"></figure>The graph for test case 2:<figure class=\"image image_resized\" style=\"width:34.46%;\"><img src=\"https://lh4.googleusercontent.com/NkkHO14-wLGqv6Pqd7vNP9unoIBtXIlzA41n6r4MZ_kaCJFKQByNX5bVx6hYBKKw6XhiS6k_wDaqhERCki5xpJWPMOBRAt4mlTRcNvDVRUvmP3UJ2mhriNf4AAcJKsC7yj-hBXot\"></figure>",
        "output_format": "For each test case print <i>N</i> lines with <i>N</i> integers each, where the <i>j<sup>th</sup></i> integer of the <i>i<sup>th</sup></i> line is <i>1</i> if there is a path from vertex <i>i</i> to vertex <i>j</i>, otherwise it is <i>0</i>.",
        "samples": [
            {
                "input": "3\n0 1 1\n0 0 0\n1 0 0",
                "output": "1 1 1\n0 1 0\n1 1 1"
            },
            {
                "input": "6\n0 0 0 0 1 1\n0 0 0 1 0 1\n1 1 0 0 0 0\n0 0 0 0 0 0\n0 0 0 1 0 0\n1 0 1 0 1 0",
                "output": "1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n0 0 0 1 0 0\n0 0 0 1 1 0\n1 1 1 1 1 1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nvector<vector<int>> TransitiveClosureGraph(vector<vector<int>> adj)\n{\n\t// Complete the function\n}\n\n<fix>\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\n\tint n;\n\tcin >> n;\n\n\tvector<vector<int>> adj(n, vector<int>(n));\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tcin >> adj[i][j];\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\tadj[i][j] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tvector<vector<int>> T = TransitiveClosureGraph(adj);\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tcout << T[i][j] << ' ';\n\t\t}\n\t\tcout << '\\n';\n\t}\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "GRAPHADJ",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}