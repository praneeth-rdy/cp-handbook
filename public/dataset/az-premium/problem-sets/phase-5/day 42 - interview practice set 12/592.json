{
    "code": 200,
    "data": {
        "body": "<p>Given a row wise sorted matrix A of size <i>N x M, </i>where <i>N </i>and <i>M</i> are always odd, find the median of the matrix.</p>",
        "complete_approach": "",
        "constraints": "<p><i>1 \u2264 N,M \u2264 1000</i><br><i>1 \u2264 A[i] \u2264 10</i><sup>6</sup></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint MedianInMatrix(vector<vector<int>> &a)\n{\n    int n = (int)a.size();\n    int m = (int)a[0].size();\n\n    int l = 1, r = 1e6, ans;\n\n    while (l <= r)\n    {\n        int mid = (l + r) / 2;\n        int cnt = 0;\n\n        for (int i = 0; i < n; i++)\n        {\n            auto it = lower_bound(a[i].begin(), a[i].end(), mid);\n\n            if (it == a[i].begin())\n                continue;\n\n            it--;\n            cnt += it - a[i].begin() + 1;\n        }\n\n        if (cnt <= (n * m - 1) / 2)\n            ans = mid, l = mid + 1;\n        else\n            r = mid - 1;\n    }\n\n    return ans;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n\n    int n, m;\n    cin >> n >> m;\n\n    vector<vector<int>> a(n, vector<int>(m));\n\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            cin >> a[i][j];\n\n    cout << MedianInMatrix(a) << \"\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:46:36.689702+00:00"
        },
        "hints": {
            "hint1": "Binary Search by answer",
            "hint2": "<p>Iterate on all rows and use binary search to count the number of elements less than a given number.</p>",
            "solution_approach": "<p>We use binary search by answer to find the median of the matrix. For a number to be median the count of numbers less than it should be less than or equal to (N x M)/2<i>.</i> So we find the greatest number that satisfies this condition using binary search. To find the count of numbers we iterate row-wise and find the number of elements less than the given number by binary search (<i>lower_bound()</i> method in C++).</p><p><strong>Expected Time Complexity - </strong>O(20 x N x log(M))</p>"
        },
        "id": 592,
        "input_format": "<p>The first line of each test case contains two integers <i>N</i> and <i>M</i> - the dimensions of the matrix.<br>The next <i>N</i> lines contain <i>M</i> integers - the elements of the matrix <i>A</i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>Sorting all the matrix elements gives us [1,<strong><u>2</u></strong>,3] in the first test case.<br>Sorting all the matrix elements gives us [1,1,2,2,<strong><u>3</u></strong>,4,5,5,5] in the second test case.</p>",
        "output_format": "Print the median of the matrix.",
        "samples": [
            {
                "input": "3 1\n3\n2\n1",
                "output": "2"
            },
            {
                "input": "3 3\n1 2 2\n1 3 5\n4 5 5",
                "output": "3"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-AlgoZenith"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nint MedianInMatrix(vector<vector<int>> &a)\n{\n    // Complete the function\n}\n\n<fix>\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n\n    int n, m;\n    cin >> n >> m;\n\n    vector<vector<int>> a(n, vector<int>(m));\n\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            cin >> a[i][j];\n\n    cout << MedianInMatrix(a) << \"\\n\";\n\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "MATMED",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}