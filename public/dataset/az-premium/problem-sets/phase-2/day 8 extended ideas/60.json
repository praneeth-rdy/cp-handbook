{
    "code": 200,
    "data": {
        "body": "<p>Given an array of <i>N</i> integers, find the number of subarrays with at most <i>K</i> distinct elements.</p>",
        "complete_approach": "",
        "constraints": "",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll freq[1000001];\nsigned main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    ll testcases;\n    cin >> testcases;\n    while (testcases--)\n    {\n        ll n, k;\n        cin >> n >> k;\n        ll arr[n];\n        for (ll i = 0; i < n; i++)\n            cin >> arr[i], freq[arr[i]] = 0;\n        ll ans = 0;\n        ll start = 0;\n        ll current = 0;\n        ll currSum = 0;\n        while (current < n)\n        {\n            freq[arr[current]]++;\n            if (freq[arr[current]] == 1)\n                currSum++;\n            while (start <= current and currSum > k)\n            {\n                if (freq[arr[start]] == 1)\n                    currSum--;\n                freq[arr[start]]--;\n                start++;\n            }\n            ans += (current - start + 1);\n            current++;\n        }\n        cout << ans << \"\\n\";\n    }\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:14:36.723574+00:00"
        },
        "hints": {
            "hint1": "If one of our subarray is between [L,R] we can for surely say that for the subarray starting from L+1 our desired subarray will be R' such that R' >= R. This allows us to apply the 2 pointer approach for this problem.",
            "hint2": "We use two pointers, start and current, to keep track of the window. We maintain an array freq to keep track of the frequency of each element in the current window.\n\nFor each subarray check using a frequency array how many distinct elements are there at a particular instant. Whenever we exceed K we make that as our right pointer boundary.",
            "solution_approach": "We loop through the array using current pointer. For each element arr[current], we update its frequency in the freq array. If its frequency becomes 1, we increment currSum.\n\nWe check if currSum is greater than K. If it is, we move the start pointer to the right and decrement the frequency of the element at arr[start] in the freq array. If its frequency becomes $0$, we decrement currSum.\n\nWe update the answer by adding the number of subarrays that end at the current pointer. The number of subarrays is equal to (current - start + 1).\n\nWe continue this process until we have covered the entire array.\n\n**Time Complexity : $O( N )$**"
        },
        "id": 60,
        "input_format": "<p>The first line contains <i>T</i>, the number of test cases <i>(1&lt;=T&lt;=10)</i>.</p><p>The first line contains two space-separated integers <i>N, K</i> where <i>1&lt;=N&lt;=10^5, 0&lt;=K&lt;=10^5</i>.</p><p>Next line contains <i>N</i> space-separated integers <i>(0&lt;=Ai&lt;=1e6)</i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>For each test case print the number of subarrays with at most <i>K</i> distinct elements in a newline.</p>",
        "samples": [
            {
                "input": "5\n3 2\n1 2 3\n3 2\n3 2 2\n5 0\n2 1 0 4 0\n7 3\n1 2 1 0 1 0 2\n10 5\n1 0 7 1 10 2 4 10 1 3",
                "output": "5\n6\n0\n28\n46"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Two Pointers"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Number of Subarray with at most K distinct",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}