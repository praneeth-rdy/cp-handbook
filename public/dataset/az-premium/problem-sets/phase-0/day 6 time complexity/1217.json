{
    "code": 200,
    "data": {
        "body": "Given two numbers $K$ and $S$. Determine how many different values of $X$, $Y$, and $Z$ such that $(0 \\leq X, Y, Z \\leq K)$ and $X + Y + Z = S$.",
        "complete_approach": "",
        "constraints": "$0 \\leq K \\leq 3000$\n$0 \\leq S \\leq 3K$",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n// O(K) time\n// O(1) space\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int k, s;\n    cin >> k >> s;\n    int ans = 0;\n    // to ensure s-z is below 2*k\n    int st = max(0, s - 2 * k);\n    // to ensure s-z is greater than equal to 0\n    int end = min(k, s);\n    for (int z = st; z <= end; z++) // loop for all possible values of x\n    {\n        int rem = s - z;\n        if (rem > k)\n            ans += (2 * k - rem + 1);\n        else\n            ans += (rem + 1);\n    }\n    cout << ans << \"\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\n// O(K) time\n// O(1) space\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        String line = br.readLine();\n        String[] parts = line.trim().split(\"\\\\s+\");\n        int k = Integer.parseInt(parts[0]);\n        int s = Integer.parseInt(parts[1]);\n\n        int ans = 0;\n        // to ensure s - z is below 2 * k\n        int st = Math.max(0, s - 2 * k);\n        // to ensure s - z is greater than equal to 0\n        int end = Math.min(k, s);\n        for (int z = st; z <= end; z++) // loop for all possible values of x\n        {\n            int rem = s - z;\n            if (rem > k)\n                ans += (2 * k - rem + 1);\n            else\n                ans += (rem + 1);\n        }\n        out.println(ans);\n\n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    idx = 0\n    k = int(data[idx])\n    idx += 1\n    s = int(data[idx])\n    idx += 1\n\n    ans = 0\n    # to ensure s - z is below 2 * k\n    st = max(0, s - 2 * k)\n    # to ensure s - z is greater than equal to 0\n    end = min(k, s)\n    for z in range(st, end + 1):  # loop for all possible values of x\n        rem = s - z\n        if rem > k:\n            ans += (2 * k - rem + 1)\n        else:\n            ans += (rem + 1)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:36:17.123202+00:00"
        },
        "hints": {
            "hint1": "If we fix $X$ and $Y$, $Z$ is also fixed. So we need to check for all possibilities of $X$ and $Y$.",
            "hint2": "Consider fixing one of the variables, say $Z$, and calculate the number of ways for $X + Y = S - Z$ where $0 \\leq X, Y \\leq K$.",
            "solution_approach": "We can approach this problem by considering all possible values of $X$, $Y$, and $Z$ within their given ranges and checking if they satisfy the equation $X + Y + Z = S$. However, iterating over all combinations has a time complexity of $O(K^3)$, which is not efficient.\n\nTo optimize, we can fix one variable and compute the number of possible combinations for the other two variables. Here's how:\n\n1. **Fix $Z$**: We iterate $Z$ from $\\max(0, S - 2K)$ to $\\min(K, S)$. For each fixed $Z$, the sum $X + Y = S - Z$ remains constant.\n\n2. **Calculate possible $(X, Y)$ pairs**: For each fixed $Z$, the number of non-negative integers $(X, Y)$ such that $X + Y = S - Z$ and $0 \\leq X, Y \\leq K$ can be computed.\n\n   - If $S - Z \\leq K$, the number of valid $(X, Y)$ pairs is $(S - Z) + 1$.\n   - If $S - Z > K$, the number of valid $(X, Y)$ pairs is $(2K - (S - Z) + 1)$.\n\n3. **Sum up the counts**: We accumulate the number of valid pairs for each value of $Z$ to get the total number of solutions.\n\nBy fixing one variable and efficiently calculating the number of valid pairs for the other two variables, we reduce the time complexity significantly.\n\n**Time Complexity per test case**: $O(K)$\n\n**Space Complexity per test case**: $O(1)$"
        },
        "id": 1217,
        "input_format": "Only one line containing two numbers $K$ and $S$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "**Sample Input 1:**\nWhen $K = 2$ and $S = 1$, the possible values of $(X, Y, Z)$ are:\n- $(1, 0, 0)$\n- $(0, 1, 0)$\n- $(0, 0, 1)$\nThus, there are $3$ solutions.\n**Sample Input 2:**\nWhen $K = 9$ and $S = 4$, the possible values of $(X, Y, Z)$ are:\n- $(0, 0, 4)$\n- $(0, 1, 3)$\n- $(0, 2, 2)$\n- $(0, 3, 1)$\n- $(0, 4, 0)$\n- $(1, 0, 3)$\n- $(1, 1, 2)$\n- $(1, 2, 1)$\n- $(1, 3, 0)$\n- $(2, 0, 2)$\n- $(2, 1, 1)$\n- $(2, 2, 0)$\n- $(3, 0, 1)$\n- $(3, 1, 0)$\n- $(4, 0, 0)$\nThus, there are $15$ solutions.",
        "output_format": "Print the answer required above.",
        "samples": [
            {
                "input": "2 1",
                "output": "3"
            },
            {
                "input": "9 4",
                "output": "15"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Combinatorics",
            "Math",
            "Brute Force"
        ],
        "template_code": [],
        "time_limit_sec": 0.5,
        "title": "Three Numbers",
        "video_editorial_id": 10658
    },
    "details": "Problem Details"
}