{
    "code": 200,
    "data": {
        "body": "",
        "complete_approach": "",
        "constraints": "$-2147483648 \\leq \\text{int} \\leq 2147483647$\n$-2^{63} \\leq \\text{long long} \\leq 2^{63}-1$\n$\\text{char}$: valid ASCII characters\n$\\text{float}$ and $\\text{double}$: According to IEEE 754 standards.",
        "difficulty": 1,
        "editorial_code": [
            {
                "code": "```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n;\n    cin >> n;\n    long long l;\n    cin >> l;\n    char ch;\n    cin >> ch;\n    float f;\n    cin >> f;\n    double d;\n    cin >> d;\n\n    cout << n << \"\\n\"\n         << l << \"\\n\"\n         << ch << \"\\n\"\n         << f << \"\\n\"\n         << d << \"\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            },
            {
                "code": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        String[] data = br.readLine().split(\" \");\n        int idx = 0;\n        \n        int n = Integer.parseInt(data[idx++]);\n        long l = Long.parseLong(data[idx++]);\n        char ch = data[idx++].charAt(0);\n        float f = Float.parseFloat(data[idx++]);\n        double d = Double.parseDouble(data[idx++]);\n        \n        out.println(n);\n        out.println(l);\n        out.println(ch);\n        out.println(f);\n        out.println(d);\n        \n        out.flush();\n        out.close();\n    }\n}\n```",
                "language": "Java"
            },
            {
                "code": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().split()\n    idx = 0\n\n    n = int(data[idx])\n    idx += 1\n    l = int(data[idx])\n    idx += 1\n    ch = data[idx]\n    idx += 1\n    f = float(data[idx])\n    idx += 1\n    d = float(data[idx])\n    idx += 1\n\n    print(n)\n    print(l)\n    print(ch)\n    print(f)\n    print(d)\n\nif __name__ == \"__main__\":\n    main()\n```",
                "language": "Python3"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:42:09.705855+00:00"
        },
        "hints": {
            "hint1": "Define variables of each type and take input in order.",
            "hint2": "Print each variable on a new line as required in the output format.",
            "solution_approach": "To solve this problem, follow these steps:\n\n- Define variables for each of the data types: $\\text{int}$, $\\text{long long}$, $\\text{char}$, $\\text{float}$, and $\\text{double}$.\n\n- Read the input values in the order given and store them in the respective variables.\n\n- Print each variable on a new line, in the same order as the input.\n\n- Be cautious of the precision and size limitations of each data type. For $\\text{float}$ and $\\text{double}$, precision limitations may cause slight differences in the output due to rounding.\n\n**Time Complexity per test case**: $O(1)$\n\n**Space Complexity per test case**: $O(1)$"
        },
        "id": 1167,
        "input_format": "Only one line containing the following space-separated values: $\\textbf{int}$, $\\textbf{long long}$, $\\textbf{char}$, $\\textbf{float}$, and $\\textbf{double}$ respectively.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For the first sample, the double value input is $14049.30493$, but due to precision limitations of double (8 bytes), it gets rounded off to $14049.3$ in the output.\nIn the third sample input, the double value input is $77.77777$, but due to precision limitations, it gets rounded off to $77.7778$ in the output.",
        "output_format": "Print each element on a $\\textbf{new line}$ in the same order it was received as input.",
        "samples": [
            {
                "input": "3 12345678912345 a 334.23 14049.30493",
                "output": "3\n12345678912345\na\n334.23\n14049.3"
            },
            {
                "input": "7 777777777777 s 777.77 77.77777",
                "output": "7\n777777777777\ns\n777.77\n77.7778"
            },
            {
                "input": "7 777777777777 s 777.77 7.77777",
                "output": "7\n777777777777\ns\n777.77\n7.77777"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Implementation"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Basic Data Types",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}