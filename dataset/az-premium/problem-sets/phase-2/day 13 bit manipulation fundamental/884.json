{
    "code": 200,
    "data": {
        "body": "<p>A state with <strong>n</strong> flags of ON or OFF can be represented by a sequence of bits where <strong>0,1,...,n\u22121</strong> -th flag corresponds to 1 (ON) or 0 (OFF). The state can be managed by the corresponding decimal integer because the sequence of bits is a binary representation where each bit is 0 or 1.</p><p>Given a sequence of bits with <strong>60 flags</strong> that represent a state, perform the following operations. Note that each flag of the bits is initialized by OFF.</p><ol><li>test(i): Print 1 if <strong>i<sup>th</sup></strong> flag is ON, otherwise 0.</li><li>set(i): Set <strong>i<sup>th</sup></strong> flag to ON</li><li>clear(i): Set <strong>i<sup>th</sup></strong> flag to OFF</li><li>flip(i): Inverse <strong>i<sup>th</sup></strong> flag</li><li>all: Print 1 if all flags are ON, otherwise 0</li><li>any: Print 1 if at least one flag is ON, otherwise 0</li><li>none: Print 1 if all flags are OFF, otherwise 0</li><li>count: Print the number of ON flags</li><li>val: Print the decimal value of the state</li></ol>",
        "complete_approach": "",
        "constraints": "<ul><li>1 \u2264 q \u2264 200,000</li><li>0 \u2264 i &lt; 60</li></ul>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nvoid solve() {\n    int q;\n    cin >> q;\n    ll val = 0;\n    while (q--) {\n        int t, i;\n        cin >> t;\n        //t++;\n        if (t == 1) {\n            cin >> i;\n            cout << ((val >> i) & 1) << endl;\n        }\n        if (t == 2) {\n            cin >> i;\n            val |= (1LL << i);\n        }\n        if (t == 3) {\n            cin >> i;\n            val &= (~(1LL << i));\n        }\n        if (t == 4) {\n            cin >> i;\n            val ^= (1LL << i);\n        }\n        if (t == 5) {\n            if (__builtin_popcountll(val) == 60) {\n                cout << 1 << endl;\n            }\n            else {\n                cout << 0 << endl;\n            }\n        }\n        if (t == 6) {\n            if (__builtin_popcountll(val) >= 1) {\n                cout << 1 << endl;\n            }\n            else {\n                cout << 0 << endl;\n            }\n        }\n        if (t == 7) {\n            if (__builtin_popcountll(val) == 0) {\n                cout << 1 << endl;\n            }\n            else {\n                cout << 0 << endl;\n            }\n        }\n        if (t == 8) {\n            cout << __builtin_popcountll(val) << endl;\n        }\n        if (t == 9) {\n            cout << val << endl;\n        }\n    }\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n\n    int t = 1;\n    // int i = 1;\n    // cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```\n",
                "language": "C++14"
            },
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nvoid solve() {\n    std::bitset<64> b(0);\n    int q, op, x;\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> op;\n        op--;\n        if (op == 0) {\n            std::cin >> x;\n            std::cout << b[x] << \"\\n\";\n        }\n        else if (op == 1) {\n            std::cin >> x;\n            b[x] = 1;\n        }\n        else if (op == 2) {\n            std::cin >> x;\n            b[x] = 0;\n        }\n        else if (op == 3) {\n            std::cin >> x;\n            b[x] = ~b[x];\n        }\n        else if (op == 4) {\n            std::cout << b.all() << \"\\n\";\n        }\n        else if (op == 5) {\n            std::cout << b.any() << \"\\n\";\n        }\n        else if (op == 6) {\n            std::cout << b.none() << \"\\n\";\n        }\n        else if (op == 7) {\n            std::cout << b.count() << \"\\n\";\n        }\n        else {\n            std::cout << b.to_ullong() << \"\\n\";\n        }\n    }\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n\n    int t = 1;\n    // int i = 1;\n    // cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Editorial code is not passing the Sample cases.",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:32:57.102547+00:00"
        },
        "hints": {
            "hint1": "The problem can be solved by using bit manipulation techniques. We need to manipulate bits to represent the state of flags, and then perform the required operations on them.",
            "hint2": "To represent the state of the flags, we can use a binary number, where each bit of the number corresponds to the state of a flag. We can then use bit manipulation operations to manipulate the state of the flags and perform the required operations.",
            "solution_approach": "* We can represent the state of the flags as a binary number, where each bit of the number corresponds to the state of a flag. To perform the required operations, we can use the following bit manipulation operations:\n\n* To test if the i-th flag is ON, we can use the bitwise AND operation with a mask that has only the i-th bit set to 1. If the result is non-zero, then the i-th flag is ON, otherwise it is OFF.\n\n* To set the i-th flag to ON, we can use the bitwise OR operation with a mask that has only the i-th bit set to 1.\n\n* To set the i-th flag to OFF, we can use the bitwise AND operation with a mask that has only the i-th bit set to 0.\n\n* To flip the state of the i-th flag, we can use the bitwise XOR operation with a mask that has only the i-th bit set to 1.\n\n* To check if all flags are ON, we can use the _\\_builtin\\_popcountll() function, which returns the number of 1 bits in a 64-bit integer. If the result is equal to 60, then all flags are ON.\n\n* To check if at least one flag is ON, we can use the _\\_builtin\\_popcountll() function again. If the result is greater than or equal to 1, then at least one flag is ON.\n\n* To check if all flags are OFF, we can use the _\\_builtin\\_popcountll() function again. If the result is equal to 0, then all flags are OFF.\n\n* To count the number of ON flags, we can use the _\\_builtin\\_popcountll() function again.\n\n* To get the decimal value of the state, we can simply print the value of the binary number as a decimal number.\n\n**Time Complexity**:\nThe time complexity of the solution is O(q), where q is the number of queries. This is because each query requires only constant time operations."
        },
        "id": 884,
        "input_format": "<p>The input is given in the following format.</p><pre><code class=\"language-plaintext\">q\nquery1\nquery2\n:\nqueryq</code></pre><p>Each query <strong>query<sub>j</sub></strong> is given in the following format: either only <strong>t</strong> &nbsp;or &nbsp;<strong>t</strong> &nbsp;<strong>i &nbsp;</strong>, where <strong>t</strong> is the query type.</p><p>The first digit <strong>t = 1, 2, 3 ,...,8, 9</strong> represents the operation test(i), set(i), clear(i), flip(i), all, any, none, count or val respectively.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>Print the result in a line for each test, all, any, none, count and val operation.</p>",
        "samples": [
            {
                "input": "14\n2 0\n2 1\n2 2\n3 1\n1 0\n1 1\n1 2\n1 3\n4 3\n5\n6\n7\n8\n9",
                "output": "1\n0\n1\n0\n0\n1\n0\n3\n13"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Bit Manipulation"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Bit Magic I",
        "video_editorial_id": 8234
    },
    "details": "Problem Details"
}