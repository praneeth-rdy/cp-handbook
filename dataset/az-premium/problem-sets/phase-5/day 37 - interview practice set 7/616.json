{
    "code": 200,
    "data": {
        "body": "<p>There are <strong>n</strong> stones. Initially, you are at stone 1 and you want to reach stone n. You can jump from one stone to another. The maximum length of the jump that you can make from each stone is given in input as an array of <strong>n </strong>integers.<br>For example, if the maximum length of jump you can make from stone 1 is 2, you can jump to stone 2 and stone 3 from stone 1. You cannot jump to stone 4 from stone 1 because the length of this jump will be 3 which is greater than the maximum jump allowed from stone 1.<br>You need to determine if you will be able to reach the last stone <strong>n</strong> by any set of valid jumps.</p>",
        "complete_approach": "",
        "constraints": "<pre><code class=\"language-plaintext\">1 &lt;= n &lt;= 100000\n0 &lt;= jump[i] &lt;= 100000</code></pre>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool isReach(vector<int> jump)\n{\n\tint n = (int)jump.size();\n\tint reach = 1; // maximum stone that can be reached\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (reach >= i)\n\t\t{\n\t\t\treach = max(reach, jump[i - 1] + i);\n\t\t}\n\t}\n\treturn reach >= n;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\t\n\tint n;\n\tcin >> n;\n\tvector<int> jump(n);\n\tfor (auto &i : jump)\n\t\tcin >> i;\n\n\tif (isReach(jump))\n\t\tcout << \"Yes\\n\";\n\telse\n\t\tcout << \"No\\n\";\n\treturn 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:19:07.553880+00:00"
        },
        "hints": {
            "hint1": "\nDo we ever need to jump backwards?",
            "hint2": "If we can reach a stone i we can reach all stones less than i.",
            "solution_approach": "<p>We maintain a variable <strong>reach</strong> that stores the maximum stone that we can reach. If we can reach a stone x, we can reach all stones &lt; x because the length of jumps required to reach those cells will always be smaller. So we never need to jump backward.<br>We iterate from the first stone to the last one and maintain the maximum stone that can be reached. If we are at stone <strong>i</strong> and <strong>reach &gt;= i</strong> means that we can reach stone <strong>i</strong>. So at index <strong>i</strong> we can update <strong>reach</strong> with the following equation:</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <strong>reach = max(reach, i + jump[i])</strong></p><p>If after traversing all the stones <strong>reach &gt;= n</strong>, then we can reach the last stone.</p>"
        },
        "id": 616,
        "input_format": "<p>The first line contains a single integer <strong>n</strong>.<br>The second line contains <strong>n</strong> space-separated integers denoting the length of the maximum jump allowed for each stone.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<ol><li>Jump from stone 1 to stone 3 and then to stone 6.</li><li>No matter what jumps you make, you will get stuck at stone 4 and never reach stone 6.</li></ol>",
        "output_format": "<p>Print \u2018<strong>Yes</strong>\u2019 if you can reach the last stone and \u2018<strong>No</strong>\u2019 otherwise.</p>",
        "samples": [
            {
                "input": "6\n2 1 3 1 1 1",
                "output": "Yes"
            },
            {
                "input": "6\n3 1 1 0 1 1",
                "output": "No"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nbool isReach(vector<int> jump)\n{\n\t// Complete the function\n}\n\n<fix>\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\t\n\tint n;\n\tcin >> n;\n\tvector<int> jump(n);\n\tfor (auto &i : jump)\n\t\tcin >> i;\n\n\tif (isReach(jump))\n\t\tcout << \"Yes\\n\";\n\telse\n\t\tcout << \"No\\n\";\n\treturn 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Stone Jumps",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}