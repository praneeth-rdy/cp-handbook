{
    "code": 200,
    "data": {
        "body": "<p><span style=\"background-color:transparent;color:#000000;\">You have an empty array and can perform the following operations on it:</span></p><ol><li><span style=\"background-color:transparent;color:#000000;\">insert x - add integer x to the array</span></li><li><span style=\"background-color:transparent;color:#000000;\">remove x - remove integer x from the array. </span>It's<span style=\"background-color:transparent;color:#000000;\"> g</span>uaranteed<span style=\"background-color:transparent;color:#000000;\"> the element present in it.</span></li><li><span style=\"background-color:transparent;color:#000000;\">getMean - find the mean of elements currently </span>presents<span style=\"background-color:transparent;color:#000000;\"> in the array.</span></li><li><span style=\"background-color:transparent;color:#000000;\">getMedian - find the median of elements currently present in the array,&nbsp; if </span>the <span style=\"background-color:transparent;color:#000000;\">count of the numbers is even, take the average of the two middle elements.</span></li><li><span style=\"background-color:transparent;color:#000000;\">getMode - find the mode of elements currently present in the array, if there is more than one potential element, assume that the mode is the smaller of all.</span></li></ol><p>If the array is empty at the point a query is asked about a metric(mean, median, mode), print -1.</p><p><span style=\"background-color:transparent;color:#000000;\">If any of the answers for the query is a fraction, let's say, P / Q in reduced form, the return the number (P*Q<sup>-1</sup>) Modulo 1000000007.</span></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou have an empty array and can perform the following operations on it:\n\n1. **`insert x`** - Add integer $x$ to the array.\n2. **`remove x`** - Remove integer $x$ from the array.  \n   *It is guaranteed that the element is present in the array.*\n3. **`getMean`** - Find the mean of elements currently present in the array.\n4. **`getMedian`** - Find the median of elements currently present in the array.  \n   *If the count of the numbers is even, take the average of the two middle elements.*\n5. **`getMode`** - Find the mode of elements currently present in the array.  \n   *If there is more than one potential mode, assume the mode is the smallest of all.*\n\n---\n\nIf the array is empty at the point a query is asked about a metric (**mean**, **median**, or **mode**), print `-1`.\n\n---\n\n\nIf any of the answers for the query is a fraction, let's say, $\\frac{P}{Q}$ in reduced form, return the number:\n\n$\n(P \\times Q^{-1}) \\mod 1000000007\n$\n\nwhere $Q^{-1}$ is the modular multiplicative inverse of $Q$ modulo $1000000007$.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 10^5$  \n$1 \\leq Q \\leq 10^5$  \n$1 \\leq x \\leq 10^9$  \nIt is guaranteed that the sum of $Q$ over all test cases does not exceed $10^5$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace __gnu_pbds;\ntypedef tree <pair<int,int>, null_type, less<>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\n/*\n    order_of_key (k)\n    find_by_order(k)\n*/\n\n\ninline void add(int &a, int b) {\n  a += b;\n  if (a >= mod) a -= mod;\n}\n\ninline void sub(int &a, int b) {\n  a -= b;\n  if (a < 0) a += mod;\n}\n\ninline int mul(int a, int b) {\n  return (int) ((long long) a * b % mod);\n}\n\ninline int power(int a, long long b) {\n  int res = 1;\n  while (b > 0) {\n    if (b & 1) {\n      res = mul(res, a);\n    }\n    a = mul(a, a);\n    b >>= 1;\n  }\n  return res;\n}\n\ninline int inv(int a) {\n  a %= mod;\n  if (a < 0) a += mod;\n  int b = mod, u = 0, v = 1;\n  while (a) {\n    int t = b / a;\n    b -= t * a; swap(a, b);\n    u -= t * v; swap(u, v);\n  }\n  assert(b == 1);\n  if (u < 0) u += mod;\n  return u;\n}\n\nstruct Mean {\n    int sum, cnt;\n\n    Mean() : sum(0), cnt(0) {};\n\n    void insert(int x) {\n        add(sum, x);\n        add(cnt, 1);\n    }\n\n    void remove(int x) {\n        sub(sum, x);\n        sub(cnt, 1);\n    }\n\n    int GetMean() const {\n        if (!cnt) return -1;\n        return mul(sum, inv(cnt));\n    }\n};\n\nstruct Mode {\n    set<pair<int,int>> s;\n    map<int,int> M;\n\n    void insert(int x) {\n        M[x]++;\n        if (M[x] > 1) s.erase(s.find({-(M[x] - 1), x}));\n        s.insert({-M[x], x});\n    }\n\n    void remove(int x) {\n        s.erase(s.find({-M[x], x}));\n        M[x]--;\n        if (M[x]) s.insert({-M[x], x});\n    }\n\n    int GetMode() {\n        if (s.empty()) return -1;\n        return s.begin()->second;\n    }\n};\n\nstruct Median {\n    ordered_set s;\n    map<int,int> M;\n\n    void insert(int x) {\n        M[x]++;\n        s.insert({x, M[x]});\n    }\n\n    void remove(int x) {\n        s.erase(s.find({x, M[x]}));\n        M[x]--;\n    }\n\n    int GetMedian() {\n        if (s.empty()) return -1;\n        int n = (int)s.size();\n        if (n % 2 == 0) {\n            int sum = s.find_by_order(n / 2 - 1)->first;\n            add(sum, s.find_by_order(n / 2)->first);\n            return mul(sum, inv(2));\n        }\n        return s.find_by_order(n / 2)->first;\n    }\n};\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int t;\n    cin >> t;\n\n    while (t--) {\n        int q;\n        cin >> q;\n\n        Mean mean;\n        Mode mode;\n        Median median;\n\n        while (q--) {\n            string s;\n            cin >> s;\n\n            if (s == \"insert\") {\n                int x;\n                cin >> x;\n                mean.insert(x);\n                mode.insert(x);\n                median.insert(x);\n            } else if (s == \"remove\") {\n                int x;\n                cin >> x;\n                mean.remove(x);\n                mode.remove(x);\n                median.remove(x);\n            } else if (s == \"getMean\") {\n                cout << mean.GetMean() << \"\\n\";\n            } else if (s == \"getMode\") {\n                cout << mode.GetMode() << \"\\n\";\n            } else if (s == \"getMedian\") {\n                cout << median.GetMedian() << \"\\n\";\n            }\n        }\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:15:40.642652+00:00"
        },
        "hints": {
            "hint1": "Mean  = sum of all numbers/count of numbers\n\nMedian = Middle element if the array was sorted, if count of the numbers is even, take the average of the two middle elements.\n\nMode = Maximum occurring element, if there is more than one element,  assume that the mode is the smaller of the two.",
            "hint2": "",
            "solution_approach": "For mean, keep track of the sum of the numbers along with the count of numbers in two separate variables.\n\nFor median, you can use pair<int, int> in the indexed set to get multiple elements with the same value in the set and hence get the middle values easily.\n\nFor mode, store the count of each number in a map and use set of pair to find the maximum occurring number.\n\nTime Complexity per test case: O(Q log Q)"
        },
        "id": 391,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\nThe first line of each test case contains one integer Q - the number of queries. \nEach of the next Q lines contains a string S and integer X or just a string S - description of the query.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "1. Array becomes: [4]\n2. Array becomes [3, 4]\n3. Array becomes [3, 4, 5]\n4. Mean = (3+4+5) / 3 = 4\n5. Median = 4 (middle element)\n6. Mode = 3 (since it is smallest in value)\n7. Array becomes [3, 4, 4, 5]\n8. Array becomes [4, 4, 5]\n9. Array becomes [4, 4, 5, 5]\n10. Mean = (4+4+5+5)/4 = 4.5 (=500000008 in mod domain)\n11. Median = (4+5)/2 = 4.5 (average of the two middle elements)\n12. Mode = 4 (since it is smallest in value)",
        "output_format": "For each test case, print the answer for the queries.",
        "samples": [
            {
                "input": "1\n12\ninsert 4\ninsert 3\ninsert 5\ngetMean\ngetMedian\ngetMode\ninsert 4\nremove 3\ninsert 5\ngetMean\ngetMedian\ngetMode",
                "output": "4\n4\n3\n500000008\n500000008\n4"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Microsoft"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Running Mean, Median and Mode AZ101",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}