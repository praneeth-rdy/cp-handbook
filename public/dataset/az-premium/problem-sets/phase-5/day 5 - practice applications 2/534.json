{
    "code": 200,
    "data": {
        "body": "<p>Given a singly linked list and an integer <i>K</i>, reverse the nodes of the list <i>K</i> at a time and returns its head.</p><p>It's guaranteed that the <i>K </i>is divisible by the length of the linked list.</p><p>Complete the function</p><pre><code class=\"language-plaintext\">ListNode* reverseList(ListNode* head, int K)</code></pre>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>N</i> \u2264 10<sup>6</sup><br>1 \u2264 <i>K</i> \u2264 <i>N</i><br>0 \u2264 Values stored in nodes \u2264 10<sup>9</sup><br>It's guaranteed that the <i>N</i> is divisible by <i>K</i>.</p>",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nListNode* reverseList(ListNode* head, int K) {\n    ListNode *cur = head, *prev = head;\n    head = head -> next;\n    for(int i = 1; i < K; i++)\n    {\n        if(head == NULL) break;\n        ListNode *temp = head -> next;\n        head -> next = prev;\n        prev = head;\n        head = temp;\n    }\n    if(head == NULL) \n    {\n        cur -> next = NULL;\n        return prev;\n    }\n    cur -> next = reverseList(head, K);\n    return prev;\n}\n\nListNode* GetList(vector<int> &num) {\n    ListNode* head = nullptr;\n\n    if(num.empty()) {\n        return head;\n    }\n\n    ListNode* cur = head;\n    \n    for(int i  = 0; i < (int)num.size(); i++) {\n        ListNode* temp = new ListNode(num[i]);\n        if(!cur) {\n            cur = temp;\n            head = cur;\n        }\n        else {\n            cur->next = temp;\n            cur = temp;\n        }\n    }\n    \n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    vector<int> num;\n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        num.push_back(x);\n    }\n\n    int K;\n    cin >> K;\n\n    ListNode* head = GetList(num);\n\n    head = reverseList(head, K);\n\n    while(head) {\n        cout << head->val << \" \";\n        head = head->next;\n    }\n    cout << \"\\n\";\n    \n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Solution Approach is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:18:05.078922+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": ""
        },
        "id": 534,
        "input_format": "<p>The first line of input contains <i>N </i>- the length of the linked list.<br>The second line contains <i>N </i>space-separated integers denoting the sequence of elements in the linked list.<br>The third line contains an integer <i>K.</i></p><p>The following functions read the input</p><pre><code class=\"language-plaintext\">ListNode* GetList(vector&lt;int&gt; &amp;num)</code></pre>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "",
        "samples": [
            {
                "input": "6\n1 2 3 4 5 6\n3",
                "output": "3 2 1 6 5 4"
            },
            {
                "input": "3\n1 3 2\n3",
                "output": "2 3 1"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Linked List",
            "Frequently Asked Questions",
            "company-Paytm"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n</fix>\n\nListNode* reverseList(ListNode* head, int K) {\n    //Complete the function\n}\n\n<fix>\nListNode* GetList(vector<int> &num) {\n    ListNode* head = nullptr;\n\n    if(num.empty()) {\n        return head;\n    }\n\n    ListNode* cur = head;\n    \n    for(int i  = 0; i < (int)num.size(); i++) {\n        ListNode* temp = new ListNode(num[i]);\n        if(!cur) {\n            cur = temp;\n            head = cur;\n        }\n        else {\n            cur->next = temp;\n            cur = temp;\n        }\n    }\n    \n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    vector<int> num;\n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        num.push_back(x);\n    }\n\n    int K;\n    cin >> K;\n\n    ListNode* head = GetList(num);\n\n    head = reverseList(head, K);\n\n    while(head) {\n        cout << head->val << \" \";\n        head = head->next;\n    }\n    cout << \"\\n\";\n    \n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Reverse List - hard version",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}