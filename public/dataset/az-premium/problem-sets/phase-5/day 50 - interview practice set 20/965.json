{
    "code": 200,
    "data": {
        "body": "You are given $k$ lists containing integers. Each list is sorted in non-decreasing order. You need to find the smallest range that includes at least one number from each of the $k$ lists.\n\n**Note:-** We define the range $[a, b]$ is smaller than range $[c, d]$ if $b - a < d - c$ or $a < c$ if $b - a == d - c$.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 100$.\n$1 \\leq k \\leq 1000$.\n$1 \\leq n \\leq 50$.\n$-10^{5} \\leq list[i][j] \\leq 10^{5}$.\n\nIn each list, all integers are unique and are in non-decreasing order.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nvector<int> smallestRange(vector<vector<int>>& nums) {\n    int k = nums.size(), ans = 1e9;\n    pair<int, int> range = { -1e9, 1e9};\n    vector<int> ptr(k, 1);\n    multiset<array<int, 2>> s;\n    for (int i = 0; i < k; i++)s.insert({nums[i][0], i});\n    while (1) {\n        auto x = *s.begin(), y = *s.rbegin();\n        if (ans > y[0] - x[0])ans = y[0] - x[0], range = {x[0], y[0]};\n        else if (ans == y[0] - x[0])range = min(range, {x[0], y[0]});\n        if (ptr[x[1]] == nums[x[1]].size())break;\n        s.erase(s.find(x));\n        s.insert({nums[x[1]][ptr[x[1]]], x[1]});\n        ptr[x[1]]++;\n    }\n    return {range.first, range.second};\n}\nvoid solve() {\n    int k;\n    cin >> k;\n    vector<vector<int>> v;\n    while (k--) {\n        int n;\n        cin >> n;\n        vector<int> t;\n        for (int i = 0; i < n; i++) {\n            int x;\n            cin >> x;\n            t.push_back(x);\n        }\n        v.push_back(t);\n    }\n    auto ans = smallestRange(v);\n    cout << ans[0] << \" \" << ans[1] << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:28:23.782609+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "#### Algorithm :  \n\n1. Create an Min heap to store $k$ elements, one from each array and a variable minrange initialized to a maximum value and also keep a variable max to store the maximum integer.\n2. Initially put the first element of each element from each list and store the maximum value in max.\n3. Repeat the following steps until atleast one list exhausts : \n    -   To find the minimum value or min, use the top or root of the Min heap which is the minimum element.\n    -   Now update the minrange if current (max-min) is less than minrange.\n    -   Remove the top or root element from priority queue and insert the next element from the list which contains the min element and update the max with the new element inserted.\n\n#### Complexity Analysis: \n**Time complexity :** $O(n * k *log k)$.\n\nTo find the maximum and minimum in an Min Heap of length k the time required is $O(log k)$, and to traverse all the k arrays of length $n$ (in worst case), the time complexity is $O(n*k)$, then the total time complexity is $O(n * k *log k)$.\n\n**Space complexity:** $O(k)$.\n\nThe priority queue will store k elements so the space complexity is $O(k)$."
        },
        "id": 965,
        "input_format": "The first line contains $T$- the number of test cases.\nThe First line of each test case contains the integer $k$ - number of lists.\nThe next $k$ lines of each test case will contain information regarding the $k$ lists, where for each line, the first integer $n$ will denote the size of the list followed by $n$ integers belonging to that list.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, Output the smallest range that includes at least one number from each of the $k$ lists on a newline.",
        "samples": [
            {
                "input": "4\n3\n5 -2 7 9 12 15\n5 0 8 10 14 20\n6 -1 6 12 16 30 50\n3\n2 4 7\n2 1 2\n2 20 40\n3\n5 4 10 15 24 26\n4 0 9 12 20\n4 5 18 22 30\n3\n3 1 2 3\n3 1 2 3\n3 1 2 3\n",
                "output": "-2 0\n2 20\n20 24\n1 1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-AlgoZenith"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "K Lists Range",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}