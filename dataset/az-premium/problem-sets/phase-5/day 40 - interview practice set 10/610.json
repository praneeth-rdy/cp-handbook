{
    "code": 200,
    "data": {
        "body": "You are given an **n x n** 2-D matrix as input. You need to rotate the matrix 90 degrees in the clockwise direction. Print the resultant matrix.\nTry to do the rotation in place, i.e, in constant extra space.",
        "complete_approach": "",
        "constraints": "<pre><code class=\"language-plaintext\">1 &lt;= n &lt;= 1000\n-1000 &lt;= v[i][j] &lt;= 1000</code></pre>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid RotateMatrix(vector<vector<int>> &v)\n{\n    int n = (int)v.size();\n    for (int i = 0; i < (n + 1) / 2; i++)\n    {\n        for (int j = 0; j < n / 2; j++)\n        {\n            int temp = v[n - 1 - j][i];\n            v[n - 1 - j][i] = v[n - i - 1][n - j - 1];\n            v[n - i - 1][n - j - 1] = v[j][n - i - 1];\n            v[j][n - i - 1] = v[i][j];\n            v[i][j] = temp;\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    vector<vector<int>> v(n, vector<int>(n));\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n            cin >> v[i][j];\n    }\n\n    RotateMatrix(v);\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n            cout << v[i][j] << \" \";\n        cout << \"\\n\";\n    }\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:19:05.791878+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "<p>We observe that the cells move in groups of 4 after the matrix is rotated 90 degrees in the clockwise direction.<br>Those four cells are:</p><ol><li>v(i, j)</li><li>v(n-1-i, j)</li><li>v(n-1-i, n-1-j)</li><li>v(i, n-j)</li></ol>"
        },
        "id": 610,
        "input_format": "The first line of input contains the length of the grid n. Then **n** lines follow, each line containing n spaced integers representing the input matrix.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "We rotate the input matrix by 90 degrees in the clockwise direction.",
        "output_format": "Print the resultant matrix obtained by rotating the given matrix.",
        "samples": [
            {
                "input": "3\n1 2 3\n4 5 6\n7 8 9",
                "output": "7 4 1\n8 5 2\n9 6 3"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nvoid RotateMatrix(vector<vector<int>> &v)\n{\n    // Complete the function\n}\n\n<fix>\nint main()\n{\n    int n;\n    cin >> n;\n\n    vector<vector<int>> v(n, vector<int>(n));\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n            cin >> v[i][j];\n    }\n\n    RotateMatrix(v);\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n            cout << v[i][j] << \" \";\n        cout << \"\\n\";\n    }\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Matrix Rotation",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}