{
    "code": 200,
    "data": {
        "body": "Given two strings $S$ and $T$, find length of the shortest subsequence in $S$ which is not a subsequence in $T$. If no such subsequence is possible, return $-1$. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.",
        "complete_approach": "",
        "constraints": "$1 \\leq t \\leq 100$\n$1 \\leq |S| \\leq 1000$\n$1 \\leq |T| \\leq 1000$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nstring s1, s2;\nint n, m;\nint dp[1001][1001], pre[1001][1001];\nint rec(int i, int j) {\n    if (i == -1)return 1e9;\n    if (j == -1)return 1;\n    auto &ans = dp[i][j];\n    if (ans != -1)return ans;\n    ans = rec(i - 1, j);\n    if (pre[i][j] == -1)ans = 1;\n    else ans = min(ans, 1 + rec(i - 1, pre[i][j] - 1));\n    return ans;\n}\nvoid solve() {\n    cin >> s1 >> s2;\n    n = s1.size(), m = s2.size();\n    memset(dp, -1, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        int p = -1;\n        for (int j = 0; j < m; j++) {\n            if (s1[i] == s2[j])p = j;\n            pre[i][j] = p;\n        }\n    }\n    int ans = rec(n - 1, m - 1);\n    if (ans > n)ans = -1;\n    cout << ans << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n\n\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:42:39.758347+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "We establish the relationship between the sub problems and the problem at hand. Let $L(i, j)$ be the length of the shortest subsequence that is in $S[1..i]$ that is not in $T[1..j]$. Here we have the following relationship:\n$L(i, j) =$\n1. If letter $S[i]$ is nowhere to be found in $T[1..j]$, then $L(i,j) = 1$.\n2. Otherwise, we have two cases:\n    2.1. $S[i]$ is in the shortest subsequence. We find $k$, the most immediate index in $T[1..j]$ where $T[k] == S[i]$. Then $L(i, j) = 1 + L(i-1, k-1)$.\n    2.2 $S[i]$ is not in the shortest subsequence. Then $L(i, j) = L(i-1, j)$.\n    We pick whichever is lower.\n\n**Time Complexity** : $O(N^{2})$ per test case."
        },
        "id": 920,
        "input_format": "First-line contains $t$ - the number of test cases.\nThe first line of each test case contains the string $S$.\nThe Second-line of each test case contains the string $T$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "for first test, one of the shortest uncommon subsequence is \"banna\".",
        "output_format": "For each test case, output the length of the shortest subsequence in $S$ which is not a subsequence in $T$. If no such subsequence is possible, output $-1$.",
        "samples": [
            {
                "input": "3\nbanana \nanbnaanbaan\naaa\na\naba\nabaa\n",
                "output": "5\n2\n-1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Agoda"
        ],
        "template_code": [],
        "time_limit_sec": 5.0,
        "title": "Uncommon Subsequences",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}