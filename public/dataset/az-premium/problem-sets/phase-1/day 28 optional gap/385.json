{
    "code": 200,
    "data": {
        "body": "<p>You recently learnt to use the C++ STL deque and decided to play a game on it. You are given a deque with N elements. You take the first two elements of the deque, pop them and push the larger of the two in the front and the smaller at the back of the deque. You are given Q queries, asking the first two elements of the deque you will take on the X-th operation.&nbsp;</p>",
        "complete_approach": "",
        "constraints": "1 \u2264 $T$ \u2264 $10^5$  \n2 \u2264 $N$ \u2264 $10^5$  \n0 \u2264 $Q$ \u2264 $10^5$  \n0 \u2264 $A_i$ \u2264 $10^9$  \n1 \u2264 $X_i$ \u2264 $10^{18}$  \n\nIt is guaranteed that the sum of $N$ and the sum of $Q$ over all test cases does not exceed $10^6$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define int long long\n\nsigned main() {\n    IOS\n    int t;\n    cin >> t;\n    while (t--) {\n        int n, q;\n        cin >> n >> q;\n        int m = 0;\n        deque<int> d;\n        for (int i = 0; i < n; ++i) {\n            int x;\n            cin >> x;\n            d.push_back(x);\n            m = max(m, x);\n        }\n        int j = 0;\n        for (int i = 0; i < n; ++i) {\n            if(d[i] == m) {\n                j = i;\n                break;\n            }\n        }\n        vector<pair<int, int>> v;\n        v.push_back({0, 0});\n        for (int i = 0; i <= j; ++i) {\n            int a = d.front();\n            d.pop_front();\n            int b = d.front();\n            d.pop_front();\n            v.push_back({a, b});\n            if(a > b) {\n                d.push_front(a);\n                d.push_back(b);\n            }\n            else {\n                d.push_front(b);\n                d.push_back(a);\n            }\n        }\n        d.pop_front();\n        n--;\n        while (q--) {\n            int x;\n            cin >> x;\n            if(x < v.size()) {\n                cout << v[x].first << \" \" << v[x].second << \"\\n\";\n            }\n            else {\n                cout << m << \" \" << d[(x - v.size())%n] << \"\\n\";\n            }\n        }\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:25:30.339570+00:00"
        },
        "hints": {
            "hint1": "If you get the largest element in the deque at the first position, the first position will remain the same after the operation. The second element will go to the back of the deque.",
            "hint2": "",
            "solution_approach": "Find the largest element of the deque, if a query is given before the largest element can come to the first position, you can find it manually by storing the answer in a vector. Otherwise, the answer will change in cycles of size N-1 where N is the size of deque.\n\nTime Complexity per test case: O(N + Q)"
        },
        "id": 385,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\n\nThe first line of each test case contains two space-separated integers N Q - the number of elements in the deque and the number of queries.\n\nThe second line of each test case contains N space-separated integers.\n\nEach of the next Q lines contain a single integer X.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For the first test case, in operation 1, you take 1 and 2\n\nFor the second test case, in operation 1, you take 1 and 3, deque becomes [3, 4, 4, 1]\n\nIn operation 2, you take 3 and 4, deque becomes [4, 4, 1, 3]\n\nIn operation 3, you take 4 and 4, deque becomes [4, 1, 3, 4]\n\nIn operation 4, you take 4 and 1, deque becomes [4, 3, 4, 1]",
        "output_format": "For each test case, print the first two elements of the deque you will take on the X-th operation for each query. They should be printed in the order in which they will be pulled out of the deque.",
        "samples": [
            {
                "input": "2\n2 1\n1 2\n1\n4 4\n1 3 4 4\n1\n2\n3\n4\n",
                "output": "1 2\n1 3\n3 4\n4 4\n4 1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Game on Deque AZ101",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}