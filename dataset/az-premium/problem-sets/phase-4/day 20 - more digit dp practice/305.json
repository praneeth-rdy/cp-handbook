{
    "code": 200,
    "data": {
        "body": "You are given two integers L and R. You have to pick any two integers(they may be the same) in the range L to R(both inclusive) such that the xor of those two integers is maximum.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 T \u226410<sup>4</sup></p><p>1 \u2264 L \u2264 R \u2264 10<sup>18</sup></p>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include <iostream>\n#include <vector>\n#include <set>\n#include <unordered_map>\n#include <queue>\n#include <algorithm>\n#include <cstring> // For memset\nusing namespace std;\n\ntypedef long long int ll;\ntypedef long double ld;\ntypedef pair<ll, ll> pii;\ntypedef vector<ll> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vpi;\ntypedef set<ll, greater<ll>> st;\ntypedef multiset<ll, greater<ll>> mst;\ntypedef unordered_map<ll, ll> mapp;\ntypedef pair<pii, pii> ppii;\ntypedef queue<ll> que;\n\nconst ll mod = 1000000007;\nstring s1, s2;\nll dp[64][2][2][2][2];\n\nll func(ll ind, ll ar, ll al, ll br, ll bl) {\n    if (ind == s1.size())\n        return 0;\n    if (dp[ind][ar][al][br][bl] != -1)\n        return dp[ind][ar][al][br][bl];\n    ll mina = 0, maxa = 1;\n    if (al == 0 && s1[ind] == '1')\n        mina = 1;\n    if (ar == 0 && s2[ind] == '0')\n        maxa = 0;\n    ll maxb = 1, minb = 0;\n    if (br == 0 && s2[ind] == '0')\n        maxb = 0;\n    if (bl == 0 && s1[ind] == '1')\n        minb = 1;\n\n    ll i, j, val = 0;\n    for (i = mina; i <= maxa; i++) {\n        for (j = minb; j <= maxb; j++) {\n            ll temp = (1LL << (s1.size() - ind - 1)) * (i ^ j);\n            ll nar, nal, nbr, nbl;\n            nar = ar == 0 && i == s2[ind] - '0' ? 0 : 1;\n            nal = al == 0 && i == s1[ind] - '0' ? 0 : 1;\n            nbr = br == 0 && j == s2[ind] - '0' ? 0 : 1;\n            nbl = bl == 0 && j == s1[ind] - '0' ? 0 : 1;\n            val = max(val, temp + func(ind + 1, nar, nal, nbr, nbl));\n        }\n    }\n    return dp[ind][ar][al][br][bl] = val;\n}\n\nstring getbin(ll num) {\n    string res = \"\";\n    while (num) {\n        res += ((num & 1) + '0');\n        num /= 2;\n    }\n    if (res == \"\") // Handle case for 0 explicitly\n        res = \"0\";\n    else\n        reverse(res.begin(), res.end());\n    return res;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int t;\n    cin >> t;\n    while (t--) {\n        ll l, r;\n        cin >> l >> r;\n        s1 = getbin(l);\n        s2 = getbin(r);\n        while (s1.size() != s2.size())\n            s1 = '0' + s1;\n        memset(dp, -1, sizeof(dp));\n        cout << func(0, 0, 0, 0, 0) << \"\\n\";\n    }\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Solution Approach is missing"
            ],
            "last_updated": "2024-06-22T02:43:58.712395+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": ""
        },
        "id": 305,
        "input_format": "The first line of the input contains one integer T - the number of test cases. Then T test cases follow.\n\nThe first and only line of each test case contains two space-separated integers L and R.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For the first test case, 1 and 2 give the maximum xor, which is 3.\n\nFor the second test case, 7 and 8 give the maximum xor, which is 15.\n\nFor the third test case, 5 and 10, 6 and 9, 7 and 8 give the maximum xor, which is 15.",
        "output_format": "For each test case, print the maximum value of xor of two integers in the range L to R(both inclusive) on a separate line.",
        "samples": [
            {
                "input": "3\n1 3\n3 8\n5 10",
                "output": "3\n15\n15"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Dynamic Programming",
            "Digit Dp"
        ],
        "template_code": [],
        "time_limit_sec": 5.0,
        "title": "Maximum XOR",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}