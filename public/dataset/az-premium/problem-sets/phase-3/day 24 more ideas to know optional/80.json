{
    "code": 200,
    "data": {
        "body": "<p>Consider the following function.</p><pre><code class=\"language-plaintext\">long long get(long long L, long long R, long long m) {\r\n    long long sum = 0;\r\n    for(long long i = L; i &lt;= R; i++) {\r\n        sum += (i % m);\r\n        sum %= 1000000007;\r\n    }\r\n    return sum;\r\n}</code></pre><p>The above program is very inefficient for larger values of <i>L, R, m</i>.<br>Your challenge is to write an efficient program, that will find the value of <strong>get</strong> function in very less time.</p>",
        "complete_approach": "",
        "constraints": "1. $1 \\leq T \\leq 10^5$\n2. $1 \\leq L \\leq R \\leq 10^{18}$\n3. $1 \\leq m \\leq 10^{18}$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nll cal(ll n) {\n    ll x = n, y = n + 1;\n    if(x % 2 == 0) x /= 2;\n    else y /= 2;\n    x %= mod; y %= mod;\n    ll ans = x * y % mod;\n    if(ans < 0) ans += mod;\n    return ans;\n}\n\nll get(ll n, ll m) {\n    ll t = (n + 1) / m;\n    t %= mod;\n    ll ans = cal(m - 1) * t % mod;\n    n %= m;\n    if(n < 0) n += m;\n    if(n < m - 1) ans += cal(n);\n    ans %= mod;\n    if(ans < 0) ans += mod;\n    return ans;\n}\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int T = 1; cin >> T;\n    assert(T > 0 && T <= 100000);\n    while(T--) {\n        ll L, R, M;\n        cin >> L >> R >> M;\n        assert(L > 0 && R > 0 && L <= R && M > 0 && M <= 1e18);\n        ll ans = get(R, M) - get(L - 1, M);\n        ans %= mod;\n        if(ans < 0) ans += mod;\n        cout << ans << \"\\n\";\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:16:47.947507+00:00"
        },
        "hints": {
            "hint1": "<p>Can you solve the problem when '<i>l'</i> is always 1?</p>",
            "hint2": "<p>When <i>l = 1</i>, the pattern will be like that<br>1, 2, 3, ..., <i>m</i> - 1, 0, 1, 2, ..., <i>m</i> - 1, 0, 1, 2, ...., <i>m</i> - 1, ..., 0, 1, 2, ..., (<i>R % m</i>).</p>",
            "solution_approach": "<p>Let's try to solve the problem when '<i>l'</i> is always 1. Let's denote <i>mod = 10<sup>9</sup> + 7</i> and <i>rm = R % m</i>;</p><p>Let <i>F(n, m) = get(1, n, m)</i>. Now <i>get(l, r, m) = (F(r, m) - F(l - 1, m)) % mod.</i> Now how to calculate <i>F(n, m)</i> efficiently?</p><p>Observe the pattern:<br><i>F(n, m) = (0+1+2+3..+(m-1)+0+1+...+(m-1)+0+1+...+(m-1)+...+0+1+2+...+(rm)) % mod.</i></p><p>We can see that the sum <i>0+1+2+3..+(m-1)</i> is repeating <i>(R+1)/m</i> times. And yes, now we can solve the problem.</p><p>If <i>rm</i> == 0: <i>F(n, m) = (m * (m - 1) / 2 * (R / m)) % mod</i><br>Else <i>F(n, m) = (m * (m - 1) / 2 * (R / m) + rm * (rm + 1) / 2) % mod</i></p><p>Now the challenge is that we have to take mod properly so that we can avoid overflow. You can refer through Solution Code to learn how to avoid overflow.</p><p><strong>Time Complexity:</strong> <i>O(1)</i><br><strong>Space Complexity:</strong> <i>O(1) extra space</i></p>"
        },
        "id": 80,
        "input_format": "<p>The first line of input contains one integer <i>T</i> \u2014 the number of test cases. Then <i>T</i> test cases follow.<br>The only line of each test case contains three space-separated numbers <i>L, R</i>, and <i>m</i>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p><i><strong>Explanation 1:</strong></i><br>Sum = (4 % 6 + 5 % 6) % 1000000007 = 9</p><p><i><strong>Explanation 2:</strong></i><br>Sum = (4 % 9 + 5 % 9 + 6 % 9 + 7 % 9 + 8 % 9 + 9 % 9 + 10 % 9) % 1000000007 = 4 + 5 + 6 + 7 + 8 + 0 + 1 = 31</p>",
        "output_format": "<p>For each test case, print a number on a new line denoting the answer return by <strong>get</strong> function in the above program.</p>",
        "samples": [
            {
                "input": "3\n4 5 6\n4 10 9\n1 10000000000000000 93464156618",
                "output": "9\n31\n14972415"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Inefficient Program",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}