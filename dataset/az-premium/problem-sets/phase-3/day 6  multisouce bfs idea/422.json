{
    "code": 200,
    "data": {
        "body": "<p>You have been given a grid of size <i>N</i> x <i>N. </i>Each cell is either empty (.) or occupied (#). Size of each cell is 1 x 1. In the connected component, you can reach any cell from every other cell in the component by repeatedly stepping to adjacent cells in the north, south, east, and west directions.&nbsp;<br>Your task is to find the area and perimeter of the connected component having the largest area. The area of a connected component is just the number of '#' characters that are part of it. If multiple connected components tie for the largest area, find the smallest perimeter among them.</p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>N</i> \u2264 1000</p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nint N, R;\nchar grid[1002][1002]; // pad with .'s\nint region[1002][1002], area[1000000], perimeter[1000000];\n\ntypedef pair<int,int> pii;\nvoid visit(int i, int j, int r)\n{\n  stack<pii> to_visit;\n  to_visit.push(make_pair(i,j));\n  while (!to_visit.empty()) {\n    pii current = to_visit.top();\n    to_visit.pop();\n    i = current.first; j = current.second;\n    if (region[i][j] != 0 || grid[i][j]=='.') continue;\n    region[i][j] = R;\n    area[R]++;\n    to_visit.push(make_pair(i-1,j));\n    to_visit.push(make_pair(i+1,j));\n    to_visit.push(make_pair(i,j-1));\n    to_visit.push(make_pair(i,j+1));\n  }\n}\n\nvoid find_perimeters(void)\n{\n  for (int i=1; i<=N; i++)\n    for (int j=1; j<=N; j++) {\n      int r = region[i][j];\n      if (r == 0) continue;\n      if (region[i-1][j]==0) perimeter[r]++;\n      if (region[i+1][j]==0) perimeter[r]++;\n      if (region[i][j-1]==0) perimeter[r]++;\n      if (region[i][j+1]==0) perimeter[r]++;\n    }\n}\n\nint main(void)\n{\n  ios_base::sync_with_stdio(0);\n  cin.tie(0); cout.tie(0);\n\n  cin >> N;\n  string s;\n  for (int i=0; i<N+2; i++) grid[0][i] = grid[N+1][i] = '.';\n  for (int i=1; i<=N; i++) {\n    grid[i][0] = grid[i][N+1] = '.';\n    cin >> s;\n    for (int j=1; j<=N; j++) grid[i][j] = s[j-1];\n  }\n\n  for (int i=1; i<=N; i++)\n    for (int j=1; j<=N; j++)\n      if (grid[i][j] == '#' && region[i][j] == 0) visit(i,j,++R);\n\n  find_perimeters();\n\n  int best_a=0, best_p=0;\n  for (int i=1; i<=R; i++)\n    if (area[i] > best_a || (area[i] == best_a && perimeter[i] < best_p)) {\n      best_a = area[i];\n      best_p = perimeter[i];\n    }\n\n  cout << best_a << \" \" << best_p << \"\\n\";\n  return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:16:32.602673+00:00"
        },
        "hints": {
            "hint1": "Given a grid of cells with # or . (empty) elements. Each cell of the grid is equivalent to the node of a graph. All valid transitions to neighboring cells (right, left, top and bottom), form the edges that connect the cells. In this way, how many connected components do you see in the grid?",
            "hint2": "The grid can be divided into components of contiguous-filled cells. The area is the size of the component, while the perimeter is the count of the number of cell borders of the component, which is not shared by another filled cell. We are going to use flood fill to determine the maximum possible area and its corresponding minimum possible perimeter.",
            "solution_approach": "This problem can be solved with flood fill. We loop over all cells and use depth-first search (DFS) or breadth-first search (BFS) to label the entire component containing the cell. Ordinarily, this would take $O(N^4)$ time, since each search could take $O(N^2)$ time, and we perform $O(N^2)$ searches. However, if a cell has already been visited by a previous search (i.e., it is in the same component as a previously seen cell), then we can skip it since the cells in its component have already been labeled. Thus, every cell is only visited once, so the complexity of all the searches together is only $O(N^2)$, which runs in time.\n\nNow each cell is labeled with a \"component ID.\" We then need to find the area and perimeter of each connected component. The area is simply the number of cells labeled with this ID, and the perimeter is the sum over all cells in the region of the number of \"border edges\" of that cell (i.e., the number of empty-space cells adjacent to that cell).\n\nWe can initialize the area and perimeter of each region to zero and compute them incrementally by making a final pass over the grid.\n\nOnce all areas and perimeters are computed, it is a simple matter to find the largest area, and among those connected components with the largest area, find the smallest perimeter.\n\n---\n\nWe traverse over all the cells of the grid, keeping count of the maximum contiguous filled components we can find. We apply DFS or BFS to do so. Since the number of cells is $N^2$, there will be $N^2$ searches on all the $N^2$ cells, making the time complexity $O(N^4)$.\n\nThe time complexity can be reduced by maintaining a `vis[][]` array, which marks the cells that have already been visited. When a cell is marked, all the cells in the same component as that cell are also traversed and marked. Hence, no cell is traversed twice, and the time complexity becomes $O(N^2)$.\n\n---\n\n### Alternative Explanation:\n\nTo calculate the area of the components, count the number of filled cells in that component. The value of the perimeter is the count of border edges of the connected cells, which they share either with a boundary or an empty cell.\n\nFinally, for all the connected components, find the one with the largest area and its corresponding perimeter.\n\n---\n\n### Example Run:\n\nInput Grid:\n\n```\n5\n#...#\n##.##\n....#\n##...\n##...\n```\n\nThis is a $5 \\times 5$ grid.\n\n1. **Component 1:**\n   - Start DFS from the top-left cell (`#`).\n   - Area = Number of components = 3  \n   - Perimeter = Boundary edges (3) + Shared with empty cells (5) = $8$  \n\n   Mark the cells as visited.\n\n2. **Component 2:**\n   - Start DFS from the 5th cell of the 1st row (`#`) and its connected cells.  \n   - Area = 4, Perimeter = 10  \n\n3. **Component 3:**\n   - Area = 4, Perimeter = 8  \n\n**Result:**  \nThe maximum possible area is $4$, with the smallest perimeter of $8$.\n\n**Answer:**  \nArea = $4$, Perimeter = $8$\n\n---\n\n### Time Complexity:\n\n- **Time Complexity:** $O(N^2)$"
        },
        "id": 422,
        "input_format": "The first line of input contains N, and the next N lines describe the grid. At least one '#' character will be present.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "Please output one line containing two space-separated integers, the first being the area of the largest connected component, and the second being its perimeter. If multiple connected components tie for the largest area, print the one which has the smallest perimeter among them.",
        "samples": [
            {
                "input": "6\n##....\n....#.\n.#..#.\n.#####\n...###\n....##",
                "output": "13 22"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Area and Perimeter of Connected Components",
        "video_editorial_id": 8202
    },
    "details": "Problem Details"
}