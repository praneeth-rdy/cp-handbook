{
    "code": 200,
    "data": {
        "body": "Given a bracket sequence with \u2018?\u2019 at some places, you need to find the number of ways you can replace \u2018?\u2019 with \u2018(\u2018 or \u2018)\u2019 to form a regular bracket sequence. A bracket sequence is called regular if it is possible to obtain the correct arithmetic expression by inserting characters + and 1 into this sequence.",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 t \u2264 10<sup>5</sup></p><p>1 \u2264 n \u2264 10<sup>3</sup> where n is the length of the string.</p><p>It is guaranteed that the sum of n<sup>2</sup> over all test cases does not exceed 10<sup>6</sup>.</p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \n#define int long long\nconst int mod=1e9+7;\nint dp[1001][1001];\nsigned main(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    int t;\n    cin >> t;\n    while(t--) {\n        string s;\n        cin >> s;\n        int n = s.size();\n        for(int i=0;i<=n;i++)\n            for(int j=0;j<=n;j++)\n                dp[i][j]=0;\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            if(s[i-1] == '(') {\n                for (int j = 1; j < n; ++j) {\n                    dp[i][j] += dp[i-1][j-1];\n                    dp[i][j]%=mod;\n                }\n            }\n            else if(s[i-1] == ')') {\n                for (int j = 0; j < n; ++j) {\n                    dp[i][j] += dp[i-1][j+1];\n                    dp[i][j]%=mod;\n                }\n            }\n            else {\n                for (int j = 1; j < n; ++j) {\n                    dp[i][j] += dp[i-1][j-1];\n                    dp[i][j]%=mod;\n                }\n                for (int j = 0; j < n; ++j) {\n                    dp[i][j] += dp[i-1][j+1];\n                    dp[i][j]%=mod;\n                }\n            }\n        }\n        cout << dp[n][0] << \"\\n\";\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:47:35.716999+00:00"
        },
        "hints": {
            "hint1": "At any point, the number of \u2018(\u2018 is always greater than equal to the number of \u2018)\u2019 and total count of \u2018(\u2018 and \u2018)\u2019 in the string is equal.",
            "hint2": "Define dp[i][j] which denotes the number of ways to form a balanced bracket sequence such that the prefix sum till i is j. Denote \u2018(\u2018 with 1 and \u2018)\u2019 with -1.",
            "solution_approach": "<p>For ?, consider both the cases for \u2018(\u2018 and \u2018)\u2019. At any point, the prefix sum should not be negative. The answer would be dp[n][0] since the prefix sum should be 0 at the end of the string.</p><p>Time Complexity per test case: O(n<sup>2</sup>)</p>"
        },
        "id": 502,
        "input_format": "The first line of the input contains one integer t - the number of test cases. Then t test cases follow.\n\nThe first and only line of each test case contains a string with characters, \u2018(\u2018, \u2018)\u2019 and \u2018?\u2019.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "For the first test case, following strings are possible: ()() and (()).\n\nFor the second test case, only one string is possible: ().\n\nFor the third test case, only one string is possible: ()()().\n\nFor the fourth test case, n is odd hence no string is possible.",
        "output_format": "For each test case, print the number of ways to replace \u2018?\u2019 with \u2018(\u2018 or \u2018)\u2019 to form a balanced bracket sequence mod 10^9+7.",
        "samples": [
            {
                "input": "5\n(??)\n??\n()()()\n???\n??????",
                "output": "2\n1\n1\n0\n5"
            }
        ],
        "status": "PUBLISHED",
        "tags": [],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Balanced Bracket Sequence",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}