{
    "code": 200,
    "data": {
        "body": "<p>Given the head of the singly connected linked list, your task is to reorder it as follows.</p><p>Original list:</p><pre><code class=\"language-plaintext\">L1 -&gt; L2 -&gt; L3 -&gt; ...... -&gt; Ln-2 -&gt; Ln-1 -&gt; Ln</code></pre><p>Reorder list:</p><pre><code class=\"language-plaintext\">L1 -&gt; Ln -&gt; L2 -&gt; Ln-1 -&gt; L3 -&gt; Ln-2 -&gt; .....</code></pre><p>Complete the function</p><pre><code class=\"language-plaintext\">void reorderList(ListNode* head)</code></pre><p><i>head </i>is the pointer to the beginning of the linked list.</p><p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p>",
        "complete_approach": "",
        "constraints": "<p>0 \u2264 Length of the linked list \u2264 10<sup>6</sup><br>0 \u2264 Value stored in the node \u2264 10<sup>9</sup></p>",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nvoid reorderList(ListNode* head) {\n    if(!head) {\n        return;\n    }\n\n    // Finding the mid element\n    ListNode* cur = head;\n    ListNode* mid = head;\n    int cnt = 0;\n    \n    while(cur) {\n        if(cnt & 1) {\n            mid = mid -> next;\n        }\n        cur = cur -> next;\n        cnt++;\n    }\n    \n    if(cnt == 1) {\n        return;\n    }\n    \n    if(cnt & 1) {\n        mid = mid -> next;\n    }\n\n    \n    // Processing first half\n    cur = head;\n    \n    while(cur -> next != mid) {\n        cur = cur -> next;\n    }\n    \n    cur -> next = NULL;\n    \n    \n    // Processing second half\n    ListNode *nxt = mid -> next;\n    \n    mid -> next = NULL;\n    \n    while(nxt != NULL) {\n        ListNode *temp = nxt;\n        nxt = nxt -> next;\n        temp -> next = mid;\n        mid = temp;\n    }\n    \n    \n    cur = head;\n    head = NULL;\n    \n    ListNode* temp;\n    \n    while(cur && mid)\n    {\n        if(!head) {\n            head = cur;\n            temp = cur;\n        }\n        else {\n            head -> next = cur;\n            head = head -> next;\n        }\n        cur = cur -> next;\n        head -> next = mid;\n        head = head -> next;\n        mid = mid -> next;\n    }\n    \n    while(cur)\n    {\n        if(!head) {\n            head = cur;\n            temp = cur;\n        }\n        else {\n            head -> next = cur;\n            head = head -> next;\n        }\n        cur = cur -> next;\n    }\n    \n    while(mid)\n    {\n        if(!head) {\n            head = mid;\n            temp = mid;\n        }\n        else {\n            head -> next = mid;\n            head = head -> next;\n        }\n        mid = mid -> next;\n    }\n    \n    head = temp;\n}\n\nListNode* GetList(vector<int> &num) {\n    ListNode* head = nullptr;\n\n    if(num.empty()) {\n        return head;\n    }\n\n    ListNode* cur = head;\n    \n    for(int i  = 0; i < (int)num.size(); i++) {\n        ListNode* temp = new ListNode(num[i]);\n        if(!cur) {\n            cur = temp;\n            head = cur;\n        }\n        else {\n            cur->next = temp;\n            cur = temp;\n        }\n    }\n    \n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    vector<int> num;\n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        num.push_back(x);\n    }\n\n    ListNode* head = GetList(num);\n\n    reorderList(head);\n\n    while(head) {\n        cout << head->val << \" \";\n        head = head->next;\n    }\n    cout << \"\\n\";\n    \n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Solution Approach is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:15:00.239757+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": ""
        },
        "id": 528,
        "input_format": "",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "",
        "samples": [
            {
                "input": "1\n3",
                "output": "3"
            },
            {
                "input": "5\n1 2 3 4 5",
                "output": "1 5 2 4 3"
            },
            {
                "input": "4\n1 2 3 4",
                "output": "1 4 2 3"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n</fix>\n\nvoid reorderList(ListNode* head) {\n    //Complete the function\n}\n\n<fix>\nListNode* GetList(vector<int> &num) {\n    ListNode* head = nullptr;\n\n    if(num.empty()) {\n        return head;\n    }\n\n    ListNode* cur = head;\n    \n    for(int i  = 0; i < (int)num.size(); i++) {\n        ListNode* temp = new ListNode(num[i]);\n        if(!cur) {\n            cur = temp;\n            head = cur;\n        }\n        else {\n            cur->next = temp;\n            cur = temp;\n        }\n    }\n    \n    return head;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    vector<int> num;\n    for(int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        num.push_back(x);\n    }\n\n    ListNode* head = GetList(num);\n\n    reorderList(head);\n\n    while(head) {\n        cout << head->val << \" \";\n        head = head->next;\n    }\n    cout << \"\\n\";\n    \n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Reorder List I",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}