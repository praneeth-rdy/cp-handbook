{
    "code": 200,
    "data": {
        "body": "<p>You are given a string S. Find the minimum number of parentheses you should add to make the parentheses valid.</p><p>A parentheses is valid if:</p><ol><li>It is an empty string</li><li>It can be written as AB where A and B are valid parentheses</li><li>It can be written as (A) where is a valid parentheses</li></ol>",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 2 \\times 10^5$  \n\n$1 \\leq |S| \\leq 10^5$  \n\nIt is guaranteed that the sum of $|S|$ over all test cases does not exceed $10^6$.",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define IOS                \\\n  ios::sync_with_stdio(0); \\\n  cin.tie(0);              \\\n  cout.tie(0);\n\nint main() {\n  IOS int t;\n  cin >> t;\n  while (t--) {\n    string s;\n    cin >> s;\n    int n = s.size();\n    stack<char> st;\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n      if (s[i] == '(')\n        st.push('(');\n      else {\n        if (st.empty())\n          ans++;\n        else\n          st.pop();\n      }\n    }\n    while (!st.empty()) {\n      st.pop();\n      ans++;\n    }\n    cout << ans << \"\\n\";\n  }\n  return 0;\n}\n```\n\n\n",
                "language": "C++14"
            },
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve() {\n  string s;\n  cin >> s;\n  int flag = 0, n = s.size();\n  int ans = 0;\n  for (int i = 0; i < n; i++) {\n    if (s[i] == '(') {  // new nesting start\n      flag += 1;\n    } else if (s[i] == ')') {  // close new nesting\n      flag -= 1;\n    }\n    if (flag < 0) {  // if we get ')' and flag =0, we will need to add '('\n                     // somewhere before to balance correctly.\n      ans -= flag;\n      flag = 0;\n    }\n  }\n  ans += flag;  // balance the leftover '(' nestings.\n  cout << ans << endl;\n}\n\nsigned main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  int _t;\n  cin >> _t;\n  while (_t--) solve();\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:15:27.187565+00:00"
        },
        "hints": {
            "hint1": "Parentheses is valid if at each index the number of opening brackets is greater than or equal to the number of closing brackets. Use stack to keep count of this number. If at any stage, the stack is empty and there is a closing bracket, the answer will increase.\nTime Complexity per test case: $O(N)$",
            "hint2": "",
            "solution_approach": "Let's understand the problem with the logic on a sample. \n(()))(()\n\n### Solution 1 - Using a stack \nNow, let's say you start, with the stack empty, and when \u2018(\u2019 comes you push, when \u2018)\u2019 Comes you pop.\n\n( \u2192 (( \u2192 pop the opening bracket -> ( -> pop the opening bracket again -> empty string\n\nNow ) comes and Stack is empty. So, this means this bracket has no matching bracket. hence, we will have to add a opening bracket just before this and balance it out.So the count of our answer increases by 1\n\nNow when the next elements come\n\n ( \u2192 (( \u2192 pop the opening bracket -> (\n\nFinally, after completion of string traversal there is 1 unmatched \u2018(\u2019 bracket in the stack. So we will need to add a Closing bracket for it. So the final answer is going to be 2 in this case. There are 2 cases that need to be handled. \n\n### Solution 2 - Without stack\nWe can solve this problem by using a `flag` variable which increases its value by $+1$ when it encounters a opening bracket and decreases it by $1$ when we get a closing bracket. So if at any time the value of the `flag` variable gooes to $-1$, that means we have got a closing bracket without a matching opening bracket. So we need to increase our answer by the 1.\n\nTime Complexity per test case: $O(N)$"
        },
        "id": 348,
        "input_format": "<p>The first line of the input contains one integer T - the number of test cases. Then T test cases follow.</p><p>The first line of each test case contains one string S.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>For the first test case, we need to add 2 opening brackets: (((())))</p><p>For the second test case, we need to add 1 closing bracket: ()()(())</p><p>For the third test case, we need two add 2 opening and 2 closing brackets: (())(())</p>",
        "output_format": "<p>For each test case, print the minimum number of parentheses you should add to make the parentheses valid.</p>",
        "samples": [
            {
                "input": "3\n(())))\n()()(()\n))((",
                "output": "2\n1\n4\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-az"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Valid Parentheses AZ101",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}