{
    "code": 200,
    "data": {
        "body": "<p>Given an array of numbers, that might contain duplicates, <strong>print all possible unique permutations in lexicographically increasing order.</strong></p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>n</i> \u2264 8<br>0 \u2264 a<sub>i</sub> \u2264 10<sup>9</sup></p>",
        "difficulty": 3,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\nmap<int, int> mp;\nvector<int> b;\n\nvoid rec(int l)\n{\n    if (l == n)\n    {\n        for (int i = 0; i < n; i++)\n            cout << b[i] << \" \";\n        cout << endl;\n        return;\n    }\n    for (auto &it : mp)\n    {\n        if (it.second != 0)\n        {\n            b.push_back(it.first);\n            it.second--;\n            rec(l + 1);\n            it.second++;\n            b.pop_back();\n        }\n    }\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    cin >> n;\n    int a;\n    for (int i = 0; i < n; i++)\n    {\n        cin >> a;\n        mp[a]++;\n    }\n    rec(0);\n    return 0;\n}\n\n```\n\n",
                "language": "C++14"
            },
            {
                "code": "```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 100010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nsigned main()\n{\n    // freopen(\"IN\", \"r\", stdin);\n    // freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> nums[i];\n    }\n\n    sort(nums.begin(), nums.end());\n\n    do\n    {\n        for (int u : nums)\n        {\n            cout << u << \" \";\n        }\n        cout << \"\\n\";\n    } while (next_permutation(nums.begin(), nums.end()));\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:17:14.465508+00:00"
        },
        "hints": {
            "hint1": "We can always sort the entire array and then use next_permutation() to generate permutations.   \nCan you try by using recursion and backtracking?",
            "hint2": "",
            "solution_approach": "### Level\nHere we use the length of the sequence generated till now as the level. Once level reaches n we can say that a new permutation has been generated and we can print that sequence\n### Check\nCheck once the sequence reaches the required length, we can go on printing the sequence\n### Choice\nAt each recursion we iterate through the remaining elements which have not been involved in the sequence till now in a sorted manner. For each element we have a choice of taking or not taking that element.\n### Transition\nIf we choose to take an element in our permutation at the current recursion we decrease its count from the remaining elements and also add it to the answer sequence. We increase our sequence length till now by $1$. \nAfter the backtracking is complete we return and make sure to remove that element from the permutation sequence. We add the element to our remaining elements once again so that it can be used in future."
        },
        "id": 475,
        "input_format": "<p>The first line of input contains <i>n </i>- the size of the array.<br>The second line contains <i>n</i> space-separated integers denoting the elements of the array - a<sub>1</sub>, a<sub>2</sub>, \u2026, a<sub>n</sub>.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "<p>Print all permutations in lexicographically increasing order. See the sample output for more clarity.</p>",
        "samples": [
            {
                "input": "3\n1 1 1",
                "output": "1 1 1"
            },
            {
                "input": "3\n1 2 1",
                "output": "1 1 2 \n1 2 1 \n2 1 1 "
            },
            {
                "input": "3\n2 1 3",
                "output": "1 2 3 \n1 3 2 \n2 1 3 \n2 3 1 \n3 1 2 \n3 2 1 "
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Recursion",
            "Backtracking"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "All Permutations",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}