{
    "code": 200,
    "data": {
        "body": "<p>You have given an undirected graph of <strong>N </strong>vertices and <strong>M</strong> edges. Edge weight <strong>d</strong> on edge between nodes <strong>u</strong> and <strong>v</strong> represents that <strong>u</strong> and <strong>v</strong> are connected by a thread of length <strong>d</strong> units.&nbsp;<br>You set node <strong>A</strong> on to the fire. It takes to fire 1 unit of time to travel 1 unit of distance via threads.<br>Let <strong>T</strong> be the minimum time in which all the threads will be burned out.&nbsp;</p><p>Your task is to find <strong>10T</strong>. We can prove that <strong>10T</strong> will always be an integer number.</p><p>See the sample test cases for more explanation.</p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 N \u2264 2 x 10<sup>5</sup><br>1 \u2264 M \u2264 2 x 10<sup>5</sup><br>1 \u2264 u, v \u2264 N<br>1 \u2264 d \u2264 10<sup>9</sup></p>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n\nsigned main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n    cout.tie(NULL);\n\n    int n;\n    cin >> n;\n    int m;\n    cin >> m;\n\n    vector<pair<int, ll>> graph[n + 1];\n    vector<pair<pair<int, int>, ll>> edges;\n\n    for (int i = 0; i < m; i++)\n    {\n        int u, v;\n        ll d;\n        cin >> u >> v >> d;\n        graph[u].push_back({v, d});\n        graph[v].push_back({u, d});\n        edges.push_back({{u, v}, d});\n    }\n\n    int st;\n    cin >> st;\n\n    ll dist[n + 1];\n\n    for (int i = 1; i <= n; i++)\n    {\n        dist[i] = 1e18;\n    }\n\n    priority_queue<pair<ll, int>> q;\n\n    q.push({0, st});\n    dist[st] = 0;\n\n    bool visited[n + 1];\n    memset(visited, false, sizeof(visited));\n\n    while (!q.empty())\n    {\n        auto it = q.top();\n        q.pop();\n\n        ll w = -it.first;\n        int u = it.second;\n\n        if (visited[u])\n            continue;\n\n        visited[u] = true;\n\n        for (auto it : graph[u])\n        {\n            int v = it.first;\n            ll d = it.second;\n\n            if (dist[v] > w + d)\n            {\n                dist[v] = w + d;\n                q.push({-dist[v], v});\n            }\n        }\n    }\n\n    ll ans = -1e18;\n\n    for (int i = 1; i <= n; i++)\n        assert(visited[i]);\n\n    for (auto it : edges)\n    {\n        int u = it.first.first;\n        int v = it.first.second;\n        ll d = it.second;\n\n        ans = max(ans, (dist[u] + dist[v] + d) * 5);\n    }\n\n    assert(ans > 0);\n\n    cout << ans << \"\\n\";\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "Solution Approach is missing"
            ],
            "last_updated": "2024-06-22T02:19:13.547294+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": ""
        },
        "id": 618,
        "input_format": "<p>The first line of input contains <strong>N - </strong>the number of nodes in the graph.<br>The second line contains <strong>M </strong>- the number of edges in the graph.<br>Next <strong>M</strong> lines contain three integers <strong>u</strong>, <strong>v</strong>, <strong>d</strong> - there is a thread between node <strong>u</strong> and <strong>v</strong> of length <strong>d</strong>.<br>The last line of input contains <strong>A</strong> - the node on which we set fire.</p><p>It\u2019s guaranteed that graph is connected.</p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "**Explanation 1:**\n\n1. At t = 0, node 1 is at fire.\n2. At t = 1, thread 1-2 is half burned.\n3. At t = 2, thread 1-2 is fully burned.\nSo T = 2. And 10T = 20.\n\n**Explanation 2:**\n\n1. At t = 0, node 1 is at fire.\n2. At t = 2, thread 1-2 is fully burned, and thread 1-3 is 1/3rd burned.\n3. At t = 4, threads 1-2 and 2-3 are fully burned, and 4 units of thread 1-3 are burned. For the remaining 2 units of thread 1-3, fire is approaching from both ends.\n4. At t = 5, all threads are fully burned.\nSo T = 5. And 10T = 50.\n\n**Explanation 3:**\n\n1. At t = 0, node 1 is starting to burn.\n2. At t = 2, threads 1-2 and 1-3 are fully burned. Now for thread 2-3, fire is approaching from both ends at equal speed.\n3. At t = 2.5, thread 2-3 is fully burned.\nSo T = 2.5. And 10T = 25.",
        "output_format": "<p>Print the value of <strong>10T</strong>.</p>",
        "samples": [
            {
                "input": "2\n1\n1 2 2\n1",
                "output": "20"
            },
            {
                "input": "3\n3\n1 2 2\n2 3 2\n1 3 6\n1",
                "output": "50"
            },
            {
                "input": "3\n3\n1 2 2\n1 3 2\n2 3 1\n1",
                "output": "25"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Graphs",
            "Single Source Shortest Path",
            "Dijkstra"
        ],
        "template_code": [],
        "time_limit_sec": 2.0,
        "title": "Burn them All",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}