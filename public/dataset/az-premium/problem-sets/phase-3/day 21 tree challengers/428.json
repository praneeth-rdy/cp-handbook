{
    "code": 200,
    "data": {
        "body": "<p>You are given a tree consisting of <i>n</i> nodes. The diameter of a tree is the maximum distance between two nodes. Your task is to count the number of different diameters of the tree.</p>",
        "complete_approach": "",
        "constraints": "<p>1 \u2264 <i>n </i>\u2264 2 x 10<sup>5</sup><br>1 \u2264 <i>a</i>, <i>b </i>\u2264 <i>n</i></p>",
        "difficulty": 4,
        "editorial_code": [
            {
                "code": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long int\n#define LD long double\n\nconst int N = 200010;\n\nint inf = 1e9;\nint mod = 1e9 + 7;\n\nvector<int> graph[N];\nint diameter = 0;\nll cnt_diameter = 0;\n\nvoid update(int dia, ll cnt) {\n    if(diameter < dia) {\n        diameter = dia;\n        cnt_diameter = cnt;\n    }\n    else if(diameter == dia) {\n        cnt_diameter += cnt;\n    }\n    return;\n}\n\npair<int,int> findDiameter(int cur, int prev) {\n    vector<pair<int,int>> len;\n\n    for(int u : graph[cur]) {\n        if(u == prev) continue;\n        auto it = findDiameter(u, cur);\n        len.push_back({it.first, it.second});\n    }\n\n    sort(len.begin(), len.end(), [&](pair<int,int> A, pair<int,int> B) {\n        return A.first > B.first;\n    });\n\n    if(len.empty()) {\n        update(1, 1);\n    }\n    else if((int)len.size() == 1) {\n        update(len[0].first + 1, len[0].second);\n    }\n    else if(len[0].first == len[1].first) {\n        int dia = len[0].first + len[1].first + 1;\n        ll cnt = 0;\n        ll sqcnt = 0;\n        for(auto it : len) {\n            if(it.first == len[0].first) {\n                cnt += it.second;\n                sqcnt += 1LL * it.second * it.second;\n            }\n        }\n        cnt = cnt * cnt - sqcnt; cnt /= 2;\n        update(dia, cnt);\n    }\n    else {\n        int dia = len[0].first + len[1].first + 1;\n        ll a = 0, b = 0;\n        for(auto it : len) {\n            if(it.first == len[0].first) {\n                a += it.second;\n            }\n            else if(it.first == len[1].first) {\n                b += it.second;\n            }\n        }\n        ll cnt = a * b;\n        update(dia, cnt);\n    }\n    int maxi = 0, maxi_cnt = 1;\n    for(auto it : len) {\n        if(it.first > maxi) {\n            maxi = it.first;\n            maxi_cnt = it.second;\n        }\n        else if(it.first == maxi) {\n            maxi_cnt += it.second;\n        }\n    }\n    return {maxi + 1, maxi_cnt};\n}\n\nsigned main()\n{\n    //freopen(\"IN\", \"r\", stdin);\n    //freopen(\"OUT\", \"w\", stdout);\n\n    ios_base::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int n; cin >> n;\n    for(int i = 0; i < n - 1; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].push_back(v);\n        graph[v].push_back(u);\n    }\n\n    findDiameter(1, -1);\n\n    cout << cnt_diameter << \"\\n\";\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:35:00.216048+00:00"
        },
        "hints": {
            "hint1": "Find the center of the tree, then find how many diameters you can form.",
            "hint2": "",
            "solution_approach": "1. A tree can have at most two centers. The center of a tree is also the center of its diameter. To find the center(s) of a tree, follow these steps:\n\n2. Find the length of the diameter of the tree. The diameter is the longest path between any two nodes in the tree.\n\n3. Once you have the length of the diameter, move from the farthest node towards the center by going up a distance of diameter/2 nodes.\n\n4. If the length of the diameter (diameter) is even, there are two centers in the tree. These centers are located at nodes $\\lfloor\\frac{\\text{diameter}}{2}\\rfloor$ and $\\lfloor\\frac{\\text{diameter}}{2}\\rfloor - 1$ on the diameter path.\n\nBy identifying the length of the diameter and then moving towards the center, you can determine the center(s) of the tree. If the diameter length is even, there will be two centers at equal distances from both ends of the diameter.\n\n\nLets approach both the cases :\n### Case 1 : 1 center\n1. Consider the center of the tree, let's call it Center.\n\n2. Imagine the tree to be rooted at the Center.\n\n3. Traverse each adjacent node from the Center and consider them as separate subtrees.\n\n4. For each subtree, determine the number of leaf nodes that are located at a depth of $\\lfloor\\frac{\\text{diameter}}{2}\\rfloor$ from the root of that subtree. (The diameter is the maximum distance between two nodes in the tree.)\n\n5. Calculate the summation of all possible pairwise products of the number of leaf nodes in each subtree obtained from step 4. This will give you the count of all possible diameters in the tree when there is only one center.\n\nThe idea behind this approach is that each adjacent node from the center represents a separate subtree. By finding the number of leaf nodes at a depth of diameter/2 in each subtree and considering pairwise combinations, you account for all possible diameters that can be formed by connecting leaf nodes from different subtrees via the center.\n\nBy following these steps, you can determine the count of all possible diameters in a tree when there is one center.\n\n### Case 2 : 2 centers\n1. Consider the two centers of the tree. Let's call them Center1 and Center2.\n\n2. Start by imagining the tree to be rooted at Center1. From Center1, explore each adjacent node and consider them as separate subtrees.\n\n3. For each subtree, determine the number of leaf nodes that are located at a depth of $\\lfloor\\frac{\\text{diameter}}{2}\\rfloor$ from the root of that subtree. (The diameter is the maximum distance between two nodes in the tree.)\n\n4. Repeat the same process, but this time imagine the tree to be rooted at Center2. Explore each adjacent node from Center2 and determine the number of leaf nodes at a depth of $\\lfloor\\frac{\\text{diameter}}{2}\\rfloor$ from the root of each subtree.\n\n5. For each subtree on the side of Center1, and for each subtree on the side of Center2, calculate the number of leaf nodes satisfying the condition mentioned in step 3 and step 4.\n\n6. Finally, find the summation of all possible pairwise products of the number of leaf nodes in each subtree obtained from step 5. This will give you the count of all possible diameters in the tree.\n\nBy following these steps, you can determine the count of all possible diameters in a tree with 2 centers."
        },
        "id": 428,
        "input_format": "<p><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);\">The first input line contains an integer <i>n</i>: the number of nodes. The nodes are numbered 1, 2, \u2026, <i>n</i>.</span><br><span style=\"background-color:rgb(255,255,255);color:rgb(0,0,0);\">Then there are <i>n </i>\u2212 1 lines describing the edges. Each line contains two integers <i>a</i> and <i>b</i>: there is an edge between nodes <i>a</i> and <i>b</i>.</span></p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>Two diameters are:</p><ol><li>2 \u2192 1 \u2192 3 \u2192 4</li><li>2 \u2192 1 \u2192 3 \u2192 5</li></ol>",
        "output_format": "<p>Print the count of diameters of the tree.</p>",
        "samples": [
            {
                "input": "5\n1 2\n1 3\n3 4\n3 5",
                "output": "2"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "Trees",
            "Dfs"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Tree Diameter - II",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}