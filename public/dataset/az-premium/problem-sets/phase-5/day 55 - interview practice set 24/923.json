{
    "code": 200,
    "data": {
        "body": "*Gerald of Rivia* also known as *The Witcher*, on his journey to find *Ciri*, faced a dangerous labyrinth.\n\nHe's in a tunnel that contains $N$ different rooms. Each room contains $A_i$ monsters inside it. He starts from room $1$. Every time he stays near a room $X$, he may go in and clear it from monsters, or just leave the room locked and move to the room $X+1$. However, if he clears a room with $K$ monsters and the next room he clears consists of $L$ monsters, then the greatest common divisor of $K$ and $L$ must be greater than $1$, otherwise, he will die ( awful curse! ). \n\nFormally, let us say that the order of rooms he visited is $i_{1}, i_{2}, , ..., i_{t}$. Then $gcd(Ai_{j}, Ai_{j + 1}) > 1$ for all $j < t$. Help him cross all the rooms by clearing the maximum number of rooms.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 100$\n$1 \\leq N \\leq 10^{5}$\n$1 \\leq A_{i} \\leq 10^{7}$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\nconst int mx = 1e7;\n\n\nint lpf[mx + 5];\nvoid sieve() {\n    for (int i = 2; i <= mx; i++) {\n        if (lpf[i])continue;\n        for (int j = 1; j * i <= mx; j++)if (lpf[i * j] == 0)lpf[i * j] = i;\n    }\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++)cin >> v[i];\n    vector<int> dp(1e7 + 1, 0);\n    int ans = 1;\n    for (auto x : v) {\n        set<int> s;\n        while (x != 1) {\n            int p = lpf[x];\n            x /= p;\n            s.insert(p);\n        }\n        int t = 0;\n        for (auto p : s)dp[p]++, ans = max(ans, dp[p]), t = max(t, dp[p]);\n        for (int p : s)dp[p] = t;\n    }\n    cout << ans << endl;\n}\nint main() {\n    ios_base :: sync_with_stdio(0);\n    cin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n    freopen(\"input.txt\", \"r\", stdin); \\\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    int t = 1;\n    // int i = 1;\n    sieve();\n    cin >> t;\n    while (t--) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n        // i++;\n    }\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing"
            ],
            "last_updated": "2024-06-22T02:43:33.316697+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "We will need to prime-factorize each integer in the array.\n\nWe first use a sieve to find the smallest prime factor of all integers in the range $[1\u202610^{7}]$.\n\nPseudo-code for pre-computing smallest prime factors using sieve:\n\n```\n  smallest_prime_factor = [1 for all ints uptil 10^7] # initialize\n  for i in [2..10^7]:\n    if smallest_prime_factor[i] == 1:\n      for j in [i..10^7]:\n        smallest_prime_factor[j] = i\n        j += i\n\n```\nPseudo-code for prime-factorization of a number:\n\n```\n  prime_factors = set()\n  while number != 1:\n    prime_factors.add(smallest_prime_factor[number])\n    number /= smallest_prime_factor[number]\n```\nNow, we can use dynamic programming to store the maximum possible sub-sequence length that ends at index $i$, such that $a_{i}$ contains $P$ as a prime factor.\n\nLet the prime factors of $a_{i}$ be $p_{1}, p_{2}, p_{3}, ... , p_{K}$.\nFor each $p_{j}$, let\u2019s say the maximum possible sub-sequence length such that the previously selected number had a common prime factor was $l_{j}$.\nWe choose the maximum length $M$ equal to $max(l_{j})$ for $(1 \\leq j \\leq K)$. We update $dp(p_{j})$ with the value $M$.\n\nWhile performing updates, we maintain a global maximum - the maximum $M$ calculated uptil now.\n\n**Time Complexity**\n\nPre-computation using sieve: $O(X*log(log(X)))$, where $X = 10^{7}$.\nComputation of max length sub-sequence: $O(N * log_{2}(Y))$, where $Y$ is the number in the array with maximum no. of prime factors."
        },
        "id": 923,
        "input_format": "The first line of input contains an integer $T$ denoting the number of test cases.\n\nThe first line of each test case contains one integer $N$ denoting the number of elements in the sequence.\n\nThe second line of each test case contains $N$ integers where $i^{th}$ integer is a number of monsters in a room $A_{i}$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "Test case 1. Gerald can clear the monsters in the rooms $2, 3, 4, 5, 7$ in that order. These rooms consist of $2, 8, 6, 3,$ and $9$ monsters, respectively. You can check that $gcd(2, 8)$, $gcd(8, 6)$, $gcd(6, 3)$ and $gcd(3, 9)$, all are greater than $1$.\n\nTest case 2. Gerald can clear the monsters in the rooms numbered $2, 3$. Each of these two rooms contains two monsters. And we know that $gcd(2, 2) = 2 > 1$.\n\nThere is one more possible solution: Gerald can clear the monsters in the rooms numbered $4, 5$. These rooms contains $3$ monsters each, and he can clear these rooms as $gcd(3, 3) = 3 > 1$.",
        "output_format": "For each test case, output the maximum number of rooms he could clear. (Gerald should survive.)",
        "samples": [
            {
                "input": "3\n7\n13 2 8 6 3 1 9\n6\n1 2 2 3 3 1\n2\n2 3\n",
                "output": "5\n2\n1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-Uber",
            "company-Graviton"
        ],
        "template_code": [],
        "time_limit_sec": 5.0,
        "title": "The Witcher",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}