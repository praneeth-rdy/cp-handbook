{
    "code": 200,
    "data": {
        "body": "You may recall that an array $arr$ is a mountain array if and only if:\n\n- $arr.length \\geq 3$\n- There exists some index $i$ ($0$-indexed) with $0 < i < arr.length - 1$ such that:\n    $arr[0] < arr[1] < ... < arr[i - 1] < arr[i]$\n    $arr[i] > arr[i + 1] > ... > arr[arr.length - 1]$\n\nGiven an integer array\u200b\u200b\u200b, output the minimum number of elements to remove to make $arr$\u200b\u200b\u200b a mountain array.\nIf mountain array is not possible, output -1.",
        "complete_approach": "",
        "constraints": "$1 \\leq T \\leq 1000$\n$1 \\leq n \\leq 10^{4}$\n$1 \\leq arr[i] \\leq 10^{6}$",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll int64_t\n#define endl '\\n'\n\n\nvoid solve() {\n\tint n, ans = 0;\n\tcin >> n;\n\tvector<int> nums(n);\n\tfor (int i = 0; i < n; i++)cin >> nums[i];\n\tvector<int> dp1(n), dp2(n), lis, lds;\n\tfor (int i = 0; i < n; i++) {\n\t\tauto it = lower_bound(lis.begin(), lis.end(), nums[i]);\n\t\tif (it != lis.end())*it = nums[i], dp1[i] = (it - lis.begin()) + 1;\n\t\telse lis.push_back(nums[i]), dp1[i] = lis.size();\n\t}\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tauto it = lower_bound(lds.begin(), lds.end(), nums[i]);\n\t\tif (it != lds.end())*it = nums[i], dp2[i] = it - lds.begin() + 1;\n\t\telse lds.push_back(nums[i]), dp2[i] = lds.size();\n\t\tif (dp1[i] >= 2 && dp2[i] >= 2)ans = max(ans, dp1[i] + dp2[i] - 1);\n\t}\n\tif (ans == 0)cout << -1 << endl;\n\telse cout << n - ans << endl;\n}\nint main() {\n\tios_base :: sync_with_stdio(0);\n\tcin.tie(nullptr); cout.tie(nullptr);\n\n#ifdef Mastermind_\n\tfreopen(\"input.txt\", \"r\", stdin); \\\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint t = 1;\n\t// int i = 1;\n\tcin >> t;\n\twhile (t--) {\n\t\t// cout << \"Case #\" << i << \": \";\n\t\tsolve();\n\t\t// i++;\n\t}\n\treturn 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [
                "First Hint is missing",
                "Second Hint is missing",
                "No sample explanation provided."
            ],
            "last_updated": "2024-06-22T02:23:32.990521+00:00"
        },
        "hints": {
            "hint1": "",
            "hint2": "",
            "solution_approach": "The basic idea of this problem is that the minimum number of removals to make a mountain array is equal to $arr.length-(longest$ $mountain$ $subsequence)$. We can calculate the longest mountain subsequence by first calculating the $LIS$ from the left and the right and storing the answers in $dpLeft$ and $dpRight$. Then consider each $0 < i < n$ to be the middle of a mountain subsequence only if $dpLeft[i]>1$ and $dpRight[i]>1$ the length of this mountain subsequence is $dpLeft[i]+dpRight[i]-1$ (we subtract $1$ to not double count the middle element)\n\n**Time Complexity** : $O(n*logn)$"
        },
        "id": 917,
        "input_format": "First-line contains $T$ - the number of test cases.\nFirst-line of each test case contains $n$ - the length of the array $arr$.\nSecond-line of each test case contains $n$ elements of array $arr$.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "",
        "output_format": "For each test case, output the minimum number of elements to remove to make $arr$\u200b\u200b\u200b a mountain array.\nIf mountain array is not possible, output -1.",
        "samples": [
            {
                "input": "3\n3\n1 5 1\n8\n2 1 1 5 6 2 3 1\n5\n1 2 3 4 5\n",
                "output": "0\n3\n-1\n"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-az"
        ],
        "template_code": [],
        "time_limit_sec": 1.0,
        "title": "Mountain Array II",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}