{
    "code": 200,
    "data": {
        "body": "<p>Consider lines of slope -1 passing between nodes. Given a Binary Tree, print all diagonal elements in a binary tree belonging to the same line.</p><figure class=\"image\"><img src=\"https://lh4.googleusercontent.com/6iZWvuIvzB444BxUdgF0hKu65etmccB36dTRWEt4xwuFMsFEkYjFO2-yoInaO5bZ8WbO7vZ20D86e4IsP2d3nswr8mbDJblBsS1EcS9oN2jPnIdz0xqx_bY2jAt5EwQRwtPHOc6z\"></figure><p>&nbsp;</p><p>Diagonal Level order traversal -&nbsp;</p><p>4 7</p><p>2 5 8</p><p>1 3 6</p><p>Complete the function:</p><p><i>vector&lt;vector&lt;int&gt;&gt; getDiagonalLevelorderTraversal(Node* root)</i></p>",
        "complete_approach": "",
        "constraints": "",
        "difficulty": 5,
        "editorial_code": [],
        "health_check": {
            "issues": [
                "Solution Approach is missing",
                "Editorial Code data is currently empty."
            ],
            "last_updated": "2024-06-22T02:15:39.001481+00:00"
        },
        "hints": {
            "hint1": "<p>Will be discussed in the live session.</p>",
            "hint2": "<p>Will be discussed in the live session.</p>",
            "solution_approach": ""
        },
        "id": 585,
        "input_format": "<p>The first line contains an integer T, (1 \u2264 T \u2264 10^5), the number of test cases.</p><p>The first line of each test case contains an integer N, &nbsp;the length of the array representing the serialized representation of a tree.</p><p>The next line contains N-space-separated integers.&nbsp;</p><p>The input is given as a serialized representation of a tree.</p><p>The following function parses the input:</p><p><i>Node* getBinaryTree(vector&lt;int&gt; &amp;num, int*ind)</i></p><p><i>Sum of N across all test cases \u2264 10^7.</i></p>",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>Test case 1</p><p>&nbsp; &nbsp; &nbsp; 5<br>&nbsp; &nbsp; &nbsp;/<br>&nbsp; &nbsp; 1<br>&nbsp; &nbsp; /<br>&nbsp; &nbsp;7<br>&nbsp; &nbsp;/<br>&nbsp;6<br>Last diagonal contains 6, then diagonal above it contains 7 and so on\u2026</p><p>&nbsp; &nbsp; &nbsp;4<br>&nbsp; &nbsp; &nbsp;/. &nbsp;\\<br>&nbsp; &nbsp;10. &nbsp;2<br>&nbsp; &nbsp;/. &nbsp;\\<br>&nbsp; 9. &nbsp; 5<br>&nbsp; &nbsp; \\<br>&nbsp; &nbsp; 6</p><p>Last diagonal contains 9,6, then diagonal aboive it contains 10, 5 and diagonal above it 4 2 &nbsp; &nbsp;</p>",
        "output_format": "<p>Return the diagonal level order traversal of the tree.</p>",
        "samples": [
            {
                "input": "11\n9\n5 1 7 6 -1 -1 -1 -1 -1\n13\n4 10 9 -1 6 -1 -1 5 -1 -1 2 -1 -1\n13\n3 6 -1 -1 8 5 -1 -1 1 10 -1 -1 -1\n9\n9 -1 2 -1 7 -1 1 -1 -1\n17\n3 7 3 0 2 4 3 10 -1 -1 -1 -1 -1 -1 -1 -1 -1\n13\n7 1 0 -1 4 -1 -1 -1 7 -1 5 -1 -1\n7\n4 8 -1 -1 9 -1 -1\n7\n10 2 -1 -1 6 -1 -1\n21\n5 -1 3 -1 6 -1 5 -1 9 -1 9 -1 3 -1 7 -1 9 -1 7 -1 -1\n21\n0 9 3 6 8 1 9 4 8 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n3\n4 -1 -1 ",
                "output": "6 \n7 \n1 \n5 \n\n9 6 \n10 5 \n4 2 \n\n6 5 10 \n3 8 1 \n\n9 2 7 1 \n\n10 \n3 \n4 \n2 \n0 \n3 \n7 \n3 \n\n0 4 \n1 \n7 7 5 \n\n8 \n4 9 \n\n2 \n10 6 \n\n5 3 6 5 9 9 3 7 9 7 \n\n3 \n8 \n4 \n9 \n1 \n8 \n6 \n3 \n9 \n0 \n\n4 "
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "0-1 Bfs",
            "Tricky",
            "Binary Tree"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Node {\n    int val;\n    Node *left, *right;\n    Node(int x) : val(x), left(NULL), right(NULL) {}\n};\n\n</fix>\nvector<vector<int>> getDiagonalLevelorderTraversal(Node* root) {\n  // Complete the function.\n}\n\n<fix>\nNode* getBinaryTree(vector<int> &num, int*ind) {\n    if(num[*ind] == -1)\n        return NULL;\n    Node* node = new Node(num[*ind]);\n    (*ind)++;\n    node->left = getBinaryTree(num,ind);\n    (*ind)++;\n    node->right = getBinaryTree(num,ind);\n    return node;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n\n    int t;\n    cin >> t;\n    while(t--){\n        int n;\n        cin>>n;\n        assert(n<=1000000);\n        vector<int>arr(n);\n        for(int i=0;i<n;i++)\n            cin>>arr[i];\n        int ind = 0;\n        Node* tree = getBinaryTree(arr,&ind);\n        vector<vector<int>> ans = getDiagonalLevelorderTraversal(tree);\n        for(auto u:ans){\n            for(auto v:u){\n                cout<<v<<\" \";\n            }\n            cout<<\"\\n\";\n        }\n        cout<<\"\\n\";\n    }\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "Diagonal Level Order Traversal",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}