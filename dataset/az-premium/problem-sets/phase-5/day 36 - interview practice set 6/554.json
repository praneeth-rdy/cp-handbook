{
    "code": 200,
    "data": {
        "body": "<p>Given two sorted arrays of size <i>N</i> and <i>M</i>, you have to find the <i>K<sup>th</sup></i> element if you merge these two arrays and sort the final array.&nbsp;</p><p>Expected Time Complexity - <i>O(log(N) + log(M))</i></p>",
        "complete_approach": "",
        "constraints": "<p><i>1 \u2264 N,M \u2264 10<sup>5</sup></i></p>\n<p><i>1 \u2264 K \u2264 N+M</i></p>\n<p><i>1 \u2264 A[i] \u2264 10<sup>6</sup></i></p>",
        "difficulty": null,
        "editorial_code": [
            {
                "code": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint KthElement(vector<int> &a, vector<int> &b, int k)\n{\n    int n = (int)a.size();\n    int m = (int)b.size();\n\n    int l = 1, r = 1e6, ans;\n    while (l <= r)\n    {\n        int mid = (l + r) / 2, cnt = 0;\n        auto it = lower_bound(a.begin(), a.end(), mid);\n        if (it != a.begin())\n        {\n            it--;\n            cnt += it - a.begin() + 1;\n        }\n        it = lower_bound(b.begin(), b.end(), mid);\n        if (it != b.begin())\n        {\n            it--;\n            cnt += it - b.begin() + 1;\n        }\n        if (cnt <= k - 1)\n            l = mid + 1, ans = mid;\n        else\n            r = mid - 1;\n    }\n    return ans;\n}\n\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n, m, k;\n    cin >> n >> m >> k;\n    \n    vector<int> a(n), b(m);\n    \n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    \n    for (int i = 0; i < m; i++)\n        cin >> b[i];\n    \n    cout << KthElement(a, b, k) << '\\n';\n\n    return 0;\n}\n```",
                "language": "C++14"
            }
        ],
        "health_check": {
            "issues": [],
            "last_updated": "2024-06-22T02:18:12.911503+00:00"
        },
        "hints": {
            "hint1": "<p>Binary search on answer</p>",
            "hint2": "<p>Find the largest element for which the count of elements less than it is less than K-1</p>",
            "solution_approach": "<p><strong>Method 1 (Binary Search):</strong><br>Binary search on answer to find the K<sup>th</sup> element. The number of elements less than the K<sup>th</sup> element will be less than equal to K-1. So we find the largest element for which the count of elements less than it is less than K-1. To find the count you can use binary search.</p><p><strong>Method 2 (Divide and Conquer):</strong></p><pre><code class=\"language-cpp\">int KthElement(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b, int l1, int r1, int l2, int r2, int k)\n{\n    int n = max(0, r1 - l1 + 1), m = max(0, r2 - l2 + 1);\n    // base case where there are a total of K elements in the array\n    if (n + m == k)\n        return max(a[r1], b[r2]);\n        \n    // base case where either of the arrays are empty\n    if (n == 0)\n        return b[l2 + k - 1];\n    if (m == 0)\n        return a[l1 + k - 1];\n    // base case where either of the arrays has only one element\n    if (n == 1)\n    {\n        if (b[l2 + k - 1] &lt;= a[l1])\n            return b[l2 + k - 1];\n        else\n            return max(a[l1], b[l2 + k - 2]);\n    }\n    if (m == 1)\n    {\n        if (a[l1 + k - 1] &lt;= b[l2])\n            return a[l1 + k - 1];\n        else\n            return max(b[l2], a[l1 + k - 2]);\n    }\n    // we eliminate the smallest n/2 or the largest n/2 elements that \n    // cannot be the answer\n    int mid1 = (n + 1) / 2, mid2 = (m + 1) / 2;\n    if (mid1 + mid2 &lt;= k)\n    {\n        if (a[l1 + mid1 - 1] &gt; b[l2 + mid2 - 1])\n            return KthElement(a, b, l1, r1, l2 + mid2, r2, k - mid2);\n        else\n            return KthElement(a, b, l1 + mid1, r1, l2, r2, k - mid1);\n    }\n    else\n    {\n        if (a[l1 + mid1 - 1] &gt; b[l2 + mid2 - 1])\n            return KthElement(a, b, l1, l1 + mid1 - 1, l2, r2, k);\n        else\n            return KthElement(a, b, l1, r1, l2, l2 + mid2 - 1, k);\n    }\n}</code></pre><p>Time Complexity - <i>O(log(m)+log(n))</i></p><p><strong>Method 2 (Divide and Conquer):</strong></p><pre><code class=\"language-cpp\">int KthElement(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b, int l1, int r1, int l2, int r2, int k)\n{\n    int n = max(0, r1 - l1 + 1), m = max(0, r2 - l2 + 1);\n    // In case we have reached end of array 1\n    if (n == 0)\n        return b[l2 + k - 1];\n    // In case we have reached end of array 2\n    if (m == 0)\n        return a[l1 + k - 1];\n    // Compare first elements of arrays and return\n    if (k == 1)\n        return min(a[l1], b[l2]);\n    int curr = k / 2;\n    // Size of array 1 is less than k / 2\n    if (n &lt; curr)\n    {\n        if (a[r1] &lt;= b[l2 + curr - 1])\n            return b[l2 + (k - n) - 1];\n        else\n            return KthElement(a, b, l1, r1, l2 + curr, r2, k - curr);\n    }\n    // Size of array 2 is less than k / 2\n    if (m &lt; curr)\n    {\n        if (b[r2] &lt;= a[l1 + curr - 1])\n            return a[l1 + (k - m) - 1];\n        else\n            return KthElement(a, b, l1 + curr, r1, l2, r2, k - curr);\n    }\n    else\n    {\n        // Normal comparison, move starting index\n        // of one array k / 2 to the right\n        if (a[l1 + curr - 1] &lt; b[l2 + curr - 1])\n            return KthElement(a, b, l1 + curr, r1, l2, r2, k - curr);\n        else\n            return KthElement(a, b, l1, r1, l2 + curr, r2, k - curr);\n    }\n}</code></pre><p>Time Complexity - <i>O(log(m+n))</i></p>"
        },
        "id": 554,
        "input_format": "The first line contains three integers N, M and K.\n\nThe second line contains N integers - elements of the first array.\n\nThe third line contains M integers - elements of the second array.",
        "languages": [
            "C",
            "C++14",
            "Java",
            "Python3"
        ],
        "memory_limit_mb": 256000,
        "note": "<p>The array elements after sorting in the first test case [1,2,3,<strong><u>4</u></strong>,5,6]</p><p>The array elements after sorting in the second test case [1,2,3,4,<strong><u>6</u></strong>,7,8,9,10]</p>",
        "output_format": "<p>Print the <i>K<sup>th</sup></i> element of the final array.</p>",
        "samples": [
            {
                "input": "3 3 4\n1 2 3\n4 5 6",
                "output": "4"
            },
            {
                "input": "5 4 5\n2 3 6 7 9\n1 4 8 10",
                "output": "6"
            }
        ],
        "status": "PUBLISHED",
        "tags": [
            "company-az"
        ],
        "template_code": [
            {
                "code": "<fix>\n#include <bits/stdc++.h>\nusing namespace std;\n</fix>\n\nint KthElement(vector<int> &a, vector<int> &b, int k)\n{\n    // Complete the function\n}\n\n<fix>\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n, m, k;\n    cin >> n >> m >> k;\n    \n    vector<int> a(n), b(m);\n    \n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    \n    for (int i = 0; i < m; i++)\n        cin >> b[i];\n    \n    cout << KthElement(a, b, k) << '\\n';\n\n    return 0;\n}\n</fix>",
                "language": "C++14"
            }
        ],
        "time_limit_sec": 1.0,
        "title": "KTHELE",
        "video_editorial_id": null
    },
    "details": "Problem Details"
}